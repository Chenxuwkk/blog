import{_ as o,r as e,o as c,c as l,b as n,e as p,w as t,d as s,a as i}from"./app.b33ca31f.js";const u={},r=n("h1",{id:"\u5251\u6307offer-ii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5251\u6307offer-ii","aria-hidden":"true"},"#"),s(" \u5251\u6307Offer II")],-1),k=n("hr",null,null,-1),d={class:"table-of-contents"},v=s("\u5251\u6307 Offer II 001. \u6574\u6570\u9664\u6CD5\uFF0829\uFF09"),m=s("\u5251\u6307 Offer II 002. \u4E8C\u8FDB\u5236\u52A0\u6CD5\uFF0867\uFF09"),b=s("\u5251\u6307 Offer II 003. \u524D n \u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D 1 \u7684\u4E2A\u6570\uFF08338\uFF09"),f=s("\u5251\u6307 Offer II 004. \u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57\uFF08137\u3001\u525156\uFF09"),y=s("\u5251\u6307 Offer II 005. \u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF\uFF08318\uFF09"),w=s("\u5251\u6307 Offer II 006. \u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C\uFF08167\uFF09"),h=s("\u5251\u6307 Offer II 007. \u6570\u7EC4\u4E2D\u548C\u4E3A 0 \u7684\u4E09\u4E2A\u6570\uFF0815\uFF09"),g=s("\u5251\u6307 Offer II 008. \u548C\u5927\u4E8E\u7B49\u4E8E target \u7684\u6700\u77ED\u5B50\u6570\u7EC4\uFF08209\uFF09"),x=s("\u5251\u6307 Offer II 009. \u4E58\u79EF\u5C0F\u4E8E K \u7684\u5B50\u6570\u7EC4\uFF08713\uFF09"),_=s("\u5251\u6307 Offer II 010. \u548C\u4E3A k \u7684\u5B50\u6570\u7EC4\uFF08560\uFF09"),L=s("\u5251\u6307 Offer II 011. 0 \u548C 1 \u4E2A\u6570\u76F8\u540C\u7684\u5B50\u6570\u7EC4\uFF08525\uFF09"),N=s("\u5251\u6307 Offer II 012. \u5DE6\u53F3\u4E24\u8FB9\u5B50\u6570\u7EC4\u7684\u548C\u76F8\u7B49\uFF08724\uFF09"),I=s("\u5251\u6307 Offer II 013. \u4E8C\u7EF4\u5B50\u77E9\u9635\u7684\u548C\uFF08304\uFF09"),j=s("303. \u533A\u57DF\u548C\u68C0\u7D22 - \u6570\u7EC4\u4E0D\u53EF\u53D8\uFF08\u4E00\u7EF4\uFF09"),S=s("\u4E8C\u7EF4\u77E9\u9635"),H=s("\u5251\u6307 Offer II 014. \u5B57\u7B26\u4E32\u4E2D\u7684\u53D8\u4F4D\u8BCD\uFF08567\uFF09"),z=s("\u5251\u6307 Offer II 015. \u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u53D8\u4F4D\u8BCD\uFF08438\uFF09"),T=s("\u5251\u6307 Offer II 016. \u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u5B57\u7B26\u4E32\uFF083\uFF09"),U=s("\u5251\u6307 Offer II 017. \u542B\u6709\u6240\u6709\u5B57\u7B26\u7684\u6700\u77ED\u5B57\u7B26\u4E32\uFF0876\uFF09"),O=s("\u5251\u6307 Offer II 018. \u6709\u6548\u7684\u56DE\u6587\uFF08125\uFF09"),A=s("\u5251\u6307 Offer II 019. \u6700\u591A\u5220\u9664\u4E00\u4E2A\u5B57\u7B26\u5F97\u5230\u56DE\u6587\uFF08680\uFF09"),D=s("\u5251\u6307 Offer II 020. \u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u7684\u4E2A\u6570\uFF08647\uFF09"),M=s("\u5251\u6307 Offer II 021. \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C n \u4E2A\u7ED3\u70B9\uFF0819\uFF09"),C=s("\u5251\u6307 Offer II 022. \u94FE\u8868\u4E2D\u73AF\u7684\u5165\u53E3\u8282\u70B9\uFF08142\u3001\u6570\u7EC4\u7248287\uFF09"),R=s("\u5251\u6307 Offer II 023. \u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u91CD\u5408\u8282\u70B9\uFF08160\uFF09"),F=s("\u5251\u6307 Offer II 024. \u53CD\u8F6C\u94FE\u8868\uFF08206\uFF09"),B=s("\u5251\u6307 Offer II 025. \u94FE\u8868\u4E2D\u7684\u4E24\u6570\u76F8\u52A0\uFF08445\uFF09"),E=s("\u5251\u6307 Offer II 027. \u56DE\u6587\u94FE\u8868\uFF08234\uFF09"),V=s("\u5251\u6307 Offer II 026. \u91CD\u6392\u94FE\u8868\uFF08143\uFF09"),q=s("430. \u6241\u5E73\u5316\u591A\u7EA7\u53CC\u5411\u94FE\u8868"),P=s("\u5251\u6307 Offer II 029. \u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868"),X=s("\u5251\u6307 Offer II 030. \u63D2\u5165\u3001\u5220\u9664\u548C\u968F\u673A\u8BBF\u95EE\u90FD\u662F O(1) \u7684\u5BB9\u5668\uFF08380\uFF09"),Z=s("\u5251\u6307 Offer II 031. \u6700\u8FD1\u6700\u5C11\u4F7F\u7528\u7F13\u5B58\uFF08146\uFF09"),G=s("\u5251\u6307 Offer II 032. \u6709\u6548\u7684\u53D8\u4F4D\u8BCD\uFF08242\uFF09"),K=s("\u5251\u6307 Offer II 033. \u53D8\u4F4D\u8BCD\u7EC4\uFF0849\uFF09"),$=i(`<h2 id="\u5251\u6307-offer-ii-001-\u6574\u6570\u9664\u6CD5-29" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-001-\u6574\u6570\u9664\u6CD5-29" aria-hidden="true">#</a> \u5251\u6307 Offer II 001. \u6574\u6570\u9664\u6CD5\uFF0829\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7C7B\u4F3C\u5FEB\u901F\u5E42</span>
<span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>INT_MIN<span class="token operator">&amp;&amp;</span>b<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8F6C\u4E3A\u8D1F\u6570\u8BA1\u7B97</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u53D6\u53CD\u52A0\u4E00</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        b <span class="token operator">=</span> <span class="token operator">~</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token operator">&gt;=</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        b<span class="token operator">=</span>tmp<span class="token punctuation">;</span>
        count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//0xc000 0000</span>
        <span class="token comment">//1100 0000 0000 0000 0000 0000 0000 0000\u5982\u679Cb\u7B49\u4E8E\u6B64\u503C\uFF0Cb+b\u5C06\u4F1A\u6EA2\u51FA</span>
        <span class="token comment">//b&gt;0xc0000000\u4E3A\u4E86b+b\u4E0D\u4F1A\u6EA2\u51FA</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span><span class="token number">0xc0000000</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">+</span>b<span class="token operator">&gt;</span>a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            b<span class="token operator">+=</span>b<span class="token punctuation">;</span>
            count<span class="token operator">+=</span>count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&gt;=</span>a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            a<span class="token operator">-=</span>b<span class="token punctuation">;</span>
            ans<span class="token operator">+=</span>count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">~</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-002-\u4E8C\u8FDB\u5236\u52A0\u6CD5-67" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-002-\u4E8C\u8FDB\u5236\u52A0\u6CD5-67" aria-hidden="true">#</a> \u5251\u6307 Offer II 002. \u4E8C\u8FDB\u5236\u52A0\u6CD5\uFF0867\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6A21\u62DF\u4E8C\u8FDB\u5236</span>
<span class="token keyword">void</span> <span class="token function">resvers</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> tmp <span class="token operator">=</span> str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        str<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        str<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">addBinary</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">resvers</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resvers</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len_a <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len_b <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>len_a<span class="token punctuation">,</span>len_b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len_a<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            carry<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len_b<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            carry<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> carry<span class="token operator">%</span><span class="token number">2</span><span class="token operator">+</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span><span class="token comment">//\u6570\u5B57\u8F6C\u5B57\u7B26</span>
        carry<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u975E\u5E38\u5DE7\u5999\uFF0C\u76F8\u5F53\u4E8E\u4FDD\u5B58\u4E86\u8FDB\u4F4D</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>carry<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ans<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token function">resvers</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-003-\u524D-n-\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D-1-\u7684\u4E2A\u6570-338" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-003-\u524D-n-\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D-1-\u7684\u4E2A\u6570-338" aria-hidden="true">#</a> \u5251\u6307 Offer II 003. \u524D n \u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D 1 \u7684\u4E2A\u6570\uFF08338\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4F4D\u8FD0\u7B97</span>
<span class="token keyword">int</span> <span class="token function">digitCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        n<span class="token operator">&amp;=</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">digitCount</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0B\u9762\u4E09\u79CDdp\u770B\u5B98\u89E3</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> highBit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            highBit <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>highBit<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp2</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> highBit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> highBit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-004-\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57-137\u3001\u525156" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-004-\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57-137\u3001\u525156" aria-hidden="true">#</a> \u5251\u6307 Offer II 004. \u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57\uFF08137\u3001\u525156\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u54C8\u5E0C\u8868</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HashTable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span>HashTable<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> hashTable <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        HashTable<span class="token operator">*</span> tmp<span class="token punctuation">;</span>
        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>hashTable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>key <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>hashTable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            tmp<span class="token operator">-&gt;</span>val<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u6CD51</span>
    <span class="token comment">// for(int i=0;i&lt;numsSize;i++)</span>
    <span class="token comment">// {</span>
    <span class="token comment">//     HashTable* tmp;</span>
    <span class="token comment">//     HASH_FIND_INT(hashTable, &amp;nums[i], tmp);</span>
    <span class="token comment">//     if(tmp!=NULL&amp;&amp;tmp-&gt;val==1)</span>
    <span class="token comment">//     {</span>
    <span class="token comment">//         return nums[i];</span>
    <span class="token comment">//     }</span>
    <span class="token comment">// }</span>
    <span class="token comment">// return 0;</span>

    <span class="token comment">//\u6CD52</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    HashTable<span class="token operator">*</span>iter<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>
    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> hashTable<span class="token punctuation">,</span> iter<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>iter<span class="token operator">-&gt;</span>val <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> iter<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4F4D\u8FD0\u7B97</span>
<span class="token comment">//\u6CD5\u4E00</span>
<span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            total <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6CD5\u4E8C</span>
<span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token comment">//\u6B64\u5904\u5FC5\u987B\u7528\u65E0\u7B26\u53F7\u6574\u578B</span>
    <span class="token keyword">unsigned</span> bit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u8FD9\u91CC\u4E0D\u80FD\u7528|\u56E0\u4E3A\u8FD9\u91CC\u662F10\u8FDB\u5236</span>
            bit <span class="token operator">+=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// res |= (bit%3&lt;&lt;i);</span>
        res <span class="token operator">+=</span> <span class="token punctuation">(</span>bit<span class="token operator">%</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5173\u4E8E\u6CD5\u4E00\u548C\u6CD5\u4E8C\u5DE6\u79FB\u4F4D\u6570\u4E00\u4E2A\u4ECE31\u5F00\u59CB\u4E00\u4E2A\u4ECE0\u5F00\u59CB\uFF0C\u5B9E\u9645\u8FBE\u5230\u7684\u6548\u679C\u662F\u4E00\u6837\u7684\u56E0\u4E3A\u5728\u5F97\u51FAans/res\u65F6\u4F4D\u79FB\u662F\u6210\u5BF9\u7684\u3002</p><h2 id="\u5251\u6307-offer-ii-005-\u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF-318" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-005-\u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF-318" aria-hidden="true">#</a> \u5251\u6307 Offer II 005. \u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF\uFF08318\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> wordsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>wordsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>wordsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wordsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        len<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wordsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>wordsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//(hash[i]&amp;hash[j])\u5FC5\u987B\u6709\u62EC\u53F7</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span>hash<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>res<span class="token punctuation">)</span>res <span class="token operator">=</span> len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>  res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-006-\u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C-167" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-006-\u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C-167" aria-hidden="true">#</a> \u5251\u6307 Offer II 006. \u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C\uFF08167\uFF09</h2><h2 id="\u5251\u6307-offer-ii-007-\u6570\u7EC4\u4E2D\u548C\u4E3A-0-\u7684\u4E09\u4E2A\u6570-15" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-007-\u6570\u7EC4\u4E2D\u548C\u4E3A-0-\u7684\u4E09\u4E2A\u6570-15" aria-hidden="true">#</a> \u5251\u6307 Offer II 007. \u6570\u7EC4\u4E2D\u548C\u4E3A 0 \u7684\u4E09\u4E2A\u6570\uFF0815\uFF09</h2><h2 id="\u5251\u6307-offer-ii-008-\u548C\u5927\u4E8E\u7B49\u4E8E-target-\u7684\u6700\u77ED\u5B50\u6570\u7EC4-209" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-008-\u548C\u5927\u4E8E\u7B49\u4E8E-target-\u7684\u6700\u77ED\u5B50\u6570\u7EC4-209" aria-hidden="true">#</a> \u5251\u6307 Offer II 008. \u548C\u5927\u4E8E\u7B49\u4E8E target \u7684\u6700\u77ED\u5B50\u6570\u7EC4\uFF08209\uFF09</h2><h2 id="\u5251\u6307-offer-ii-009-\u4E58\u79EF\u5C0F\u4E8E-k-\u7684\u5B50\u6570\u7EC4-713" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-009-\u4E58\u79EF\u5C0F\u4E8E-k-\u7684\u5B50\u6570\u7EC4-713" aria-hidden="true">#</a> \u5251\u6307 Offer II 009. \u4E58\u79EF\u5C0F\u4E8E K \u7684\u5B50\u6570\u7EC4\uFF08713\uFF09</h2><h2 id="\u5251\u6307-offer-ii-010-\u548C\u4E3A-k-\u7684\u5B50\u6570\u7EC4-560" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-010-\u548C\u4E3A-k-\u7684\u5B50\u6570\u7EC4-560" aria-hidden="true">#</a> \u5251\u6307 Offer II 010. \u548C\u4E3A k \u7684\u5B50\u6570\u7EC4\uFF08560\uFF09</h2><p><strong>\u5F15\u5165\u524D\u7F00\u548C</strong></p><p>\u524D\u7F00\u548C\uFF1Anums \u7684\u7B2C 0 \u9879\u5230\u5F53\u524D\u9879\u7684\u548C\u3002 \u5B9A\u4E49 prefixSum \u6570\u7EC4\uFF0CprefixSum[x]\uFF1A\u7B2C 0 \u9879\u5230 \u7B2C x \u9879 \u7684\u548C\u3002</p><p><code>prefixSum[x] = nums[0] + nums[1] +\u2026+nums[x]</code></p><p><code>nums </code>\u7684\u67D0\u9879 = \u4E24\u4E2A\u76F8\u90BB\u524D\u7F00\u548C\u7684\u5DEE\uFF1A</p><p><code>nums[x] = prefixSum[x] - prefixSum[x - 1]</code></p><p><code>nums</code> \u7684 \u7B2C <code>i</code>\u5230 <code>j</code> \u9879 \u7684\u548C\uFF0C\u6709\uFF1A</p><p><code>nums[i] +\u2026+nums[j]=prefixSum[j] - prefixSum[i - 1]</code></p><p>\u5F53 <code>i</code> \u4E3A <code>0</code>\uFF0C\u6B64\u65F6 <code>i-1</code> \u4E3A <code>-1</code>\uFF0C\u6211\u4EEC\u6545\u610F\u8BA9 <code>prefixSum[-1]</code> \u4E3A <code>0</code>\uFF0C\u4F7F\u5F97\u901A\u5F0F\u5728<code>i=0</code>\u65F6\u4E5F\u6210\u7ACB\uFF1A</p><p><code>nums[0] +\u2026+nums[j]=prefixSum[j]</code></p><p><strong>\u4E0D\u7528\u6C42\u51FA prefixSum \u6570\u7EC4</strong></p><p>\u5176\u5B9E\u6211\u4EEC\u4E0D\u5173\u5FC3\u5177\u4F53\u662F\u54EA\u4E24\u9879\u7684\u524D\u7F00\u548C\u4E4B\u5DEE\u7B49\u4E8Ek\uFF0C\u53EA\u5173\u5FC3\u7B49\u4E8E k \u7684\u524D\u7F00\u548C\u4E4B\u5DEE\u51FA\u73B0\u7684\u6B21\u6570c\uFF0C\u5C31\u77E5\u9053\u4E86\u6709c\u4E2A\u5B50\u6570\u7EC4\u6C42\u548C\u7B49\u4E8Ek\u3002</p><p>\u904D\u5386 nums \u4E4B\u524D\uFF0C\u6211\u4EEC\u8BA9 -1 \u5BF9\u5E94\u7684\u524D\u7F00\u548C\u4E3A 0\uFF0C\u8FD9\u6837\u901A\u5F0F\u5728\u8FB9\u754C\u60C5\u51B5\u4E5F\u6210\u7ACB\u3002\u5373\u5728\u904D\u5386\u4E4B\u524D\uFF0Cmap \u521D\u59CB\u653E\u5165 0:1 \u952E\u503C\u5BF9\uFF08\u524D\u7F00\u548C\u4E3A0\u51FA\u73B01\u6B21\u4E86\uFF09\u3002</p><p>\u904D\u5386 nums \u6570\u7EC4\uFF0C\u6C42\u6BCF\u4E00\u9879\u7684\u524D\u7F00\u548C\uFF0C\u7EDF\u8BA1\u5BF9\u5E94\u7684\u51FA\u73B0\u6B21\u6570\uFF0C\u4EE5\u952E\u503C\u5BF9\u5B58\u5165 map\u3002</p><p>\u8FB9\u5B58\u8FB9\u67E5\u770B map\uFF0C\u5982\u679C map \u4E2D\u5B58\u5728 key \u4E3A\u300C\u5F53\u524D\u524D\u7F00\u548C - k\u300D\uFF0C\u8BF4\u660E\u8FD9\u4E2A\u4E4B\u524D\u51FA\u73B0\u7684\u524D\u7F00\u548C\uFF0C\u6EE1\u8DB3\u300C\u5F53\u524D\u524D\u7F00\u548C - \u8BE5\u524D\u7F00\u548C == k\u300D\uFF0C\u5B83\u51FA\u73B0\u7684\u6B21\u6570\uFF0C\u7D2F\u52A0\u7ED9 count\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//UT_HASH</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HashTable</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span> <span class="token comment">// \u7528\u6765\u8BB0\u5F55key\u503C</span>
    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span> <span class="token comment">// \u7528\u4E8E\u8BA1\u6570\uFF0C\u51FA\u73B0\u4E86\u591A\u5C11\u6B21</span>
    UT_hash_handle hh<span class="token punctuation">;</span> <span class="token comment">// \u5FC5\u4E0D\u53EF\u5C11</span>
<span class="token punctuation">}</span> HashTable<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    HashTable <span class="token operator">*</span>hashHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    HashTable <span class="token operator">*</span>curHash <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hash \u5934\u6307\u9488</span>
    curHash<span class="token operator">-&gt;</span>key <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// \u7EC6\u82821\uFF1A\u5B580</span>
    curHash<span class="token operator">-&gt;</span>cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>hashHead<span class="token punctuation">,</span> key<span class="token punctuation">,</span> curHash<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token comment">/*
            1\u3001\u7D2F\u8BA1\u5230\u5750\u6807i\u7684\u503C\uFF0C\u76EE\u524D\u4E3Ax\u3002\u5047\u8BBE\u5728\u533A\u95F4[0, ..., i - 1]\u4E4B\u95F4\u6709\u4E2A\u5750\u6807j\u5BF9\u5E94\u7684\u7D2F\u8BA1\u503C\u4E3Ay
            2\u3001sum(0~j) = y; sum(0~i) = x; \u5982\u679C x - y == k\uFF0Cans++
            3\u3001\u5373\uFF1A\u5B58\u5728sum(j+1 ~ i) \u5B50\u6570\u7EC4\u548C\u4E3Ak
        */</span> 
        y <span class="token operator">=</span> x <span class="token operator">-</span> k<span class="token punctuation">;</span>
        HashTable <span class="token operator">*</span>preHash <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>hashHead<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> preHash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u67E5\u4E4B\u524D\u6709\u6CA1\u6709\u51FA\u73B0\u8FC7y</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>preHash <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">+=</span> preHash<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/* \u65B0\u51FA\u73B0\u7684x\uFF0C\u4E5F\u8981\u52A0\u5165hash\u8868 */</span>
        curHash <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>hashHead<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> curHash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u67E5\u4E4B\u524D\u6709\u6CA1\u6709\u51FA\u73B0\u8FC7y</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>curHash <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            curHash <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            curHash<span class="token operator">-&gt;</span>key <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// \u7B2C\u4E00\u6B21\u51FA\u73B0</span>
            curHash<span class="token operator">-&gt;</span>cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>hashHead<span class="token punctuation">,</span> key<span class="token punctuation">,</span> curHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            curHash<span class="token operator">-&gt;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u4E4B\u524D\u51FA\u73B0\u8FC7</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-011-0-\u548C-1-\u4E2A\u6570\u76F8\u540C\u7684\u5B50\u6570\u7EC4-525" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-011-0-\u548C-1-\u4E2A\u6570\u76F8\u540C\u7684\u5B50\u6570\u7EC4-525" aria-hidden="true">#</a> \u5251\u6307 Offer II 011. 0 \u548C 1 \u4E2A\u6570\u76F8\u540C\u7684\u5B50\u6570\u7EC4\uFF08525\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u524D\u7F00\u548C+hash</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HashTable</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">,</span> val<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span>HashTable<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">findMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> max_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    HashTable<span class="token operator">*</span> hash <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    HashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmp<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            counter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            counter<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> <span class="token operator">&amp;</span>counter<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> preIndex <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            max_len <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>max_len<span class="token punctuation">,</span>i<span class="token operator">-</span>preIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>key <span class="token operator">=</span> counter<span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max_len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-012-\u5DE6\u53F3\u4E24\u8FB9\u5B50\u6570\u7EC4\u7684\u548C\u76F8\u7B49-724" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-012-\u5DE6\u53F3\u4E24\u8FB9\u5B50\u6570\u7EC4\u7684\u548C\u76F8\u7B49-724" aria-hidden="true">#</a> \u5251\u6307 Offer II 012. \u5DE6\u53F3\u4E24\u8FB9\u5B50\u6570\u7EC4\u7684\u548C\u76F8\u7B49\uFF08724\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u524D\u7F00\u548C</span>
<span class="token keyword">int</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u6C42total</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        total<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u524D\u7F00\u4E3A sum</span>
    <span class="token comment">//\u540E\u7F00\u4E3A total-sum-nums[i]</span>
    <span class="token comment">//\u524D\u7F00\u7B49\u4E8E\u540E\u7F00 sum = total-sum-nums[i]   ----&gt; sum*2+nums[i]==total</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>total<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-013-\u4E8C\u7EF4\u5B50\u77E9\u9635\u7684\u548C-304" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-013-\u4E8C\u7EF4\u5B50\u77E9\u9635\u7684\u548C-304" aria-hidden="true">#</a> \u5251\u6307 Offer II 013. \u4E8C\u7EF4\u5B50\u77E9\u9635\u7684\u548C\uFF08304\uFF09</h2><h3 id="_303-\u533A\u57DF\u548C\u68C0\u7D22-\u6570\u7EC4\u4E0D\u53EF\u53D8-\u4E00\u7EF4" tabindex="-1"><a class="header-anchor" href="#_303-\u533A\u57DF\u548C\u68C0\u7D22-\u6570\u7EC4\u4E0D\u53EF\u53D8-\u4E00\u7EF4" aria-hidden="true">#</a> 303. \u533A\u57DF\u548C\u68C0\u7D22 - \u6570\u7EC4\u4E0D\u53EF\u53D8\uFF08\u4E00\u7EF4\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u524D\u7F00\u548C</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> sums<span class="token punctuation">;</span>
<span class="token punctuation">}</span> NumArray<span class="token punctuation">;</span>

NumArray<span class="token operator">*</span> <span class="token function">numArrayCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NumArray<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NumArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>sums <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>numsSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>sums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret<span class="token operator">-&gt;</span>sums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token operator">-&gt;</span>sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">numArraySumRange</span><span class="token punctuation">(</span>NumArray<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>sums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> obj<span class="token operator">-&gt;</span>sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">numArrayFree</span><span class="token punctuation">(</span>NumArray<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>sums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u7EF4\u77E9\u9635" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u7EF4\u77E9\u9635" aria-hidden="true">#</a> \u4E8C\u7EF4\u77E9\u9635</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6BCF\u884C\u524D\u7F00\u548C\u76F8\u52A0</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> pre_sum<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sumSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span> NumMatrix<span class="token punctuation">;</span>


NumMatrix<span class="token operator">*</span> <span class="token function">numMatrixCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NumMatrix<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NumMatrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>pre_sum <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>matrixSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>sumSize <span class="token operator">=</span> matrixSize<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>matrixSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ret<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>matrixColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>matrixColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ret<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">numMatrixSumRegion</span><span class="token punctuation">(</span>NumMatrix<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>row1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>row2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sum<span class="token operator">+=</span>obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">numMatrixFree</span><span class="token punctuation">(</span>NumMatrix<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token operator">-&gt;</span>sumSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u7EF4\u524D\u7F00\u548C</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> pre_sums<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sumsSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span> NumMatrix<span class="token punctuation">;</span>


NumMatrix<span class="token operator">*</span> <span class="token function">numMatrixCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NumMatrix<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NumMatrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>pre_sums <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>matrixSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>sumsSize <span class="token operator">=</span> matrixSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>matrixSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ret<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrixSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrixColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            ret<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> ret<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> ret<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">numMatrixSumRegion</span><span class="token punctuation">(</span>NumMatrix<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>obj<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>obj<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token operator">+</span>obj<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">numMatrixFree</span><span class="token punctuation">(</span>NumMatrix<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token operator">-&gt;</span>sumsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>pre_sums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-014-\u5B57\u7B26\u4E32\u4E2D\u7684\u53D8\u4F4D\u8BCD-567" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-014-\u5B57\u7B26\u4E32\u4E2D\u7684\u53D8\u4F4D\u8BCD-567" aria-hidden="true">#</a> \u5251\u6307 Offer II 014. \u5B57\u7B26\u4E32\u4E2D\u7684\u53D8\u4F4D\u8BCD\uFF08567\uFF09</h2><p>\u8FD8\u6709\u4E00\u79CD\u662F\u6BD4\u8F83\u524D\u7F00\u548C\uFF0C\u6211\u8BA4\u4E3A\u5176\u5B9E\u8D28\u4F9D\u7136\u662Fhash</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6ED1\u52A8\u7A97\u53E3\u6BD4\u8F83hash</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">26</span></span></span>
<span class="token keyword">int</span> <span class="token function">dict_Cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MaxSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">checkInclusion</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dict1<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dict2<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dict1<span class="token punctuation">[</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>len2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dict2<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>len1<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dict_Cmp</span><span class="token punctuation">(</span>dict1<span class="token punctuation">,</span>dict2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            dict2<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-015-\u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u53D8\u4F4D\u8BCD-438" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-015-\u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u53D8\u4F4D\u8BCD-438" aria-hidden="true">#</a> \u5251\u6307 Offer II 015. \u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u53D8\u4F4D\u8BCD\uFF08438\uFF09</h2><h2 id="\u5251\u6307-offer-ii-016-\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u5B57\u7B26\u4E32-3" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-016-\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u5B57\u7B26\u4E32-3" aria-hidden="true">#</a> \u5251\u6307 Offer II 016. \u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u5B57\u7B26\u4E32\uFF083\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u54C8\u5E0C\u8868\u5B58index</span>
<span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dict<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u5904\u7406\u91CD\u590D</span>
        <span class="token comment">//dict[s[right]]!=0\u8868\u793A\u51FA\u73B0\u7B2C\u4E8C\u6B21</span>
        <span class="token comment">//left&lt;dict[s[right]]\u662F\u4E3A\u4E86\u4FDD\u8BC1\u662F\u53F3\u4FA7\u91CD\u590D\u51FA\u73B0</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>left<span class="token operator">&lt;</span>dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        max <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-017-\u542B\u6709\u6240\u6709\u5B57\u7B26\u7684\u6700\u77ED\u5B57\u7B26\u4E32-76" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-017-\u542B\u6709\u6240\u6709\u5B57\u7B26\u7684\u6700\u77ED\u5B57\u7B26\u4E32-76" aria-hidden="true">#</a> \u5251\u6307 Offer II 017. \u542B\u6709\u6240\u6709\u5B57\u7B26\u7684\u6700\u77ED\u5B57\u7B26\u4E32\uFF0876\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//hash</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">minWindow</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len_S <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len_T <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> Hash<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t_needcnt <span class="token operator">=</span> len_T<span class="token punctuation">;</span><span class="token comment">//\u7528\u6765\u8BB0\u5F55t\u4E32\u662F\u5426\u88AB\u88AB\u5305\u542B</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len_T<span class="token operator">&gt;</span>len_S<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len_T<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Hash<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//s\u4E2D\u51FA\u73B0\u4E00\u4E2At\u4E2D\u7684\u5143\u7D20</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//\u5148&gt;0\u518D\u51CF</span>
        <span class="token punctuation">{</span>
            t_needcnt<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//need\u6570\u4E3A0\uFF0C\u8BF4\u660Et\u88AB\u5305\u542B\u4E86</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>t_needcnt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                min <span class="token operator">=</span> left<span class="token punctuation">;</span>
                max <span class="token operator">=</span> right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>Hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//\u5148++\uFF0C\u5982\u679C&gt;0\u8BF4\u660E\u662Ft\u4E32\u91CC\u9762\u7684</span>
            <span class="token punctuation">{</span>
                t_needcnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//\u6CD51</span>
    <span class="token comment">/*
    char * res = malloc(sizeof(char)*(max-min+2));//\u4FDD\u5B58\u5B57\u7B26\u4E32\u5E76\u8F93\u51FA
    int i = 0;
    while(min &lt;= max)
    {
        res[i++] = s[min++];
    }
    res[i] = &#39;\\0&#39;;
    */</span>
    <span class="token comment">//\u6CD52</span>
    s<span class="token punctuation">[</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    s<span class="token operator">+=</span>min<span class="token punctuation">;</span>
    <span class="token comment">//\u6CD53</span>
 	<span class="token comment">/*strncpy*/</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-018-\u6709\u6548\u7684\u56DE\u6587-125" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-018-\u6709\u6548\u7684\u56DE\u6587-125" aria-hidden="true">#</a> \u5251\u6307 Offer II 018. \u6709\u6548\u7684\u56DE\u6587\uFF08125\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
bool <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token char">&#39;9&#39;</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token char">&#39;Z&#39;</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>right<span class="token operator">--</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token char">&#39;9&#39;</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token char">&#39;Z&#39;</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>left<span class="token operator">++</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;</span>right<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">tolower</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-019-\u6700\u591A\u5220\u9664\u4E00\u4E2A\u5B57\u7B26\u5F97\u5230\u56DE\u6587-680" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-019-\u6700\u591A\u5220\u9664\u4E00\u4E2A\u5B57\u7B26\u5F97\u5230\u56DE\u6587-680" aria-hidden="true">#</a> \u5251\u6307 Offer II 019. \u6700\u591A\u5220\u9664\u4E00\u4E2A\u5B57\u7B26\u5F97\u5230\u56DE\u6587\uFF08680\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
bool <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">validPalindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">judge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52</span>
bool <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span> isDel<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span>right<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>isDel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>isDel<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">judge</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
bool <span class="token function">validPalindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-020-\u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u7684\u4E2A\u6570-647" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-020-\u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u7684\u4E2A\u6570-647" aria-hidden="true">#</a> \u5251\u6307 Offer II 020. \u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u7684\u4E2A\u6570\uFF08647\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6BCF\u4E2A\u70B9\u90FD\u5047\u8BBE\u4E3A\u56DE\u6587\u4E32\u4E2D\u5FC3</span>
<span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token operator">&amp;&amp;</span>left<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">--</span><span class="token punctuation">;</span>
            right<span class="token operator">++</span><span class="token punctuation">;</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u5C06\u5B57\u7B26\u4E32\u62FC\u63A5\u4E3A$#a#b#c#d#e#!\u7684\u5F62\u5F0F</span>
    <span class="token keyword">char</span><span class="token operator">*</span> t <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;$&#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        t<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    t<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;!&#39;</span><span class="token punctuation">;</span>
    t<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> iMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u521D\u59CB\u5316 f[i]</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>rMax<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">fmin</span><span class="token punctuation">(</span>rMax<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>iMax<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// \u4E2D\u5FC3\u62D3\u5C55</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>t<span class="token punctuation">[</span>i<span class="token operator">-</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// \u52A8\u6001\u7EF4\u62A4 iMax \u548C rMax</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;</span> rMax<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            iMax <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//\u79FB\u52A8\u5BF9\u79F0\u4E2D\u5FC3</span>
            rMax <span class="token operator">=</span> i <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u79FB\u52A8\u6700\u53F3\u8FB9\u7684\u70B9</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u7EDF\u8BA1\u7B54\u6848, \u5F53\u524D\u8D21\u732E\u4E3A (f[i] - 1) / 2 \u4E0A\u53D6\u6574</span>
        ans <span class="token operator">+=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-021-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9-19" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-021-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9-19" aria-hidden="true">#</a> \u5251\u6307 Offer II 021. \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C n \u4E2A\u7ED3\u70B9\uFF0819\uFF09</h2><h2 id="\u5251\u6307-offer-ii-022-\u94FE\u8868\u4E2D\u73AF\u7684\u5165\u53E3\u8282\u70B9-142\u3001\u6570\u7EC4\u7248287" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-022-\u94FE\u8868\u4E2D\u73AF\u7684\u5165\u53E3\u8282\u70B9-142\u3001\u6570\u7EC4\u7248287" aria-hidden="true">#</a> \u5251\u6307 Offer II 022. \u94FE\u8868\u4E2D\u73AF\u7684\u5165\u53E3\u8282\u70B9\uFF08142\u3001\u6570\u7EC4\u7248287\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5FEB\u6162\u6307\u9488\uFF0Cfloyd\u5224\u73AF</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.\u521B\u5EFA\u5FEB\u6162\u6307\u9488</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
   
    <span class="token comment">// 2.\u5F53\u4E24\u4E2A\u6307\u9488\u76F8\u9047\uFF0C\u505C\u6B62</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> fast<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.\u4F7F\u4E24\u4E2A\u6307\u9488\u4F7F\u7528\u540C\u6837\u7684\u901F\u5EA6\u8D70\uFF0C\u8BBE\u76F8\u9047\u70B9\u79BB\u5165\u53E3\u4E3Adis\uFF0C\u6240\u4EE5\u5165\u53E3\u5C31\u662Fslow\u8D70\u7684\u8DEF\u7A0B\u51CF\u53BBdis</span>
    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// int sum = 0; // \u7EDF\u8BA1\u5165\u53E3\u70B9\uFF0C\u4ECE0\u5F00\u59CB</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// sum++;</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-023-\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u91CD\u5408\u8282\u70B9-160" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-023-\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u91CD\u5408\u8282\u70B9-160" aria-hidden="true">#</a> \u5251\u6307 Offer II 023. \u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u91CD\u5408\u8282\u70B9\uFF08160\uFF09</h2><h2 id="\u5251\u6307-offer-ii-024-\u53CD\u8F6C\u94FE\u8868-206" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-024-\u53CD\u8F6C\u94FE\u8868-206" aria-hidden="true">#</a> \u5251\u6307 Offer II 024. \u53CD\u8F6C\u94FE\u8868\uFF08206\uFF09</h2><h2 id="\u5251\u6307-offer-ii-025-\u94FE\u8868\u4E2D\u7684\u4E24\u6570\u76F8\u52A0-445" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-025-\u94FE\u8868\u4E2D\u7684\u4E24\u6570\u76F8\u52A0-445" aria-hidden="true">#</a> \u5251\u6307 Offer II 025. \u94FE\u8868\u4E2D\u7684\u4E24\u6570\u76F8\u52A0\uFF08445\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6808</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> stk<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Stack<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Stack<span class="token operator">*</span> stack_l1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Stack<span class="token operator">*</span> stack_l2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack_l1<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    stack_l2<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack_l1<span class="token operator">-&gt;</span>stk<span class="token punctuation">[</span><span class="token operator">++</span>stack_l1<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        l1 <span class="token operator">=</span> l1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack_l2<span class="token operator">-&gt;</span>stk<span class="token punctuation">[</span><span class="token operator">++</span>stack_l2<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> l2<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        l2 <span class="token operator">=</span> l2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>stack_l1<span class="token operator">-&gt;</span>top<span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>stack_l2<span class="token operator">-&gt;</span>top<span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>carry<span class="token punctuation">)</span><span class="token comment">//\u6B64\u5904\u52A0carry\u5C31\u662F\u4E3A\u4E86\u5904\u7406\u6700\u540E\u8FD8\u6709\u8FDB\u4F4D\u7684\u60C5\u51B5</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> stack_l1<span class="token operator">-&gt;</span>top<span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">?</span> stack_l1<span class="token operator">-&gt;</span>stk<span class="token punctuation">[</span>stack_l1<span class="token operator">-&gt;</span>top<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> stack_l2<span class="token operator">-&gt;</span>top<span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">?</span> stack_l2<span class="token operator">-&gt;</span>stk<span class="token punctuation">[</span>stack_l2<span class="token operator">-&gt;</span>top<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        sum <span class="token operator">=</span> n<span class="token operator">+</span>m<span class="token operator">+</span>carry<span class="token punctuation">;</span>
        carry <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//\u4F9D\u9760int\u7684\u7279\u70B9\u8BA1\u7B97\u8FDB\u4F4D0\u30011</span>
        head <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5934\u63D2</span>
        head<span class="token operator">-&gt;</span>val <span class="token operator">=</span> sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>  head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        q <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">// q\u83B7\u53D6\u4E0B\u4E2A\u7ED3\u70B9</span>
        head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment">// \u5C06\u6B21\u7ED3\u70B9\u540E\u63A5\u4E0Ap\u8FDE\u4E0A</span>
        p <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment">// p\u4F5C\u4E3A\u5934\u7ED3\u70B9</span>
        head <span class="token operator">=</span> q<span class="token punctuation">;</span>  <span class="token comment">// head\u7EE7\u7EED\u524D\u8FDB</span>
        <span class="token operator">*</span>len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// \u8BA1\u7B97\u94FE\u8868\u957F\u5EA6(\u65B9\u4FBF\u540E\u9762\u9009\u6700\u957F\u4E3Al1)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1 <span class="token operator">||</span> <span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1 <span class="token operator">?</span> l1 <span class="token operator">:</span> <span class="token punctuation">(</span>l2 <span class="token operator">?</span> l2 <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u8FD4\u56DE\u975E\u7A7A\u7684\u94FE\u8868\u5373\u53EF</span>
    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    l1 <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    l2 <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>l2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len1 <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u4EA4\u6362\u5F97\u5230\u6700\u957F\u94FE\u8868l1</span>
        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> l2<span class="token punctuation">;</span>
        l2 <span class="token operator">=</span> l1<span class="token punctuation">;</span>
        l1 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        carry <span class="token operator">+=</span> <span class="token punctuation">(</span>l1 <span class="token operator">?</span> l1<span class="token operator">-&gt;</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>l2 <span class="token operator">?</span> l2<span class="token operator">-&gt;</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        l1<span class="token operator">-&gt;</span>val <span class="token operator">=</span> carry <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        carry <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        curr <span class="token operator">=</span> l1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">// curr\u5148\u4FDD\u5B58l1\u4E0B\u8282\u70B9</span>
        l1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>  <span class="token comment">// \u8FDB\u884C\u53CD\u8F6C\u64CD\u4F5C</span>
        <span class="token comment">//\u89E3\u91CA\u4E3A\u4EC0\u4E48\u8981\u8FDB\u884C\u7FFB\u8F6C\uFF0C\u56E0\u4E3A\u5C06\u539F\u6765\u7684\u94FE\u8868\u7FFB\u8F6C\u540E\u8FDB\u884C\u5904\u7406\uFF0C\u6700\u540E\u8FD8\u662F\u8981\u7FFB\u8F6C\u56DE\u53BB</span>
        prev <span class="token operator">=</span> l1<span class="token punctuation">;</span>  <span class="token comment">// prev\u66F4\u65B0</span>
        l1 <span class="token operator">=</span> curr<span class="token punctuation">;</span>
        l2 <span class="token operator">=</span> l2 <span class="token operator">?</span> l2<span class="token operator">-&gt;</span>next <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 4.\u8FDB\u4F4D\u5904\u7406</span>
        curr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        curr<span class="token operator">-&gt;</span>val <span class="token operator">=</span> carry<span class="token punctuation">;</span>
        curr<span class="token operator">-&gt;</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-027-\u56DE\u6587\u94FE\u8868-234" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-027-\u56DE\u6587\u94FE\u8868-234" aria-hidden="true">#</a> \u5251\u6307 Offer II 027. \u56DE\u6587\u94FE\u8868\uFF08234\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5FEB\u6162\u6307\u9488\u627E\u4E2D\u95F4\u8282\u70B9\uFF0C\u7136\u540E\u7FFB\u8F6C\u4E00\u534A\u6BD4\u8F83</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> tmp <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>head<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token comment">//\u60F3\u53D6\u524D\u4E00\u4E2A\u8282\u70B9\u5C31\u662Ffast-&gt;next!=NULL&amp;&amp;fast-&gt;next-&gt;next!=NULL</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>fast<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    slow <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>val<span class="token operator">!=</span>slow<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
        head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-026-\u91CD\u6392\u94FE\u8868-143" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-026-\u91CD\u6392\u94FE\u8868-143" aria-hidden="true">#</a> \u5251\u6307 Offer II 026. \u91CD\u6392\u94FE\u8868\uFF08143\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u94FE\u8868\u7EFC\u5408</span>
<span class="token comment">//1.\u94FE\u8868\u539F\u5730\u53CD\u8F6C </span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> tmp <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2.\u5BFB\u627E\u94FE\u8868\u4E2D\u70B9\uFF0C\u5E76\u5206\u5272\uFF08\u9700\u8981\u8BA9mid-&gt;next = NULL\uFF09</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">findMidNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>head<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//\u505C\u5728\u524D\u4E00\u9879</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">-&gt;</span>next<span class="token operator">&amp;&amp;</span>fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 3.\u94FE\u8868\u5408\u5E76</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> h1<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> h2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>h2<span class="token operator">&amp;&amp;</span>h1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> h1<span class="token punctuation">;</span>
        h1 <span class="token operator">=</span> h1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> h2<span class="token punctuation">;</span>
        h2 <span class="token operator">=</span> h2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> h1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> h2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">reorderList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> mid <span class="token operator">=</span> <span class="token function">findMidNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> tmp <span class="token operator">=</span> mid<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token comment">//\u65AD\u5F00</span>
    mid<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    mid <span class="token operator">=</span>  <span class="token function">reverse</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_430-\u6241\u5E73\u5316\u591A\u7EA7\u53CC\u5411\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_430-\u6241\u5E73\u5316\u591A\u7EA7\u53CC\u5411\u94FE\u8868" aria-hidden="true">#</a> 430. \u6241\u5E73\u5316\u591A\u7EA7\u53CC\u5411\u94FE\u8868</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">//\u9012\u5F52</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Node<span class="token operator">*</span> <span class="token function">DFS</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> cur<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token comment">//ans\u76F4\u63A5\u904D\u5386\u5230\u6700\u6DF1\u5904</span>
        Node<span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>child<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> rear <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>child<span class="token punctuation">;</span>
            Node<span class="token operator">*</span> last <span class="token operator">=</span> <span class="token function">DFS</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Node<span class="token operator">*</span> tmp <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            cur<span class="token operator">-&gt;</span>child <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> rear<span class="token punctuation">;</span>
            rear<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>
            last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> last<span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> last<span class="token punctuation">;</span>
            ans <span class="token operator">=</span> <span class="token function">DFS</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span>
            ans <span class="token operator">=</span> <span class="token function">DFS</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Node<span class="token operator">*</span> <span class="token function">flatten</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-029-\u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-029-\u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868" aria-hidden="true">#</a> \u5251\u6307 Offer II 029. \u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">//\u4E00\u6B21\u904D\u5386</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Node<span class="token operator">*</span> <span class="token function">insert</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> insertVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>insertVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token operator">==</span>head<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Node<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
        Node<span class="token operator">*</span> cur_next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur_next<span class="token operator">!=</span>head<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>insertVal<span class="token operator">&gt;=</span>cur<span class="token operator">-&gt;</span>val<span class="token operator">&amp;&amp;</span>insertVal<span class="token operator">&lt;=</span>cur_next<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val<span class="token operator">&gt;</span>cur_next<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>insertVal<span class="token operator">&gt;</span>cur<span class="token operator">-&gt;</span>val<span class="token operator">||</span>insertVal<span class="token operator">&lt;</span>cur_next<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            cur_next <span class="token operator">=</span> cur_next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur_next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-030-\u63D2\u5165\u3001\u5220\u9664\u548C\u968F\u673A\u8BBF\u95EE\u90FD\u662F-o-1-\u7684\u5BB9\u5668-380" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-030-\u63D2\u5165\u3001\u5220\u9664\u548C\u968F\u673A\u8BBF\u95EE\u90FD\u662F-o-1-\u7684\u5BB9\u5668-380" aria-hidden="true">#</a> \u5251\u6307 Offer II 030. \u63D2\u5165\u3001\u5220\u9664\u548C\u968F\u673A\u8BBF\u95EE\u90FD\u662F O(1) \u7684\u5BB9\u5668\uFF08380\uFF09</h2><p><strong>\u91CD\u70B9\uFF1A</strong></p><p>\u6B64\u9898\u4E2D\u5305\u542B\u5BF9UT_hash_handle\u7684\u5C01\u88C5</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//hashtable</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">10001</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span>HashTable<span class="token punctuation">;</span>

bool <span class="token function">findHash</span><span class="token punctuation">(</span><span class="token keyword">const</span> HashTable<span class="token operator">*</span><span class="token operator">*</span> obj<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token keyword">const</span> HashTable<span class="token operator">*</span><span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">insertHash</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span><span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
bool <span class="token function">removeHash</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span><span class="token operator">*</span> obj<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">HASH_DEL</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">freeHash</span><span class="token punctuation">(</span>HashTable<span class="token operator">*</span><span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> cur<span class="token punctuation">,</span><span class="token operator">*</span>tmp<span class="token punctuation">;</span>
    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span><span class="token operator">*</span>obj<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">HASH_DEL</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numsSize<span class="token punctuation">;</span>
    HashTable<span class="token operator">*</span> indices<span class="token punctuation">;</span>
<span class="token punctuation">}</span> RandomizedSet<span class="token punctuation">;</span>


RandomizedSet<span class="token operator">*</span> <span class="token function">randomizedSetCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u7ED9\u4E0B\u9762\u7684rand\u51FD\u6570\u8BBE\u7F6E\u79CD\u5B50</span>
    RandomizedSet<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>RandomizedSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>nums <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>numsSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>indices <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">randomizedSetInsert</span><span class="token punctuation">(</span>RandomizedSet<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">findHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>indices<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>numsSize<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>numsSize<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token function">insertHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>indices<span class="token punctuation">,</span>val<span class="token punctuation">,</span>obj<span class="token operator">-&gt;</span>numsSize<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">randomizedSetRemove</span><span class="token punctuation">(</span>RandomizedSet<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">findHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>indices<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8FD9\u91CC\u7684\u5220\u9664\u5728nums\u4E2D\uFF0C\u5C06\u6700\u540E\u4E00\u4E2A\u6570\u66FF\u6362\u5230\u5220\u9664\u7684\u4F4D\u7F6E</span>
    <span class="token comment">//\u5728HashTable\u4E2D\uFF0C\u5C06\u6700\u540E\u4E00\u4E2A\u6570\u7684hash\u4F4D\u7F6E\u6539\u4E3A\u5F53\u524D\u5220\u9664\u7684index</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>indices<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> last <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> last<span class="token punctuation">;</span>
    <span class="token function">insertHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>indices<span class="token punctuation">,</span>last<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>numsSize<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token function">removeHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>indices<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">randomizedSetGetRandom</span><span class="token punctuation">(</span>RandomizedSet<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> randomIndex <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>obj<span class="token operator">-&gt;</span>numsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">randomizedSetFree</span><span class="token punctuation">(</span>RandomizedSet<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">freeHash</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>indices<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-031-\u6700\u8FD1\u6700\u5C11\u4F7F\u7528\u7F13\u5B58-146" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-031-\u6700\u8FD1\u6700\u5C11\u4F7F\u7528\u7F13\u5B58-146" aria-hidden="true">#</a> \u5251\u6307 Offer II 031. \u6700\u8FD1\u6700\u5C11\u4F7F\u7528\u7F13\u5B58\uFF08146\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//LRU \u53CC\u94FE\u8868+hash</span>
<span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token operator">*</span> prev<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token operator">*</span> node<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span> HashTable<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> map<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token operator">*</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token operator">*</span> rear<span class="token punctuation">;</span>
    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span> LRUCache<span class="token punctuation">;</span>


LRUCache<span class="token operator">*</span> <span class="token function">lRUCacheCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LRUCache<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LRUCache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>map <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">doubleList</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">doubleList</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>rear<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">lRUCacheGet</span><span class="token punctuation">(</span>LRUCache<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>map<span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token operator">*</span> p <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">;</span>
    <span class="token comment">//\u65AD\u5F00\u539F\u8282\u70B9</span>
    p<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>
    <span class="token comment">//\u8FDE\u5230\u5934\u90E8</span>
    p<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> p<span class="token punctuation">;</span>

    <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">lRUCachePut</span><span class="token punctuation">(</span>LRUCache<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>map<span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">doubleList</span> <span class="token operator">*</span>p <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token comment">// \u6458\u9664</span>
        p<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>
        <span class="token comment">// \u63D2\u5165\u5230head\u540E\u9762</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
        obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> p<span class="token punctuation">;</span>
        obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HASH_COUNT</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>map<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> obj<span class="token operator">-&gt;</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u4ECE\u94FE\u8868\u4E2D\u5220\u9664rear\u6307\u5411\u7684\u8282\u70B9</span>
        <span class="token keyword">struct</span> <span class="token class-name">doubleList</span> <span class="token operator">*</span>p <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span>
        <span class="token comment">// \u4ECE\u54C8\u5E0C\u8868\u4E2D\u5220\u9664rear\u6307\u5411\u7684\u8282\u70B9</span>
        HashTable <span class="token operator">*</span>delNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>map<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>key<span class="token punctuation">,</span> delNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delNode <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">HASH_DEL</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>map<span class="token punctuation">,</span> delNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>delNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token operator">*</span> new <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">doubleList</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">doubleList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    new<span class="token operator">-&gt;</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
    new<span class="token operator">-&gt;</span>next <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    new<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> new<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>
    <span class="token comment">// \u5C06\u65B0\u8282\u70B9\u52A0\u5165\u5230\u54C8\u5E0C\u8868</span>
    HashTable <span class="token operator">*</span>addNode <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    addNode<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    addNode<span class="token operator">-&gt;</span>node <span class="token operator">=</span> new<span class="token punctuation">;</span>
    <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>map<span class="token punctuation">,</span> key<span class="token punctuation">,</span> addNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">lRUCacheFree</span><span class="token punctuation">(</span>LRUCache<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u91CA\u653E\u54C8\u5E0C\u8868\u8D44\u6E90</span>
    HashTable <span class="token operator">*</span>currentNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    HashTable <span class="token operator">*</span>tmpNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> obj<span class="token operator">-&gt;</span>map<span class="token punctuation">,</span> currentNode<span class="token punctuation">,</span> tmpNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">HASH_DEL</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>map<span class="token punctuation">,</span> currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u91CA\u653E\u94FE\u8868</span>
    <span class="token keyword">struct</span> <span class="token class-name">doubleList</span> <span class="token operator">*</span>p <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">doubleList</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> p<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-032-\u6709\u6548\u7684\u53D8\u4F4D\u8BCD-242" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-032-\u6709\u6548\u7684\u53D8\u4F4D\u8BCD-242" aria-hidden="true">#</a> \u5251\u6307 Offer II 032. \u6709\u6548\u7684\u53D8\u4F4D\u8BCD\uFF08242\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6700\u76F4\u63A5\u7684\u601D\u8DEF</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">dict</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dict <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dict<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dict<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dict_S <span class="token operator">=</span> <span class="token function">dict</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dict_T <span class="token operator">=</span> <span class="token function">dict</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dict_S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>dict_T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4F18\u5316</span>
bool <span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        hash<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> false <span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-ii-033-\u53D8\u4F4D\u8BCD\u7EC4-49" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-ii-033-\u53D8\u4F4D\u8BCD\u7EC4-49" aria-hidden="true">#</a> \u5251\u6307 Offer II 033. \u53D8\u4F4D\u8BCD\u7EC4\uFF0849\uFF09</h2><p>\u952E\uFF1A\u6392\u5E8F\u540E\u5B57\u7B26\u4E32 \u503C\uFF1A\u5B57\u7B26\u4E32\u6570\u7EC4</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//hash</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">1005</span></span></span>

<span class="token comment">/*
int cmpfunc (const void * a, const void * b)
{
   return ( *(char*)a - *(char*)b );
}
*/</span>
<span class="token comment">//\u539F\u7406\u5982\u4E0B</span>

<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> dataa <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>
    <span class="token keyword">char</span> datab <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> dataa<span class="token operator">-</span>datab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> val<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span>HashTable<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> strs<span class="token punctuation">,</span> <span class="token keyword">int</span> strsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span> returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>strsSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>strsSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    HashTable<span class="token operator">*</span> hash <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token operator">*</span> order <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">qsort</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span>len<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        HashTable<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">HASH_FIND_STR</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span>order<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>key <span class="token operator">=</span> order<span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>strsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span>tmp<span class="token operator">-&gt;</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">;</span>
            <span class="token function">HASH_ADD_STR</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span>tmp<span class="token operator">-&gt;</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    HashTable <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    HashTable <span class="token operator">*</span> s <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> s<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span>group <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>len<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            group<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
        ans<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> group<span class="token punctuation">;</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">HASH_DEL</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> cnt<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90);function W(J,Q){const a=e("RouterLink");return c(),l("div",null,[r,k,n("nav",d,[n("ul",null,[n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-001-\u6574\u6570\u9664\u6CD5-29"},{default:t(()=>[v]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-002-\u4E8C\u8FDB\u5236\u52A0\u6CD5-67"},{default:t(()=>[m]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-003-\u524D-n-\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D-1-\u7684\u4E2A\u6570-338"},{default:t(()=>[b]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-004-\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57-137\u3001\u525156"},{default:t(()=>[f]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-005-\u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF-318"},{default:t(()=>[y]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-006-\u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C-167"},{default:t(()=>[w]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-007-\u6570\u7EC4\u4E2D\u548C\u4E3A-0-\u7684\u4E09\u4E2A\u6570-15"},{default:t(()=>[h]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-008-\u548C\u5927\u4E8E\u7B49\u4E8E-target-\u7684\u6700\u77ED\u5B50\u6570\u7EC4-209"},{default:t(()=>[g]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-009-\u4E58\u79EF\u5C0F\u4E8E-k-\u7684\u5B50\u6570\u7EC4-713"},{default:t(()=>[x]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-010-\u548C\u4E3A-k-\u7684\u5B50\u6570\u7EC4-560"},{default:t(()=>[_]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-011-0-\u548C-1-\u4E2A\u6570\u76F8\u540C\u7684\u5B50\u6570\u7EC4-525"},{default:t(()=>[L]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-012-\u5DE6\u53F3\u4E24\u8FB9\u5B50\u6570\u7EC4\u7684\u548C\u76F8\u7B49-724"},{default:t(()=>[N]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-013-\u4E8C\u7EF4\u5B50\u77E9\u9635\u7684\u548C-304"},{default:t(()=>[I]),_:1}),n("ul",null,[n("li",null,[p(a,{to:"#_303-\u533A\u57DF\u548C\u68C0\u7D22-\u6570\u7EC4\u4E0D\u53EF\u53D8-\u4E00\u7EF4"},{default:t(()=>[j]),_:1})]),n("li",null,[p(a,{to:"#\u4E8C\u7EF4\u77E9\u9635"},{default:t(()=>[S]),_:1})])])]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-014-\u5B57\u7B26\u4E32\u4E2D\u7684\u53D8\u4F4D\u8BCD-567"},{default:t(()=>[H]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-015-\u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u53D8\u4F4D\u8BCD-438"},{default:t(()=>[z]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-016-\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u5B57\u7B26\u4E32-3"},{default:t(()=>[T]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-017-\u542B\u6709\u6240\u6709\u5B57\u7B26\u7684\u6700\u77ED\u5B57\u7B26\u4E32-76"},{default:t(()=>[U]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-018-\u6709\u6548\u7684\u56DE\u6587-125"},{default:t(()=>[O]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-019-\u6700\u591A\u5220\u9664\u4E00\u4E2A\u5B57\u7B26\u5F97\u5230\u56DE\u6587-680"},{default:t(()=>[A]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-020-\u56DE\u6587\u5B50\u5B57\u7B26\u4E32\u7684\u4E2A\u6570-647"},{default:t(()=>[D]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-021-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9-19"},{default:t(()=>[M]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-022-\u94FE\u8868\u4E2D\u73AF\u7684\u5165\u53E3\u8282\u70B9-142\u3001\u6570\u7EC4\u7248287"},{default:t(()=>[C]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-023-\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u91CD\u5408\u8282\u70B9-160"},{default:t(()=>[R]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-024-\u53CD\u8F6C\u94FE\u8868-206"},{default:t(()=>[F]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-025-\u94FE\u8868\u4E2D\u7684\u4E24\u6570\u76F8\u52A0-445"},{default:t(()=>[B]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-027-\u56DE\u6587\u94FE\u8868-234"},{default:t(()=>[E]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-026-\u91CD\u6392\u94FE\u8868-143"},{default:t(()=>[V]),_:1})]),n("li",null,[p(a,{to:"#_430-\u6241\u5E73\u5316\u591A\u7EA7\u53CC\u5411\u94FE\u8868"},{default:t(()=>[q]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-029-\u6392\u5E8F\u7684\u5FAA\u73AF\u94FE\u8868"},{default:t(()=>[P]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-030-\u63D2\u5165\u3001\u5220\u9664\u548C\u968F\u673A\u8BBF\u95EE\u90FD\u662F-o-1-\u7684\u5BB9\u5668-380"},{default:t(()=>[X]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-031-\u6700\u8FD1\u6700\u5C11\u4F7F\u7528\u7F13\u5B58-146"},{default:t(()=>[Z]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-032-\u6709\u6548\u7684\u53D8\u4F4D\u8BCD-242"},{default:t(()=>[G]),_:1})]),n("li",null,[p(a,{to:"#\u5251\u6307-offer-ii-033-\u53D8\u4F4D\u8BCD\u7EC4-49"},{default:t(()=>[K]),_:1})])])]),$])}var nn=o(u,[["render",W],["__file","page22.html.vue"]]);export{nn as default};
