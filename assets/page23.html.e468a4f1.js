import{_ as l,r as c,o as i,c as u,b as n,e as a,w as t,d as s,a as e}from"./app.b33ca31f.js";const r={},k=n("h1",{id:"\u4E8C\u5206\u4E13\u9879",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u4E8C\u5206\u4E13\u9879","aria-hidden":"true"},"#"),s(" \u4E8C\u5206\u4E13\u9879")],-1),d=n("hr",null,null,-1),m={class:"table-of-contents"},v=s("C\u8BED\u8A00\u4E8C\u7EF4\u6570\u7EC4\u4F20\u53C2\u7684\u683C\u5F0F"),b=s("\u53D8\u91CF\u8303\u56F4"),y=s("\u731C\u6570\u5B57\u5927\u5C0F\uFF08374\uFF09"),w=s("\u5C71\u8109\u6570\u7EC4\u7684\u5CF0\u9876\u7D22\u5F15\uFF08852\uFF09"),h=s("\u6709\u6548\u7684\u5B8C\u5168\u5E73\u65B9\u6570\uFF08367\uFF09"),f=s("\u4E24\u4E2A\u6570\u7EC4\u95F4\u7684\u8DDD\u79BB\u503C\uFF081385\uFF09"),g=s("\u5BFB\u627E\u6BD4\u76EE\u6807\u5B57\u6BCD\u5927\u7684\u6700\u5C0F\u5B57\u6BCD\uFF08744\uFF09"),S=s("\u6392\u5217\u786C\u5E01\uFF08441\uFF09"),x=s("\u7B2C k \u4E2A\u7F3A\u5931\u7684\u6B63\u6574\u6570\uFF081539\uFF09"),z=s("\u7279\u6B8A\u6570\u7EC4\u7684\u7279\u5F81\u503C\uFF081608\uFF09"),_=s("\u7EDF\u8BA1\u6709\u5E8F\u77E9\u9635\u4E2D\u7684\u8D1F\u6570\uFF081351\uFF09"),j=s("\u77E9\u9635\u4E2D\u6218\u6597\u529B\u6700\u5F31\u7684 K \u884C\uFF081337\uFF09"),M=s("\u68C0\u67E5\u6574\u6570\u53CA\u5176\u4E24\u500D\u6570\u662F\u5426\u5B58\u5728\uFF081346\uFF09"),P=s("\u5E73\u65B9\u6570\u4E4B\u548C\uFF08633\uFF09"),q=s("\u4E24\u4E2A\u6570\u7EC4\u7684\u4EA4\u96C6 II\uFF08350\uFF09"),N=s("\u4E0B\u6807\u5BF9\u4E2D\u7684\u6700\u5927\u8DDD\u79BB\uFF081855\uFF09"),I=s("\u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4\uFF08209\uFF09"),D=s("\u6709\u6548\u4E09\u89D2\u5F62\u7684\u4E2A\u6570\uFF08611\uFF09"),L=s("\u627E\u5230 K \u4E2A\u6700\u63A5\u8FD1\u7684\u5143\u7D20\uFF08658\uFF09"),C=s("\u888B\u5B50\u91CC\u6700\u5C11\u6570\u76EE\u7684\u7403\uFF081760\uFF09"),T=s("\u627E\u5230\u9700\u8981\u8865\u5145\u7C89\u7B14\u7684\u5B66\u751F\u7F16\u53F7\uFF081894\uFF09"),A=s("\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\uFF08300\uFF09"),O=s("\u7231\u5403\u9999\u8549\u7684\u73C2\u73C2\uFF08875\uFF09"),K=s("\u4E24\u7403\u4E4B\u95F4\u7684\u78C1\u529B\uFF081552\uFF09"),H=s("\u5BFB\u627E\u91CD\u590D\u6570\uFF08287\uFF09"),B=s("\u4F7F\u7ED3\u679C\u4E0D\u8D85\u8FC7\u9608\u503C\u7684\u6700\u5C0F\u9664\u6570\uFF081283\uFF09"),R=s("\u5224\u65AD\u5B50\u5E8F\u5217\uFF08392\uFF09"),U=s("\u53EF\u79FB\u9664\u5B57\u7B26\u7684\u6700\u5927\u6570\u76EE\uFF081898\uFF09"),E=s("\u51C6\u65F6\u5230\u8FBE\u7684\u5217\u8F66\u6700\u5C0F\u65F6\u901F\uFF081870\uFF09"),V=s("\u5236\u4F5C m \u675F\u82B1\u6240\u9700\u7684\u6700\u5C11\u5929\u6570\uFF081482\uFF09"),F=s("\u6700\u9AD8\u9891\u5143\u7D20\u7684\u9891\u6570\uFF081838\uFF09"),G=s("\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u5355\u4E00\u5143\u7D20\uFF08540\uFF09"),X=s("\u5C06\u6570\u7EC4\u5206\u6210\u4E09\u4E2A\u5B50\u6570\u7EC4\u7684\u65B9\u6848\u6570\uFF081712\uFF09"),W=s("\u7EDD\u5BF9\u5DEE\u503C\u548C\uFF081818\uFF09"),J=s("\u5B89\u6392\u5DE5\u4F5C\u4EE5\u8FBE\u5230\u6700\u5927\u6536\u76CA\uFF08826\uFF09"),Q=s("\u5BFB\u627E\u53F3\u533A\u95F4\uFF08436\uFF09"),Y=s("\u6309\u6743\u91CD\u968F\u673A\u9009\u62E9\uFF08528\uFF09"),Z=s("\u6709\u5E8F\u77E9\u9635\u4E2D\u7B2C K \u5C0F\u7684\u5143\u7D20\uFF08378\uFF09"),$=s("\u5B50\u6570\u7EC4\u548C\u6392\u5E8F\u540E\u7684\u533A\u95F4\u548C\uFF081508\uFF09"),nn=s("\u5220\u9664\u6700\u77ED\u7684\u5B50\u6570\u7EC4\u4F7F\u5269\u4F59\u6570\u7EC4\u6709\u5E8F \uFF081574\uFF09"),sn=s("\u5143\u7D20\u548C\u5C0F\u4E8E\u7B49\u4E8E\u9608\u503C\u7684\u6B63\u65B9\u5F62\u7684\u6700\u5927\u8FB9\u957F\uFF081292\uFF09"),an=s("\u6EE1\u8DB3\u6761\u4EF6\u7684\u5B50\u5E8F\u5217\u6570\u76EE\uFF081498\uFF09"),pn=s("\u57FA\u4E8E\u65F6\u95F4\u7684\u952E\u503C\u5B58\u50A8\uFF08981\uFF09"),tn=s("\u8F6C\u53D8\u6570\u7EC4\u540E\u6700\u63A5\u8FD1\u76EE\u6807\u503C\u7684\u6570\u7EC4\u548C\uFF081300\uFF09"),en=s("\u6709\u754C\u6570\u7EC4\u4E2D\u6307\u5B9A\u4E0B\u6807\u5904\u7684\u6700\u5927\u503C\uFF081802\uFF09"),on=s("\u5BFB\u627E\u5CF0\u503C II\uFF081901\uFF09"),cn=e(`<div class="custom-container tip"><p class="custom-container-title">tips</p><p>\u4E8C\u5206\u67E5\u627E\u7684\u6838\u5FC3\u5C31\u662F\u627E\u5230\u5177\u6709\u5355\u8C03\u6027\u7684\u6B63\u786E\u67E5\u627E\u5BF9\u8C61</p></div><h2 id="c\u8BED\u8A00\u4E8C\u7EF4\u6570\u7EC4\u4F20\u53C2\u7684\u683C\u5F0F" tabindex="-1"><a class="header-anchor" href="#c\u8BED\u8A00\u4E8C\u7EF4\u6570\u7EC4\u4F20\u53C2\u7684\u683C\u5F0F" aria-hidden="true">#</a> C\u8BED\u8A00\u4E8C\u7EF4\u6570\u7EC4\u4F20\u53C2\u7684\u683C\u5F0F</h2><ol><li>\u7B2C\u4E00\u79CD\u5F62\u53C2\u4E3A\u4E8C\u7EF4\u6570\u7EC4</li></ol><p><strong>\u58F0\u660E</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u51FD\u6570\u58F0\u660E</span>
<span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u4E0D\u8BBA\u591A\u5C11\u7EF4\u6570\u7EC4\uFF0C\u7B2C\u4E00\u7EF4\u90FD\u53EF\u7701\u7565\u3002</span>

<span class="token comment">//\u51ED\u4EC0\u4E48\uFF0C\u7B2C\u4E8C\u7EF4\u5C31\u4E0D\u53EF\u7701\u7565\u5462\uFF1F\u7531\u7F16\u8BD1\u5668\u7684\u5BFB\u5740\u65B9\u5F0F\u51B3\u5B9A\u3002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8C03\u7528</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u51FD\u6570\u8C03\u7528  \u5B9E\u53C2\u76F4\u63A5\u5199\u6570\u7EC4\u540D\uFF01\u6570\u7EC4\u540D\uFF01\uFF08\u91CD\u70B9\uFF09\u3002</span>

<span class="token comment">//(\u6CE8\u610F)function(a[m][n])\u6216function(a[][n])\u90FD\u4E0D\u53EF\u4EE5\uFF01</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u51FD\u6570\u4E2D\u64CD\u63A7\u5143\u7D20</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token number">1.</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span>  <span class="token comment">//\u4EE3\u8868\u7B2C i \u884C \u7B2C j \u5217</span>
<span class="token number">2.</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token comment">//\u540C\u4E0A</span>
<span class="token number">3.</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">+</span>i<span class="token operator">*</span>n <span class="token operator">+</span>j <span class="token punctuation">)</span><span class="token comment">//\u540C\u4E0A\uFF0Cn\u8868\u793A\u7B2C\u4E8C\u7EF4\u6570\u7EC4\u957F\u5EA6,\u5373\u5217\u5BBD</span>

<span class="token comment">//\u4E0D\u7BA1\u600E\u4E48\u6837\uFF0Ca[i][j]\u4E0D\u88AB\u5141\u8BB8\u3002\u4E5F\u662F\u7531\u7F16\u8BD1\u5668\u7684\u5BFB\u5740\u65B9\u5F0F\u51B3\u5B9A\u3002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>\u7B2C\u4E8C\u79CD\u5F62\u53C2\u4E3A\u6570\u7EC4\u6307\u9488</li></ol><p><strong>\u58F0\u660E</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u4E0D\u662F(int *a[n])(\u6307\u9488\u6570\u7EC4) ,\u800C\u662F(int (*a)[n])(\u6570\u7EC4\u6307\u9488);</span>
<span class="token comment">// \u7F18\u7531\u662F [] \u7684 \u4F18\u5148\u7EA7\u6BD4 *\u7684\u5927</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8C03\u7528</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u51FD\u6570\u8C03\u7528  \u5B9E\u53C2\u540C\u6837\u76F4\u63A5\u5199\u6570\u7EC4\u540D\uFF01</span>

<span class="token comment">//(\u6CE8\u610F)function(a[m][n])\u6216function(a[][n])\u540C\u6837\u90FD\u4E0D\u53EF\u4EE5\uFF01</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u51FD\u6570\u4E2D\u64CD\u63A7\u5143\u7D20</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token number">1.</span>   <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span>  <span class="token comment">//\u4EE3\u8868\u7B2C i \u884C \u7B2C j \u5217</span>
<span class="token number">2.</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token comment">//\u540C\u4E0A</span>
<span class="token number">3.</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">+</span>i<span class="token operator">*</span>n <span class="token operator">+</span>j <span class="token punctuation">)</span><span class="token comment">//\u540C\u4E0A\uFF0Cn\u8868\u793A\u7B2C\u4E8C\u7EF4\u6570\u7EC4\u957F\u5EA6,\u5373\u5217\u5BBD</span>

<span class="token comment">//a[i][j]\u4E0D\u88AB\u5141\u8BB8\u3002\u7531\u7F16\u8BD1\u5668\u7684\u5BFB\u5740\u65B9\u5F0F\u51B3\u5B9A\u3002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>\u7B2C\u4E09\u79CD\u5F62\u53C2\u4E3A\u4E8C\u7EA7\u6307\u9488</li></ol><p><strong>\u58F0\u660E</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>n\u8868\u793A\u7B2C\u4E8C\u7EF4\u6570\u7EC4\u957F\u5EA6<span class="token punctuation">,</span>\u5373\u5217\u5BBD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>\u8C03\u7528</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">function</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5B9E\u53C2\u4E0D\u80FD\u4E3A\u6570\u7EC4\u540D\uFF01*\u4E0E\u4E0A\u9762\u76F8\u53CD*\uFF01\u6709\u4E24\u4E2A * \uFF01</span>

<span class="token comment">//(\u6CE8\u610F)function(a)\u6216function((int *)a)\u4E0D\u53EF\u4EE5\uFF01</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u51FD\u6570\u4E2D\u64CD\u63A7\u5143\u7D20</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">+</span>i<span class="token operator">*</span>n <span class="token operator">+</span>j <span class="token punctuation">)</span><span class="token comment">//\u53EA\u6709\u4E00\u79CD\uFF01n\u8868\u793A\u7B2C\u4E8C\u7EF4\u6570\u7EC4\u957F\u5EA6,\u5373\u5217\u5BBD</span>

<span class="token comment">//\u5176\u4ED6\u4E0D\u88AB\u5141\u8BB8\u3002\u7531\u7F16\u8BD1\u5668\u7684\u5BFB\u5740\u65B9\u5F0F\u51B3\u5B9A\u3002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53D8\u91CF\u8303\u56F4" tabindex="-1"><a class="header-anchor" href="#\u53D8\u91CF\u8303\u56F4" aria-hidden="true">#</a> \u53D8\u91CF\u8303\u56F4</h2><p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/143704/39/29529/53954/6323daafE580b5699/360da22f51b4b93c.png" alt="image-20220916100821645.png"></p><h2 id="\u731C\u6570\u5B57\u5927\u5C0F-374" tabindex="-1"><a class="header-anchor" href="#\u731C\u6570\u5B57\u5927\u5C0F-374" aria-hidden="true">#</a> \u731C\u6570\u5B57\u5927\u5C0F\uFF08374\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7B80\u5355\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">guessNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5C71\u8109\u6570\u7EC4\u7684\u5CF0\u9876\u7D22\u5F15-852" tabindex="-1"><a class="header-anchor" href="#\u5C71\u8109\u6570\u7EC4\u7684\u5CF0\u9876\u7D22\u5F15-852" aria-hidden="true">#</a> \u5C71\u8109\u6570\u7EC4\u7684\u5CF0\u9876\u7D22\u5F15\uFF08852\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5C71\u5CF0\u6570\u7EC4\u662F\u4E2D\u95F4\u9AD8\u4E24\u8FB9\u7F13\u6162\u4E0B\u964D</span>
<span class="token comment">//\u65CB\u8F6C\u6570\u7EC4\u662F\u4E2D\u95F4\u7A81\u5140\u7684\u60AC\u5D16,\u6240\u4EE5\u5224\u65AD\u6761\u4EF6\u4E3Aarr[mid]&lt;arr[right]</span>
<span class="token keyword">int</span> <span class="token function">peakIndexInMountainArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> arrSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6709\u6548\u7684\u5B8C\u5168\u5E73\u65B9\u6570-367" tabindex="-1"><a class="header-anchor" href="#\u6709\u6548\u7684\u5B8C\u5168\u5E73\u65B9\u6570-367" aria-hidden="true">#</a> \u6709\u6548\u7684\u5B8C\u5168\u5E73\u65B9\u6570\uFF08367\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u6CD5</span>
bool <span class="token function">isPerfectSquare</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> square <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> mid <span class="token operator">*</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>square <span class="token operator">&lt;</span> num<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>square <span class="token operator">&gt;</span> num<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E24\u4E2A\u6570\u7EC4\u95F4\u7684\u8DDD\u79BB\u503C-1385" tabindex="-1"><a class="header-anchor" href="#\u4E24\u4E2A\u6570\u7EC4\u95F4\u7684\u8DDD\u79BB\u503C-1385" aria-hidden="true">#</a> \u4E24\u4E2A\u6570\u7EC4\u95F4\u7684\u8DDD\u79BB\u503C\uFF081385\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u67E5\u627E\uFF0C\u9898\u89E3\u7684\u7EDD\u5BF9\u503C\u4E0D\u7B49\u5F0F</span>
<span class="token keyword">int</span> <span class="token function">cmpfun</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> low <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findTheDistanceValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span> arr1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> arr2<span class="token punctuation">,</span> <span class="token keyword">int</span> arr2Size<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span>arr2Size<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfun<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr1Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> d<span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> arr2Size<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5BFB\u627E\u6BD4\u76EE\u6807\u5B57\u6BCD\u5927\u7684\u6700\u5C0F\u5B57\u6BCD-744" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u6BD4\u76EE\u6807\u5B57\u6BCD\u5927\u7684\u6700\u5C0F\u5B57\u6BCD-744" aria-hidden="true">#</a> \u5BFB\u627E\u6BD4\u76EE\u6807\u5B57\u6BCD\u5927\u7684\u6700\u5C0F\u5B57\u6BCD\uFF08744\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u8FD9\u9898\u662F\u627E\u8FB9\u754C\u95EE\u9898\uFF0C\u6211\u60F3\u7B80\u5355\u4E86</span>
<span class="token comment">//\u627E\u53F3\u8FB9\u754C\uFF0C\u627E\u5927\u4E8Ex\u7684\u7B2C\u4E00\u4E2A\u6570\uFF0Cx&lt;=target</span>
<span class="token keyword">char</span> <span class="token function">nextGreatestLetter</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> letters<span class="token punctuation">,</span> <span class="token keyword">int</span> lettersSize<span class="token punctuation">,</span> <span class="token keyword">char</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> lettersSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>letters<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>letters<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>letters<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> letters<span class="token punctuation">[</span>left<span class="token operator">%</span>lettersSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u4E0B\u9762\u662F\u5B98\u89E3</span>
<span class="token keyword">char</span> <span class="token function">nextGreatestLetter</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> letters<span class="token punctuation">,</span> <span class="token keyword">int</span> lettersSize<span class="token punctuation">,</span> <span class="token keyword">char</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;=</span> letters<span class="token punctuation">[</span>lettersSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> letters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> lettersSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> low<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>letters<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> letters<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6392\u5217\u786C\u5E01-441" tabindex="-1"><a class="header-anchor" href="#\u6392\u5217\u786C\u5E01-441" aria-hidden="true">#</a> \u6392\u5217\u786C\u5E01\uFF08441\uFF09</h2>`,36),ln=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"t"),n("mi",null,"o"),n("mi",null,"t"),n("mi",null,"a"),n("mi",null,"l"),n("mo",null,"="),n("mfrac",null,[n("mrow",null,[n("mi",null,"k"),n("mo",null,"\xD7"),n("mo",{stretchy:"false"},"("),n("mi",null,"k"),n("mo",null,"+"),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"total=\\frac{k\xD7(k+1)}{2} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.113em","vertical-align":"-0.686em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.427em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\xD7"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])])],-1),un=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u627E\u5DE6\u8FB9\u754C</span>
<span class="token keyword">int</span> <span class="token function">arrangeCoins</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>left<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>mid<span class="token operator">*</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7B2C-k-\u4E2A\u7F3A\u5931\u7684\u6B63\u6574\u6570-1539" tabindex="-1"><a class="header-anchor" href="#\u7B2C-k-\u4E2A\u7F3A\u5931\u7684\u6B63\u6574\u6570-1539" aria-hidden="true">#</a> \u7B2C k \u4E2A\u7F3A\u5931\u7684\u6B63\u6574\u6570\uFF081539\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">findKthPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> k<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arrSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">-</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span>k<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> k<span class="token operator">-</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7279\u6B8A\u6570\u7EC4\u7684\u7279\u5F81\u503C-1608" tabindex="-1"><a class="header-anchor" href="#\u7279\u6B8A\u6570\u7EC4\u7684\u7279\u5F81\u503C-1608" aria-hidden="true">#</a> \u7279\u6B8A\u6570\u7EC4\u7684\u7279\u5F81\u503C\uFF081608\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E24\u6B21\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u7B2C\u4E00\u6B21\u4E8C\u5206\u627E\u8FB9\u754C</span>
<span class="token keyword">int</span> <span class="token function">Bisearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u7B2C\u4E8C\u6B21\u4E8C\u5206\u5FEB\u901F\u627E\u4E2D\u95F4</span>
<span class="token keyword">int</span> <span class="token function">specialArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">Bisearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span>numsSize<span class="token operator">-</span>index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>numsSize<span class="token operator">-</span>index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7EDF\u8BA1\u6709\u5E8F\u77E9\u9635\u4E2D\u7684\u8D1F\u6570-1351" tabindex="-1"><a class="header-anchor" href="#\u7EDF\u8BA1\u6709\u5E8F\u77E9\u9635\u4E2D\u7684\u8D1F\u6570-1351" aria-hidden="true">#</a> \u7EDF\u8BA1\u6709\u5E8F\u77E9\u9635\u4E2D\u7684\u8D1F\u6570\uFF081351\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6CD5\u4E00\uFF0C\u4ECE\u526F\u5BF9\u89D2\u5F00\u59CB\u627E,\u53CC\u6307\u9488</span>
<span class="token keyword">int</span> <span class="token function">countNegatives</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> row <span class="token operator">=</span> gridSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token operator">*</span>gridColSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>row<span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">+=</span>row<span class="token operator">-</span>i<span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
            
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6CD5\u4E8C\uFF0C\u6BCF\u884C\u90FD\u4E8C\u5206\u627E\u8FB9\u754C</span>
<span class="token keyword">int</span> <span class="token function">countNegatives</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>gridSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> gridColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                pos <span class="token operator">=</span> gridColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>mid<span class="token punctuation">;</span>
                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        sum<span class="token operator">+=</span>pos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u77E9\u9635\u4E2D\u6218\u6597\u529B\u6700\u5F31\u7684-k-\u884C-1337" tabindex="-1"><a class="header-anchor" href="#\u77E9\u9635\u4E2D\u6218\u6597\u529B\u6700\u5F31\u7684-k-\u884C-1337" aria-hidden="true">#</a> \u77E9\u9635\u4E2D\u6218\u6597\u529B\u6700\u5F31\u7684 K \u884C\uFF081337\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u52A0\u7ED3\u6784\u4F53\u5FEB\u6392</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">data</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span>
<span class="token punctuation">}</span>data<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">Binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> 
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    data<span class="token operator">*</span>aa <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>
    data<span class="token operator">*</span>bb <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> aa<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span> bb<span class="token operator">-&gt;</span>val <span class="token operator">||</span> <span class="token punctuation">(</span>aa<span class="token operator">-&gt;</span>val <span class="token operator">==</span> bb<span class="token operator">-&gt;</span>val <span class="token operator">&amp;&amp;</span> aa<span class="token operator">-&gt;</span>index <span class="token operator">&gt;</span> bb<span class="token operator">-&gt;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">kWeakestRows</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token operator">*</span>matColSize<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">*</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token function">Binary_search</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> row<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u68C0\u67E5\u6574\u6570\u53CA\u5176\u4E24\u500D\u6570\u662F\u5426\u5B58\u5728-1346" tabindex="-1"><a class="header-anchor" href="#\u68C0\u67E5\u6574\u6570\u53CA\u5176\u4E24\u500D\u6570\u662F\u5426\u5B58\u5728-1346" aria-hidden="true">#</a> \u68C0\u67E5\u6574\u6570\u53CA\u5176\u4E24\u500D\u6570\u662F\u5426\u5B58\u5728\uFF081346\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206+\u6392\u5E8F</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">Binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token comment">//\u6807\u51C6\u4E8C\u5206\u67E5\u627E</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arrSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> k<span class="token punctuation">)</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">checkIfExist</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//\u5BF90\u8981\u5355\u72EC\u5904\u7406\uFF0C\u9632\u6B62\u53EA\u6709\u4E00\u4E2A0\u800C\u8FD4\u56DEtrue\u7684\u60C5\u51B5</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Binary_search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arrSize<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
            cnt_0<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt_0 <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5E73\u65B9\u6570\u4E4B\u548C-633" tabindex="-1"><a class="header-anchor" href="#\u5E73\u65B9\u6570\u4E4B\u548C-633" aria-hidden="true">#</a> \u5E73\u65B9\u6570\u4E4B\u548C\uFF08633\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\uFF0C\u6211\u8BA4\u4E3A\u4E0D\u662F\u4E8C\u5206</span>
bool <span class="token function">judgeSquareSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> sum <span class="token operator">=</span> left <span class="token operator">*</span> left <span class="token operator">+</span> right <span class="token operator">*</span> right<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E24\u4E2A\u6570\u7EC4\u7684\u4EA4\u96C6-ii-350" tabindex="-1"><a class="header-anchor" href="#\u4E24\u4E2A\u6570\u7EC4\u7684\u4EA4\u96C6-ii-350" aria-hidden="true">#</a> \u4E24\u4E2A\u6570\u7EC4\u7684\u4EA4\u96C6 II\uFF08350\uFF09</h2><ol><li>\u7B80\u5355\u6765\u8BF4\u5C31\u662F\u5148\u5BF9\u4E24\u4E2A\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F, \u7136\u540E\u904D\u5386\u7B2C\u4E00\u4E2A\u6570\u7EC4\u91CC\u9762\u7684\u5143\u7D20, \u4E8C\u5206\u67E5\u627E\u53E6\u4E00\u4E2A\u6570\u7EC4\u91CC\u9762\u7684\u5143\u7D20</li><li>\u4E3A\u4E86\u5904\u7406\u6709\u591A\u4E2A\u76F8\u540C\u5143\u7D20\u7684\u60C5\u51B5, \u5C31\u8981\u5206\u522B\u5728\u4E24\u4E2A\u6570\u7EC4\u4E2D\u4E8C\u5206\u641C\u7D22\u76F8\u540C\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u4E0B\u6807\u548C\u6700\u540E\u4E00\u4E2A\u4E0B\u6807</li><li>\u6BD4\u5982: nums1 = [1,2,2,1], nums2 = [1,1]</li><li>\u6392\u5E8F\u4E4B\u540E\u4E3A: nums1 = [1,1,2,2], nums2 = [1,1]</li><li>\u7B2C\u4E00\u4E2A\u6570\u7EC4\u4E2D\u5143\u7D201\u7684\u5F00\u59CB\u4E0B\u6807\u4E3A0, \u7ED3\u675F\u4E0B\u6807\u4E3A1</li><li>\u7B2C\u4E8C\u4E2A\u6570\u7EC4\u4E2D\u5143\u7D201\u7684\u5F00\u59CB\u4E0B\u6807\u4E3A0, \u7ED3\u675F\u4E0B\u6807\u4E3A1</li><li>\u53D6\u5176\u4E2D\u6700\u5C0F\u7684\u6570\u4F5C\u4E3Atotal(\u56E0\u4E3A\u8FD9\u4E2A\u4F8B\u5B50\u4E2D\u90FD\u662F2, \u6240\u4EE5\u5C31\u662F2)</li><li>\u628A\u5F53\u524D\u5143\u7D201\u653E\u5230\u7ED3\u679C\u6570\u7EC4\u4E2D, \u5FAA\u73AFtotal\u904D</li><li>\u7136\u540E\u7EE7\u7EED\u904D\u5386\u7B2C\u4E00\u4E2A\u6570\u7EC4\u4E2D\u7684\u5143\u7D20, \u5F53\u524D\u904D\u5386\u7684\u4F4D\u7F6E\u5C31\u662F \u7B2C\u4E00\u4E2A\u6570\u7EC4\u4E2D\u5143\u7D201\u7684\u7ED3\u675F\u4E0B\u6807+1, \u5373 1 + 1 = 2</li></ol><div class="custom-container tip"><p class="custom-container-title">\u4E2A\u4EBA\u7406\u89E3</p><p>\u672C\u9898\u6BD4\u8F83\u9700\u8981\u6CE8\u610F\u7684\u5730\u65B9\u5728\u4E8E\u6B64\u6B21\u641C\u7D22\u4E3A\u4E0B\u6B21\u641C\u7D22\u6392\u9664\u4E86\u65E0\u7528\u533A\u95F4\u3002</p><p>\u4ECE\u8FD9\u9898\u5F00\u59CB\u5F80\u4E0B\u5C31\u662F\u4E8C\u5206\u7684\u4F18\u5316\u95EE\u9898</p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u67E5\u627E+\u7F29\u77ED\u641C\u7D22\u533A\u95F4</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u5DE6\u95ED\u53F3\u5F00 [left, right) </span>
<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token punctuation">;</span> <span class="token comment">// \u6CE8\u610F</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6CE8\u610F</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span> <span class="token comment">// \u6CE8\u610F</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">right_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u6CE8\u610F</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u6CE8\u610F</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums1Size<span class="token operator">&gt;</span>nums2Size<span class="token operator">?</span>nums2Size<span class="token operator">:</span>nums1Size<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>nums1Size<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span>nums2Size<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> la <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>la<span class="token operator">&lt;</span>nums1Size<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ra <span class="token operator">=</span> <span class="token function">right_bound</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span>nums1<span class="token punctuation">[</span>la<span class="token punctuation">]</span><span class="token punctuation">,</span>nums1Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> lb <span class="token operator">=</span> <span class="token function">left_bound</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span>nums1<span class="token punctuation">[</span>la<span class="token punctuation">]</span><span class="token punctuation">,</span>nums2Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lb<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> rb <span class="token operator">=</span> <span class="token function">right_bound</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span>nums1<span class="token punctuation">[</span>la<span class="token punctuation">]</span><span class="token punctuation">,</span>nums2Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> totalA <span class="token operator">=</span> ra<span class="token operator">-</span>la<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> totalB <span class="token operator">=</span> rb<span class="token operator">-</span>lb<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>totalA<span class="token punctuation">,</span>totalB<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>returnSize<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">*</span>returnSize <span class="token operator">&lt;</span> total<span class="token operator">+</span>tmp<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>la<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        la <span class="token operator">=</span> ra<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E0B\u6807\u5BF9\u4E2D\u7684\u6700\u5927\u8DDD\u79BB-1855" tabindex="-1"><a class="header-anchor" href="#\u4E0B\u6807\u5BF9\u4E2D\u7684\u6700\u5927\u8DDD\u79BB-1855" aria-hidden="true">#</a> \u4E0B\u6807\u5BF9\u4E2D\u7684\u6700\u5927\u8DDD\u79BB\uFF081855\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>nums1Size<span class="token operator">&amp;&amp;</span>right<span class="token operator">&lt;</span>nums2Size<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums2<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token operator">-</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">?</span> right<span class="token operator">-</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1Size<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>nums2Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// \u6B64\u5904\u67E5\u627E\u7684\u8303\u56F4\u5728 [i\uFF0Cnums2Size-1]</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> nums2Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//\u627E\u53F3\u8FB9\u754C</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//&gt;&gt;1\u8FD8\u662F\u5C11\u7528\u5427\uFF0C\u5BB9\u6613\u62A5\u9519</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4-209" tabindex="-1"><a class="header-anchor" href="#\u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4-209" aria-hidden="true">#</a> \u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4\uFF08209\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> sums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u5224\u65AD\u8FB9\u754C</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token comment">//\u524D\u7F00\u548C</span>
    <span class="token keyword">int</span><span class="token operator">*</span> sums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> s <span class="token operator">=</span> target <span class="token operator">+</span> sums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u5F88\u5DE7\u5999</span>
        <span class="token keyword">int</span> leftb <span class="token operator">=</span> <span class="token function">left_bound</span><span class="token punctuation">(</span>sums<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>leftb<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>leftb<span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ans<span class="token operator">==</span>INT_MAX<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6709\u6548\u4E09\u89D2\u5F62\u7684\u4E2A\u6570-611" tabindex="-1"><a class="header-anchor" href="#\u6709\u6548\u4E09\u89D2\u5F62\u7684\u4E2A\u6570-611" aria-hidden="true">#</a> \u6709\u6548\u4E09\u89D2\u5F62\u7684\u4E2A\u6570\uFF08611\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>a <span class="token operator">-</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">triangleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    k <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                    left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            ans <span class="token operator">+=</span> k<span class="token operator">-</span>j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>a <span class="token operator">-</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">triangleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> numsSize <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>k<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ans <span class="token operator">+=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>k <span class="token operator">-</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u627E\u5230-k-\u4E2A\u6700\u63A5\u8FD1\u7684\u5143\u7D20-658" tabindex="-1"><a class="header-anchor" href="#\u627E\u5230-k-\u4E2A\u6700\u63A5\u8FD1\u7684\u5143\u7D20-658" aria-hidden="true">#</a> \u627E\u5230 K \u4E2A\u6700\u63A5\u8FD1\u7684\u5143\u7D20\uFF08658\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u5B9A\u4E49\u6BD4\u8F83\u51FD\u6570\u6BD4\u8F83\u4EAE</span>
<span class="token comment">//\u4E24\u6B21\u6392\u5E8F</span>
<span class="token keyword">int</span> g_val<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">cmp1</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>pa<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>pb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pb<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> g_val<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">abs</span><span class="token punctuation">(</span>b <span class="token operator">-</span> g_val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> g_val<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">abs</span><span class="token punctuation">(</span>b <span class="token operator">-</span> g_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmp2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>pa<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>pb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pa <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pb<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">findClosestElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    g_val <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arrSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u6CD5</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">findClosestElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arrSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//\u63A7\u5236\u6570\u91CF</span>
    <span class="token keyword">int</span> removeNums <span class="token operator">=</span> arrSize <span class="token operator">-</span> k<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>removeNums <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        removeNums<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token operator">+</span>left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u888B\u5B50\u91CC\u6700\u5C11\u6570\u76EE\u7684\u7403-1760" tabindex="-1"><a class="header-anchor" href="#\u888B\u5B50\u91CC\u6700\u5C11\u6570\u76EE\u7684\u7403-1760" aria-hidden="true">#</a> \u888B\u5B50\u91CC\u6700\u5C11\u6570\u76EE\u7684\u7403\uFF081760\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">minimumSize</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxOperations<span class="token punctuation">)</span><span class="token punctuation">{</span>
   	<span class="token comment">//left\u5FC5\u987B\u4ECE1\uFF08\u8FB9\u754C\uFF09\u5F00\u59CB</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token comment">//\u627E\u53F3\u8FB9\u754C</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> ops <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u5982\u679Cmid\u592A\u5927\uFF0C\u9664\u5B8C\u4EE5\u540E\u4F1A\u53D80 right--</span>
            <span class="token comment">//mid==nums[i],\u5219\u4E0D\u7528\u5206\u5272\uFF0Cnums[i]-1/mid = 0;</span>
            <span class="token comment">//mid&lt;nums[i],\u9700\u8981\u5206\u5272\uFF0Cops = \u5206\u5272\u7684\u6B21\u6570</span>
            ops <span class="token operator">+=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>mid<span class="token punctuation">;</span><span class="token comment">//\u4E0B\u53D6\u6574</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//ops\u5C0F\u4E8E\u64CD\u4F5C\u6570\uFF0C\u8BF4\u660E\u8FD8\u80FD\u7EE7\u7EED\u5206\u5272\uFF0C\u8BA9max\u53D8\u5C0F\uFF0Cright = mid -1;</span>
        <span class="token comment">//\u7C7B\u4F3C\u4E8E\u627E\u8FB9\u754C</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ops<span class="token operator">&lt;=</span>maxOperations<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u627E\u5230\u9700\u8981\u8865\u5145\u7C89\u7B14\u7684\u5B66\u751F\u7F16\u53F7-1894" tabindex="-1"><a class="header-anchor" href="#\u627E\u5230\u9700\u8981\u8865\u5145\u7C89\u7B14\u7684\u5B66\u751F\u7F16\u53F7-1894" aria-hidden="true">#</a> \u627E\u5230\u9700\u8981\u8865\u5145\u7C89\u7B14\u7684\u5B66\u751F\u7F16\u53F7\uFF081894\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206+\u524D\u7F00\u548C</span>
<span class="token comment">//\u5176\u5B9E\u5C31\u662F\u524D\u7F00\u548C\u627E\u5DE6\u8FB9\u754C</span>
<span class="token keyword">int</span> <span class="token function">chalkReplacer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> chalk<span class="token punctuation">,</span> <span class="token keyword">int</span> chalkSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> pre_sum <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>chalkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pre_sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> chalk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pre_sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chalkSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre_sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>chalk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u5224\u65AD\u975E\u5E38\u91CD\u8981</span>
    <span class="token punctuation">}</span>
    k <span class="token operator">%=</span> pre_sum<span class="token punctuation">[</span>chalkSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> chalkSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pre_sum<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>k<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">chalkReplacer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> chalk<span class="token punctuation">,</span> <span class="token keyword">int</span> chalkSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u524D\u7F00\u548C</span>
    <span class="token keyword">int</span><span class="token operator">*</span> presums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>chalkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>chalkSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        presums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> presums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>chalk<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>presums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u5224\u65AD\u975E\u5E38\u91CD\u8981</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u53D6\u6A21</span>
    <span class="token keyword">int</span> target <span class="token operator">=</span> k<span class="token operator">%</span>presums<span class="token punctuation">[</span>chalkSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">left_bound</span><span class="token punctuation">(</span>presums<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>chalkSize<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pos <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217-300" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217-300" aria-hidden="true">#</a> \u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\uFF08300\uFF09</h2><ul><li>\u524D\u9762\u53EA\u7528\u4E86dp\uFF0C\u4E0B\u9762\u7528\u4E8C\u5206\uFF08\u8FD9\u4E2A\u9898\u6211\u89C9\u5F97\u53EF\u6807\u4E2A\u91CD\u70B9\uFF09</li><li>\u53EA\u6C42\u957F\u5EA6\uFF0C\u65E0\u6240\u8C13\u987A\u5E8F\u3002</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u8D2A\u5FC3+\u4E8C\u5206</span>
<span class="token comment">//\u91CD\u70B9\uFF1A\u63D2\u5165\u66F4\u5C0F\u7684\u53EA\u4F1A\u66FF\u6362\u6389\u67D0\u4E00\u4E2A\u3002 \u63D2\u5165\u8D85\u51FA\u6240\u6709\u7684\uFF0C\u624D\u4F1A\u589E\u52A0\u957F\u5EA6\u3002</span>
<span class="token comment">//\u65B0\u6765\u7684\u5E76\u4E0D\u5F71\u54CD\u5DF2\u6709\u7684\u6700\u5927\u957F\u5EA6,\u4F46\u662F\u53EF\u4EE5\u66F4\u65B0\u4E3A\u66F4\u597D(\u66F4\u6162\u589E\u957F)\u7684\u7EC4\u5408</span>
<span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>ans<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>dp<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span><span class="token operator">++</span>ans<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> right <span class="token operator">=</span> ans<span class="token punctuation">;</span>
            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//\u5982\u679C\u627E\u4E0D\u5230\u8BF4\u660E\u6240\u6709\u7684\u6570\u90FD\u6BD4 nums[i] \u5927\uFF0C\u6B64\u65F6\u8981\u66F4\u65B0 d[1]\uFF0C\u6240\u4EE5\u8FD9\u91CC\u5C06 pos \u8BBE\u4E3A 0</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    pos <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            dp<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6211\u66F4\u559C\u6B22\u4E0B\u9762\u8FD9\u4E00\u7248\u6CA1\u6709pos\u7684</span>
<span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>ans<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>dp<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span><span class="token operator">++</span>ans<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> right <span class="token operator">=</span> ans<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            dp<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>  ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7231\u5403\u9999\u8549\u7684\u73C2\u73C2-875" tabindex="-1"><a class="header-anchor" href="#\u7231\u5403\u9999\u8549\u7684\u73C2\u73C2-875" aria-hidden="true">#</a> \u7231\u5403\u9999\u8549\u7684\u73C2\u73C2\uFF08875\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u865A\u7A7A\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> piles<span class="token punctuation">,</span> <span class="token keyword">int</span> pilesSize<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pilesSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        right <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span>piles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token comment">//\u627E\u5DE6\u8FB9\u754C</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BA1\u7B97\u65F6\u95F4</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> curtime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pilesSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u8FD9\u91CC\u5E94\u8BE5\u662F\u4E0A\u53D6\u6574\uFF08piles[i])/mid\uFF09== \u4E0B\u53D6\u6574(piles[i]+mid-1)/mid</span>
            curtime <span class="token operator">+=</span><span class="token punctuation">(</span>piles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5224\u65AD\u6761\u4EF6</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curtime<span class="token operator">&lt;=</span>h<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E24\u7403\u4E4B\u95F4\u7684\u78C1\u529B-1552" tabindex="-1"><a class="header-anchor" href="#\u4E24\u7403\u4E4B\u95F4\u7684\u78C1\u529B-1552" aria-hidden="true">#</a> \u4E24\u7403\u4E4B\u95F4\u7684\u78C1\u529B\uFF081552\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u6700\u91CD\u8981\u7684\u5C31\u662F\u627E\u5230\u5355\u8C03\u7684\u4E1C\u897F</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> psn<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> psmSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> pre <span class="token operator">=</span> psn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> psmSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">//\u8FD9\u4E2A\u78C1\u529B\u53EF\u4EE5\u6BD4x\u5927\uFF0C\u4F46\u662F\u4E0D\u80FD\u6BD4x\u5C0F</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>psn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> pre <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pre <span class="token operator">=</span> psn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> position<span class="token punctuation">,</span> <span class="token keyword">int</span> positionSize<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span>positionSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> positionSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> diff <span class="token operator">=</span> position<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u6700\u5927\u95F4\u9694</span>
    <span class="token keyword">int</span> min <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token comment">//\u627E\u6700\u5C0F\u95F4\u9694\uFF0C\u4E5F\u53EF\u4EE5\u76F4\u63A5\u8BA9left = 1</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        min <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>position<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>position<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> diff<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> min<span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> diff<span class="token operator">/</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">//\u80FD\u653E\u7684\u7403\u7684\u6570\u91CF\u4E0D\u80FD\u6BD4m\u5C0F</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>positionSize<span class="token punctuation">)</span><span class="token operator">&gt;=</span>m<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5237\u7248</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> position<span class="token punctuation">,</span> <span class="token keyword">int</span> positionSize<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span>positionSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> position<span class="token punctuation">[</span>positionSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> right<span class="token punctuation">;</span>

    right <span class="token operator">/=</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token comment">//\u627E\u53F3\u8FB9\u754C</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>positionSize<span class="token punctuation">)</span><span class="token operator">&gt;=</span>m<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> Size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>tmp<span class="token operator">&gt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5BFB\u627E\u91CD\u590D\u6570-287" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u91CD\u590D\u6570-287" aria-hidden="true">#</a> \u5BFB\u627E\u91CD\u590D\u6570\uFF08287\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E4B\u524D\u505A\u8FC7\u7684\u65B9\u6CD5\u6CA1\u6709\u8FD9\u4E2A\u7B80\u6D01</span>
<span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token comment">//\u627E\u53F3\u8FB9\u754C</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//check \u6761\u4EF6</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7ED3\u679C\u4E0D\u8D85\u8FC7\u9608\u503C\u7684\u6700\u5C0F\u9664\u6570-1283" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7ED3\u679C\u4E0D\u8D85\u8FC7\u9608\u503C\u7684\u6700\u5C0F\u9664\u6570-1283" aria-hidden="true">#</a> \u4F7F\u7ED3\u679C\u4E0D\u8D85\u8FC7\u9608\u503C\u7684\u6700\u5C0F\u9664\u6570\uFF081283\uFF09</h2>`,46),rn=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"\u6280\u5DE7"),n("p",null,"\u5DE7\u5999\u5B9E\u73B0\u4E0A\u53D6\u6574"),n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mo",{fence:"true"},"\u2308"),n("mfrac",null,[n("mi",null,"m"),n("mi",null,"n")]),n("mo",{fence:"true"},"\u2309")]),n("mo",null,"="),n("mrow",null,[n("mo",{fence:"true"},"\u230A"),n("mfrac",null,[n("mrow",null,[n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"n"),n("mo",null,"\u2212"),n("mn",null,"1")]),n("mi",null,"n")]),n("mo",{fence:"true"},"\u230B")])]),n("annotation",{encoding:"application/x-tex"},"\\left \\lceil \\frac{m}{n} \\right \\rceil = \\left \\lfloor \\frac{m+n-1}{n} \\right \\rfloor ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.836em","vertical-align":"-0.686em"}}),n("span",{class:"minner"},[n("span",{class:"mopen delimcenter",style:{top:"0em"}},[n("span",{class:"delimsizing size2"},"\u2308")]),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.1076em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"m")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mclose delimcenter",style:{top:"0em"}},[n("span",{class:"delimsizing size2"},"\u2309")])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.4em","vertical-align":"-0.95em"}}),n("span",{class:"minner"},[n("span",{class:"mopen delimcenter",style:{top:"0em"}},[n("span",{class:"delimsizing size3"},"\u230A")]),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3214em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"1")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mclose delimcenter",style:{top:"0em"}},[n("span",{class:"delimsizing size3"},"\u230B")])])])])])])])],-1),kn=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u627E\u5355\u8C03</span>
<span class="token keyword">int</span> <span class="token function">smallestDivisor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        right <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u4E0A\u53D6\u6574\u6280\u5DE7</span>
            total<span class="token operator">+=</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>total<span class="token operator">&lt;=</span>threshold<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5224\u65AD\u5B50\u5E8F\u5217-392" tabindex="-1"><a class="header-anchor" href="#\u5224\u65AD\u5B50\u5E8F\u5217-392" aria-hidden="true">#</a> \u5224\u65AD\u5B50\u5E8F\u5217\uFF08392\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
bool <span class="token function">isSubsequence</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> s_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u5EFA\u7ACBdp\u6570\u7EC4</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>t_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u521D\u59CB\u5316base</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>t_len<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//\u5F00\u59CB\u904D\u5386</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>t_len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>j<span class="token operator">+</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u6BD4\u8F83\u662F\u5426\u4E3A\u5B50\u5E8F\u5217</span>
    <span class="token keyword">int</span> t_ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>t_ptr<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">==</span>t_len<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u6307\u5411\u8BE5\u5B57\u7B26\u5728t\u7684\u4E0B\u4E00\u4F4D\u7F6E\uFF0C\u8DF3\u8FC7\u4E2D\u95F4\u7684\u5B57\u7B26\u4EE5\u8FBE\u5230\u51CF\u5C11\u65F6\u95F4\u7684\u76EE\u7684</span>
        t_ptr <span class="token operator">=</span> dp<span class="token punctuation">[</span>t_ptr<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
bool <span class="token function">isSubsequence</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> s_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s_ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t_ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>s_ptr<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;\\0&#39;</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">[</span>t_ptr<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>s_ptr<span class="token punctuation">]</span><span class="token operator">==</span>t<span class="token punctuation">[</span>t_ptr<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            s_ptr<span class="token operator">++</span><span class="token punctuation">;</span>
            t_ptr<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            t_ptr<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s_ptr<span class="token operator">==</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53EF\u79FB\u9664\u5B57\u7B26\u7684\u6700\u5927\u6570\u76EE-1898" tabindex="-1"><a class="header-anchor" href="#\u53EF\u79FB\u9664\u5B57\u7B26\u7684\u6700\u5927\u6570\u76EE-1898" aria-hidden="true">#</a> \u53EF\u79FB\u9664\u5B57\u7B26\u7684\u6700\u5927\u6570\u76EE\uFF081898\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488+\u4E8C\u5206</span>
bool <span class="token function">isSubsequence</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> s_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s_ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t_ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s_ptr <span class="token operator">&lt;</span> s_len <span class="token operator">&amp;&amp;</span> t_ptr <span class="token operator">&lt;</span> t_len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>t_ptr <span class="token operator">&lt;</span> t_len<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">[</span>t_ptr<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span>t_ptr<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>s_ptr<span class="token punctuation">]</span><span class="token operator">==</span>t<span class="token punctuation">[</span>t_ptr<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">[</span>t_ptr<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            s_ptr<span class="token operator">++</span><span class="token punctuation">;</span>
            t_ptr<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            t_ptr<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s_ptr<span class="token operator">==</span>s_len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maximumRemovals</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> removable<span class="token punctuation">,</span> <span class="token keyword">int</span> removableSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>removableSize<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token comment">// \u5220\u9664\u5B57\u7B26</span>
        <span class="token keyword">char</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//+1</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>removable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">;</span>
        <span class="token comment">//check\u70B9</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSubsequence</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u51C6\u65F6\u5230\u8FBE\u7684\u5217\u8F66\u6700\u5C0F\u65F6\u901F-1870" tabindex="-1"><a class="header-anchor" href="#\u51C6\u65F6\u5230\u8FBE\u7684\u5217\u8F66\u6700\u5C0F\u65F6\u901F-1870" aria-hidden="true">#</a> \u51C6\u65F6\u5230\u8FBE\u7684\u5217\u8F66\u6700\u5C0F\u65F6\u901F\uFF081870\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u865A\u7A7A\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">minSpeedOnTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> dist<span class="token punctuation">,</span> <span class="token keyword">int</span> distSize<span class="token punctuation">,</span> <span class="token keyword">double</span> hour<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;=</span> distSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">1e7</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//\u8BA1\u7B97\u65F6\u95F4</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>distSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u6B64\u5904\u4E0A\u53D6\u6574</span>
            time<span class="token operator">+=</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u6700\u540E\u4E00\u4E2A\u7B97\u7CBE\u5EA6</span>
        time<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>dist<span class="token punctuation">[</span>distSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>mid<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">&lt;=</span>hour<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5236\u4F5C-m-\u675F\u82B1\u6240\u9700\u7684\u6700\u5C11\u5929\u6570-1482" tabindex="-1"><a class="header-anchor" href="#\u5236\u4F5C-m-\u675F\u82B1\u6240\u9700\u7684\u6700\u5C11\u5929\u6570-1482" aria-hidden="true">#</a> \u5236\u4F5C m \u675F\u82B1\u6240\u9700\u7684\u6700\u5C11\u5929\u6570\uFF081482\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206</span>
bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> bloomDay<span class="token punctuation">,</span><span class="token keyword">int</span> bloomDaySize<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> flowers <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> bouquets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bloomDaySize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u56E0\u4E3A\u5F00\u7684\u82B1\u5FC5\u987B\u8FDE\u7EED\uFF0C\u6240\u4EE5\u91C7\u7528\u4EE5\u4E0B\u4EE3\u7801</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bloomDay<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>day<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            flowers<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>flowers<span class="token operator">==</span>k<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                bouquets<span class="token operator">++</span><span class="token punctuation">;</span>
                flowers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            flowers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bouquets<span class="token operator">&gt;=</span>m<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">minDays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> bloomDay<span class="token punctuation">,</span> <span class="token keyword">int</span> bloomDaySize<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>bloomDaySize<span class="token operator">/</span>m<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u4E58\u4F1A\u6EA2\u51FA</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bloomDaySize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        right <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span>bloomDay<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>bloomDay<span class="token punctuation">,</span>bloomDaySize<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6700\u9AD8\u9891\u5143\u7D20\u7684\u9891\u6570-1838" tabindex="-1"><a class="header-anchor" href="#\u6700\u9AD8\u9891\u5143\u7D20\u7684\u9891\u6570-1838" aria-hidden="true">#</a> \u6700\u9AD8\u9891\u5143\u7D20\u7684\u9891\u6570\uFF081838\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u524D\u7F00\u548C\u7B97\u9762\u79EF+\u4E8C\u5206</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cmfunc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">maxFrequency</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll sum<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> thri <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">-</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>mid <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> sum<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>thri<span class="token operator">&lt;=</span>k<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                res <span class="token operator">=</span>mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> res <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u5355\u4E00\u5143\u7D20-540" tabindex="-1"><a class="header-anchor" href="#\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u5355\u4E00\u5143\u7D20-540" aria-hidden="true">#</a> \u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u5355\u4E00\u5143\u7D20\uFF08540\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206+\u7528\u5F02\u6216\u5224\u65AD\u5947\u5076</span>
<span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">//\u7528\u5F02\u6216\u89E3\u51B3\u5947\u5076\u95EE\u9898</span>
        <span class="token comment">//\u6570\u7EC4\u4ECE0\u5F00\u59CB\u7684\uFF01\uFF01\uFF01</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5C06\u6570\u7EC4\u5206\u6210\u4E09\u4E2A\u5B50\u6570\u7EC4\u7684\u65B9\u6848\u6570-1712" tabindex="-1"><a class="header-anchor" href="#\u5C06\u6570\u7EC4\u5206\u6210\u4E09\u4E2A\u5B50\u6570\u7EC4\u7684\u65B9\u6848\u6570-1712" aria-hidden="true">#</a> \u5C06\u6570\u7EC4\u5206\u6210\u4E09\u4E2A\u5B50\u6570\u7EC4\u7684\u65B9\u6848\u6570\uFF081712\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u524D\u7F00\u548C+\u4E8C\u5206</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">1000000007</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100010</span></span></span>

<span class="token keyword">int</span> <span class="token function">waysToSplit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> m<span class="token punctuation">,</span> idx1<span class="token punctuation">,</span> idx2<span class="token punctuation">;</span>

    <span class="token comment">// \u6784\u5EFA\u524D\u7F00\u548C</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// \u7B2C\u4E00\u4E2A\u6307\u9488\u7684\u4E0B\u6807\u8303\u56F4[1, n - 2]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u56FA\u5B9A\u7B2C\u4E00\u4E2A\u6307\u9488\uFF0C\u67E5\u627E\u7B2C\u4E8C\u4E2A\u6307\u9488\u7684\u5408\u6CD5\u533A\u95F4\u3002</span>
        <span class="token comment">// \u7B2C\u4E8C\u4E2A\u6307\u9488\u7684\u503C\u57DF[i + 1, n - 1]</span>
        l <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> r <span class="token operator">=</span> m<span class="token punctuation">;</span>
            <span class="token keyword">else</span> l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u6CE8\u610F\u7279\u6B8A\u5224\u65ADr\u662F\u5426\u65E0\u89E3\u3002</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// \u65E0\u89E3\u8BF4\u660E \u7B2C\u4E00\u4E2A\u6307\u9488\u53D6\u5F53\u524D\u7684i\u4E0D\u53EF\u4EE5</span>
        <span class="token punctuation">}</span>

        idx1 <span class="token operator">=</span> r<span class="token punctuation">;</span>
        <span class="token comment">//\u6709\u89E3\u7684\u60C5\u51B5\u4E0B\uFF0C\u5BFB\u627E\u7B2C\u4E8C\u4E2A\u6307\u9488\u7684\u53F3\u8FB9\u754C [idx1, n - 1]\u3002</span>
        l <span class="token operator">=</span> idx1<span class="token punctuation">;</span>
        r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> m<span class="token punctuation">;</span>
            <span class="token keyword">else</span> r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        idx2 <span class="token operator">=</span> r<span class="token punctuation">;</span>

        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> idx2 <span class="token operator">-</span> idx1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7EDD\u5BF9\u5DEE\u503C\u548C-1818" tabindex="-1"><a class="header-anchor" href="#\u7EDD\u5BF9\u5DEE\u503C\u548C-1818" aria-hidden="true">#</a> \u7EDD\u5BF9\u5DEE\u503C\u548C\uFF081818\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> sums<span class="token punctuation">,</span><span class="token keyword">int</span> Size<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> Size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>a <span class="token operator">-</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">minAbsoluteSumDiff</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> recSize <span class="token operator">=</span> nums1Size<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> rec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>recSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span>nums1<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>recSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span>recSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxn<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums1Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token operator">+</span>diff<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">left_bound</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span>recSize<span class="token punctuation">,</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u4E0B\u9762\u662F\u4E3A\u4E86\u5904\u7406\u4E24\u79CD\u8FB9\u754C\u60C5\u51B5</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>recSize<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            maxn <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> diff <span class="token operator">-</span> <span class="token punctuation">(</span>rec<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            maxn <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> diff <span class="token operator">-</span> <span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> rec<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> maxn <span class="token operator">+</span> MOD<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5B89\u6392\u5DE5\u4F5C\u4EE5\u8FBE\u5230\u6700\u5927\u6536\u76CA-826" tabindex="-1"><a class="header-anchor" href="#\u5B89\u6392\u5DE5\u4F5C\u4EE5\u8FBE\u5230\u6700\u5927\u6536\u76CA-826" aria-hidden="true">#</a> \u5B89\u6392\u5DE5\u4F5C\u4EE5\u8FBE\u5230\u6700\u5927\u6536\u76CA\uFF08826\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206</span>
<span class="token comment">//\u7C7B\u4F3C\u5EFA\u7ACBmap</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dif<span class="token punctuation">;</span>
    <span class="token keyword">int</span> prf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>node<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>node <span class="token operator">*</span>a<span class="token punctuation">,</span>node <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">-&gt;</span>dif<span class="token operator">-</span>b<span class="token operator">-&gt;</span>dif<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maxProfitAssignment</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> difficulty<span class="token punctuation">,</span> <span class="token keyword">int</span> difficultySize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> profit<span class="token punctuation">,</span> <span class="token keyword">int</span> profitSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> worker<span class="token punctuation">,</span> <span class="token keyword">int</span> workerSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    node arr<span class="token punctuation">[</span>difficultySize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>difficultySize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dif<span class="token operator">=</span>difficulty<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>prf<span class="token operator">=</span>profit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>difficultySize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u8BB0\u5F55\u6BCF\u4E2A\u68AF\u5EA6\u80FD\u83B7\u5F97\u7684\u6700\u5927\u6536\u76CA\uFF0C\u53EF\u80FD\u4F1A\u6709\u96BE\u5EA6\u5927\u6536\u76CA\u5C0F\u7684\u5DE5\u4F5C</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>difficultySize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>prf<span class="token operator">=</span><span class="token function">fmax</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>prf<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>prf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>workerSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right<span class="token operator">=</span>difficultySize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>dif<span class="token operator">&lt;=</span>worker<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>
            ans<span class="token operator">+=</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>prf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5BFB\u627E\u53F3\u533A\u95F4-436" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u53F3\u533A\u95F4-436" aria-hidden="true">#</a> \u5BFB\u627E\u53F3\u533A\u95F4\uFF08436\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//map+\u4E8C\u5206</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> start<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>pa<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>pb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token operator">-&gt;</span>start <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span>pb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>start<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">findRightInterval</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> intervals<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> intervalsColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node startIntervals<span class="token punctuation">[</span>intervalsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervalsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        startIntervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        startIntervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u9898\u76EE\u4E2Dstart\u4E0D\u91CD\u590D</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>startIntervals<span class="token punctuation">,</span> intervalsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> intervalsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervalsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> intervalsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>startIntervals<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>start <span class="token operator">&gt;=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                target <span class="token operator">=</span> startIntervals<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> intervalsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6309\u6743\u91CD\u968F\u673A\u9009\u62E9-528" tabindex="-1"><a class="header-anchor" href="#\u6309\u6743\u91CD\u968F\u673A\u9009\u62E9-528" aria-hidden="true">#</a> \u6309\u6743\u91CD\u968F\u673A\u9009\u62E9\uFF08528\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u524D\u7F00\u548C+rand+\u4E8C\u5206</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> pre_sum<span class="token punctuation">;</span>
    <span class="token keyword">int</span> preSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Solution<span class="token punctuation">;</span>


Solution<span class="token operator">*</span> <span class="token function">solutionCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> wSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Solution<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Solution<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>pre_sum <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>wSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>preSize <span class="token operator">=</span>wSize<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>wSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        obj<span class="token operator">-&gt;</span>total <span class="token operator">+=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>Solution<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>preSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> low<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            high <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> low<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">solutionPickIndex</span><span class="token punctuation">(</span>Solution<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> obj<span class="token operator">-&gt;</span>total <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">solutionFree</span><span class="token punctuation">(</span>Solution<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>pre_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6709\u5E8F\u77E9\u9635\u4E2D\u7B2C-k-\u5C0F\u7684\u5143\u7D20-378" tabindex="-1"><a class="header-anchor" href="#\u6709\u5E8F\u77E9\u9635\u4E2D\u7B2C-k-\u5C0F\u7684\u5143\u7D20-378" aria-hidden="true">#</a> \u6709\u5E8F\u77E9\u9635\u4E2D\u7B2C K \u5C0F\u7684\u5143\u7D20\uFF08378\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4ECE\u5DE6\u4E0B\u5230\u53F3\u4E0A</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count <span class="token operator">+=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> matrix<span class="token punctuation">[</span>matrixSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>matrixSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">,</span> matrixSize<span class="token punctuation">)</span><span class="token operator">&gt;=</span>k<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5B50\u6570\u7EC4\u548C\u6392\u5E8F\u540E\u7684\u533A\u95F4\u548C-1508" tabindex="-1"><a class="header-anchor" href="#\u5B50\u6570\u7EC4\u548C\u6392\u5E8F\u540E\u7684\u533A\u95F4\u548C-1508" aria-hidden="true">#</a> \u5B50\u6570\u7EC4\u548C\u6392\u5E8F\u540E\u7684\u533A\u95F4\u548C\uFF081508\uFF09</h2><p>\u5173\u4E8E\u524D\u7F00\u548C\u7684\u524D\u7F00\u548C\u90E8\u5206\u770B\u8FD9\u91CC\uFF1A</p><p><code>prePreSums[j] - prePreSums[i] - (j - i) * preSums[i]</code></p>`,29),dn={href:"https://leetcode.cn/problems/range-sum-of-sorted-subarray-sums/solution/-by-mkdir700-l90o/",target:"_blank",rel:"noopener noreferrer"},mn=s("https://leetcode.cn/problems/range-sum-of-sorted-subarray-sums/solution/-by-mkdir700-l90o/"),vn=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span>  MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token comment">// \u83B7\u53D6\u865A\u62DF\u77E9\u9635\u5C0F\u4E8Ex\u7684\u6570\u91CF</span>
<span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> preSum<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// preSum[j]-preSum[i]\u8FD9\u91CC\u662F\u5728\u4E00\u5C42\u4E00\u5C42\u5F80\u4E0B\u8D70</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>preSum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u8FD9\u91CC\u53EF\u4EE5j--\u662F\u56E0\u4E3A\u865A\u62DF\u77E9\u9635\u4ECE\u4E0B\u5F80\u4E0A\u662F\u9012\u589E\u7684</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
        count <span class="token operator">+=</span> j<span class="token operator">-</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u83B7\u53D6\u7B2CK\u4E2A\u5143\u7D20\uFF0C\u865A\u7A7A\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">getK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> preSum<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> preSum<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>preSum<span class="token punctuation">,</span>n<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&gt;=</span>K<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u6C42\u524DK\u4E2A\u5143\u7D20\u548C</span>
<span class="token keyword">int</span> <span class="token function">getPreSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prePreSum<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> preSum<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">getK</span><span class="token punctuation">(</span>preSum<span class="token punctuation">,</span> n<span class="token punctuation">,</span> K<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// \u8FD9\u91CC\u7684\u5C0F\u4E8E\u662F\u4E3A\u4E86\u9632\u6B62\u52A0\u591A\u4E86</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>preSum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> prePreSum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>prePreSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span>preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        sum <span class="token operator">%=</span> MOD<span class="token punctuation">;</span>
        count<span class="token operator">+=</span>j<span class="token operator">-</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8865\u7684\u5C11\u7684</span>
    sum <span class="token operator">+=</span> num<span class="token operator">*</span><span class="token punctuation">(</span>K<span class="token operator">-</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">rangeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u524D\u7F00\u548C</span>
    <span class="token keyword">int</span> preSum<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    preSum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u524D\u7F00\u548C\u7684\u524D\u7F00\u548C</span>
    <span class="token keyword">int</span> prePreSum<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    prePreSum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        prePreSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prePreSum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getPreSum</span><span class="token punctuation">(</span>prePreSum<span class="token punctuation">,</span> preSum<span class="token punctuation">,</span> n<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getPreSum</span><span class="token punctuation">(</span>prePreSum<span class="token punctuation">,</span> preSum<span class="token punctuation">,</span> n<span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5220\u9664\u6700\u77ED\u7684\u5B50\u6570\u7EC4\u4F7F\u5269\u4F59\u6570\u7EC4\u6709\u5E8F-1574" tabindex="-1"><a class="header-anchor" href="#\u5220\u9664\u6700\u77ED\u7684\u5B50\u6570\u7EC4\u4F7F\u5269\u4F59\u6570\u7EC4\u6709\u5E8F-1574" aria-hidden="true">#</a> \u5220\u9664\u6700\u77ED\u7684\u5B50\u6570\u7EC4\u4F7F\u5269\u4F59\u6570\u7EC4\u6709\u5E8F \uFF081574\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\u6CD5</span>
<span class="token keyword">int</span> <span class="token function">findLengthOfShortestSubarray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arrSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5148\u627E\u5DE6\u534A\u6BB5\u5C3D\u91CF\u591A\u7684\u9012\u589E\u5B50\u6570\u7EC4</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>arrSize<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;=</span>arr<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6574\u4E2A\u6570\u7EC4\u672C\u6765\u5C31\u5DF2\u7ECF\u662F\u9012\u589E\u7684\uFF0C\u5219\u4E00\u4E2A\u5143\u7D20\u90FD\u4E0D\u7528\u5220</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>arrSize<span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token comment">// \u5047\u8BBE\u5DE6\u8FB9\u5168\u5220</span>
    res <span class="token operator">=</span> arrSize<span class="token operator">-</span>left<span class="token punctuation">;</span>
    left<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>arrSize<span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>right<span class="token operator">||</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>right<span class="token operator">-</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u6539\u8FDB\u627E\u7684\u90E8\u5206</span>
<span class="token keyword">int</span> <span class="token function">findLengthOfShortestSubarray</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> arrSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">/* \u5148\u627E\u5DE6\u534A\u6BB5\u5C3D\u91CF\u591A\u7684\u9012\u589E\u5B50\u6570\u7EC4\u3002 */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>arrSize <span class="token operator">&gt;</span> x <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> arr<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u6574\u4E2A\u6570\u7EC4\u672C\u6765\u5C31\u5DF2\u7ECF\u662F\u9012\u589E\u7684\uFF0C\u5219\u4E00\u4E2A\u5143\u7D20\u90FD\u4E0D\u7528\u5220\u3002 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arrSize <span class="token operator">==</span> x<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u521D\u59CB\u5316\u4E3A\u5148\u5220\u9664\u53F3\u534A\u90E8\u5206\u7684\u957F\u5EA6\u3002 */</span>
    result <span class="token operator">=</span> arrSize <span class="token operator">-</span> x<span class="token punctuation">;</span>

    <span class="token comment">/* \u53F3\u534A\u90E8\u5206\u52A0\u5165\u7684\u5FC5\u987B\u662F\u4ECE\u53F3\u5F80\u5DE6\u9012\u51CF\u7684\u5B50\u6570\u7EC4\u3002 */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>arrSize <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> y <span class="token operator">||</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* \u4E8C\u5206\u6CD5\u67E5\u627E\uFF0C\u8FD4\u56DE\u503C\u4E3A\u5DE6\u534A\u8FB9\u5B50\u6570\u7EC4\u7684\u5269\u4F59\u957F\u5EA6\uFF0C\u53EF\u80FD\u4E3A0\u3002 */</span>
        x <span class="token operator">=</span> <span class="token function">searchNewLength</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> x<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">-</span> x <span class="token operator">&lt;</span> result<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            result <span class="token operator">=</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        y<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* \u4E8C\u5206\u6CD5\u67E5\u627E\u9012\u589E\u6570\u7EC4\u4E2D\uFF0C\u4ECE\u53F3\u5F80\u5DE6\u7B2C\u4E00\u4E2A\u5C0F\u4E8E\u7B49\u4E8Evalue\u7684\u4F4D\u7F6E\uFF0C\u7136\u540E\u8FD4\u56DE\u5269\u4F59\u90E8\u5206\u6570\u7EC4\u957F\u5EA6\u3002 */</span>
<span class="token keyword">int</span> <span class="token function">searchNewLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&gt;=</span> arrSize <span class="token operator">||</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> arrSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mid <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            y <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            x <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            x <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5143\u7D20\u548C\u5C0F\u4E8E\u7B49\u4E8E\u9608\u503C\u7684\u6B63\u65B9\u5F62\u7684\u6700\u5927\u8FB9\u957F-1292" tabindex="-1"><a class="header-anchor" href="#\u5143\u7D20\u548C\u5C0F\u4E8E\u7B49\u4E8E\u9608\u503C\u7684\u6B63\u65B9\u5F62\u7684\u6700\u5927\u8FB9\u957F-1292" aria-hidden="true">#</a> \u5143\u7D20\u548C\u5C0F\u4E8E\u7B49\u4E8E\u9608\u503C\u7684\u6B63\u65B9\u5F62\u7684\u6700\u5927\u8FB9\u957F\uFF081292\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u77E9\u9635\u524D\u7F00\u548C\u6280\u5DE7</span>
<span class="token comment">// \u8BA1\u7B97\u533A\u95F4\u524D\u7F00\u548C</span>
<span class="token keyword">int</span> <span class="token function">calcsum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> preMatSums<span class="token punctuation">,</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> preMatSums<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>preMatSums<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>preMatSums<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>preMatSums<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> preMatSums<span class="token punctuation">,</span><span class="token keyword">int</span> matSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matColSize<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> threshold<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>matSize<span class="token operator">-</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>matColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">calcsum</span><span class="token punctuation">(</span>preMatSums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">+</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>threshold<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maxSideLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> matSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> preMatSums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>matSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>matSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        preMatSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>matColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8BA1\u7B97\u524D\u7F00\u548C</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>matSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>matColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            preMatSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> preMatSums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>preMatSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>preMatSums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>mat<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u4E8C\u5206</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>matSize<span class="token punctuation">,</span>matColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">// check</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>preMatSums<span class="token punctuation">,</span>matSize<span class="token punctuation">,</span>matColSize<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>threshold<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6EE1\u8DB3\u6761\u4EF6\u7684\u5B50\u5E8F\u5217\u6570\u76EE-1498" tabindex="-1"><a class="header-anchor" href="#\u6EE1\u8DB3\u6761\u4EF6\u7684\u5B50\u5E8F\u5217\u6570\u76EE-1498" aria-hidden="true">#</a> \u6EE1\u8DB3\u6761\u4EF6\u7684\u5B50\u5E8F\u5217\u6570\u76EE\uFF081498\uFF09</h2>`,7),bn=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"\u6C42\u6A21\u6280\u5DE7"),n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"a"),n("mo",null,"+"),n("mi",null,"b"),n("mo",{stretchy:"false"},")"),n("mspace"),n("mspace",{width:"1em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null,"\u2009"),n("mtext",null,"\u2009"),n("mi",null,"P"),n("mo",null,"="),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"("),n("mi",null,"a"),n("mspace"),n("mspace",{width:"1em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null,"\u2009"),n("mtext",null,"\u2009"),n("mi",null,"P"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mo",{stretchy:"false"},"("),n("mi",null,"b"),n("mspace"),n("mspace",{width:"1em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null,"\u2009"),n("mtext",null,"\u2009"),n("mi",null,"P"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"]"),n("mspace"),n("mspace",{width:"1em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null,"\u2009"),n("mtext",null,"\u2009"),n("mi",null,"P")]),n("annotation",{encoding:"application/x-tex"},"(a+b)\\mod P=[(a \\mod P)+(b \\mod P)] \\mod P ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mclose"},")"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"1em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"[("),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"1em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"1em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"mclose"},")]"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"1em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P")])])])])]),n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"a"),n("mo",null,"\xD7"),n("mi",null,"b"),n("mo",{stretchy:"false"},")"),n("mspace"),n("mspace",{width:"1em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null,"\u2009"),n("mtext",null,"\u2009"),n("mi",null,"P"),n("mo",null,"="),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"("),n("mi",null,"a"),n("mspace"),n("mspace",{width:"1em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null,"\u2009"),n("mtext",null,"\u2009"),n("mi",null,"P"),n("mo",{stretchy:"false"},")"),n("mo",null,"\xD7"),n("mo",{stretchy:"false"},"("),n("mi",null,"b"),n("mspace"),n("mspace",{width:"1em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null,"\u2009"),n("mtext",null,"\u2009"),n("mi",null,"P"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"]"),n("mspace"),n("mspace",{width:"1em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null,"\u2009"),n("mtext",null,"\u2009"),n("mi",null,"P")]),n("annotation",{encoding:"application/x-tex"},"(a\\times b)\\mod P=[(a \\mod P)\\times(b \\mod P)]\\mod P ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\xD7"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mclose"},")"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"1em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"[("),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"1em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\xD7"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"1em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"mclose"},")]"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"1em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P")])])])])])],-1),yn=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\uFF0C\u53EF\u4EE5\u770B\u9898\u89E3\u5173\u4E8E\u5B50\u5E8F\u5217\u603B\u6570\u95EE\u9898\u7684\u89E3\u91CA</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">numSubseq</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> f<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8BA1\u7B97\u6BCF\u4E2A\u6570\u91CF\u7B49\u7EA7\u7684\u8D21\u732E\u5EA6</span>
    <span class="token comment">// \u4E582\u7684\u539F\u56E0\u662F\u6BCF\u4E2A\u6570\u90FD\u6709\u53EF\u80FD\u51FA\u73B0\u6216\u8005\u4E0D\u51FA\u73B0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            count <span class="token operator">+=</span>f<span class="token punctuation">[</span>right<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            count <span class="token operator">%=</span>MOD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u57FA\u4E8E\u65F6\u95F4\u7684\u952E\u503C\u5B58\u50A8-981" tabindex="-1"><a class="header-anchor" href="#\u57FA\u4E8E\u65F6\u95F4\u7684\u952E\u503C\u5B58\u50A8-981" aria-hidden="true">#</a> \u57FA\u4E8E\u65F6\u95F4\u7684\u952E\u503C\u5B58\u50A8\uFF08981\uFF09</h2>`,2),wn=s("\u5173\u4E8EUT_HASH\u7CFB\u5217\u51FD\u6570\u521D\u59CB\u5316\u65F6\u4F7F\u7528\u5168\u5C40\u904D\u5386\u51FD\u6570\uFF0C\u5F62\u53C2\u65F6\u4EA7\u751F\u7684\u95EE\u9898\uFF1A"),hn={href:"https://blog.csdn.net/fan_h_l/article/details/107241520",target:"_blank",rel:"noopener noreferrer"},fn=s("https://blog.csdn.net/fan_h_l/article/details/107241520"),gn=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>
    <span class="token keyword">int</span> timestamp<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    Node node<span class="token punctuation">[</span><span class="token number">200000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span> TimeMap<span class="token punctuation">;</span>

<span class="token comment">//UT_HASH\u521D\u59CB\u5316\u6700\u597D\u65F6\u5168\u5C40\u53D8\u91CF\uFF0C\u505A\u5F62\u53C2\u4F20\u9012\u4F1A\u6709\u610F\u5916</span>
TimeMap <span class="token operator">*</span>hash <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
TimeMap<span class="token operator">*</span> <span class="token function">timeMapCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TimeMap <span class="token operator">*</span>obj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">timeMapSet</span><span class="token punctuation">(</span>TimeMap<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TimeMap <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_STR</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TimeMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">HASH_ADD_STR</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>tmp<span class="token operator">-&gt;</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>tmp<span class="token operator">-&gt;</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>tmp<span class="token operator">-&gt;</span>num<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">timeMapGet</span><span class="token punctuation">(</span>TimeMap<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TimeMap <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_STR</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4E8C\u5206\u67E5\u627E</span>
    <span class="token keyword">int</span> mid<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">&gt;</span> timestamp<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>tmp<span class="token operator">-&gt;</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">&lt;</span> timestamp<span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>tmp<span class="token operator">-&gt;</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">&lt;</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">&gt;</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">&gt;</span> timestamp<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u8FD9\u6837free\u7684\u5E72\u51C0</span>
<span class="token keyword">void</span> <span class="token function">timeMapFree</span><span class="token punctuation">(</span>TimeMap<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TimeMap <span class="token operator">*</span>cur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    TimeMap <span class="token operator">*</span>tar <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> tar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">HASH_DEL</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8F6C\u53D8\u6570\u7EC4\u540E\u6700\u63A5\u8FD1\u76EE\u6807\u503C\u7684\u6570\u7EC4\u548C-1300" tabindex="-1"><a class="header-anchor" href="#\u8F6C\u53D8\u6570\u7EC4\u540E\u6700\u63A5\u8FD1\u76EE\u6807\u503C\u7684\u6570\u7EC4\u548C-1300" aria-hidden="true">#</a> \u8F6C\u53D8\u6570\u7EC4\u540E\u6700\u63A5\u8FD1\u76EE\u6807\u503C\u7684\u6570\u7EC4\u548C\uFF081300\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E24\u6B21\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">cmpfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> arrSize<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arrSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        ret <span class="token operator">+=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x <span class="token operator">?</span> x <span class="token operator">:</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findBestValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arrSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfun<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u7B97\u524D\u7F00\u548C</span>
    <span class="token keyword">int</span><span class="token operator">*</span> preSums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>arrSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>arrSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        preSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preSums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">[</span>arrSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u6700\u5927\u503C</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6C42\u6BD4mid\u5927\u7684\u6700\u5C0Farr[i]</span>
        <span class="token keyword">int</span> l_b <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arrSize<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u7B97\u6B64\u65F6\u6570\u7EC4\u7684\u548C</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> preSums<span class="token punctuation">[</span>l_b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>arrSize<span class="token operator">-</span>l_b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">&lt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u6CE8\u610F\u4E0B\u9762\u8FD9\u53E5\u8BDD\uFF1A</span>
    <span class="token comment">//\u6570\u7EC4\u7684\u548C\u6700\u63A5\u8FD1  target \uFF08\u6700\u63A5\u8FD1\u8868\u793A\u4E24\u8005\u4E4B\u5DEE\u7684\u7EDD\u5BF9\u503C\u6700\u5C0F\uFF09</span>
    <span class="token comment">//\u4E0D\u4E00\u5B9A\u662F&lt;=  \u4E5F\u53EF\u80FD\u662F&gt;=</span>
    <span class="token keyword">int</span> choose_small <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arrSize<span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> choose_big <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arrSize<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fabs</span><span class="token punctuation">(</span>choose_small <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">fabs</span><span class="token punctuation">(</span>choose_big <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">?</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6709\u754C\u6570\u7EC4\u4E2D\u6307\u5B9A\u4E0B\u6807\u5904\u7684\u6700\u5927\u503C-1802" tabindex="-1"><a class="header-anchor" href="#\u6709\u754C\u6570\u7EC4\u4E2D\u6307\u5B9A\u4E0B\u6807\u5904\u7684\u6700\u5927\u503C-1802" aria-hidden="true">#</a> \u6709\u754C\u6570\u7EC4\u4E2D\u6307\u5B9A\u4E0B\u6807\u5904\u7684\u6700\u5927\u503C\uFF081802\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u6CD5\uFF0C\u4E3B\u8981\u662F\u68AF\u5F62\u9762\u79EF\uFF0C\u4E0D\u8981\u5FD8\u4E86\u5E73\u9762</span>
<span class="token comment">//https://leetcode.cn/problems/maximum-value-at-a-given-index-in-a-bounded-array/solution/tu-jie-er-fen-fa-qiu-man-zu-tiao-jian-de-ka1f/</span>
<span class="token comment">//\u7B97\u68AF\u5F62\u9762\u79EF</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> t<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>t<span class="token operator">-</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSum<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> right <span class="token operator">=</span> maxSum<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// left \u8868\u793A\u5DE6\u4FA7\u659C\u5761\u7684\u5E95\u957F</span>
        <span class="token keyword">int</span> left_bottom <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u659C\u5761\u90E8\u5206</span>
        count <span class="token operator">+=</span> <span class="token function">deal</span><span class="token punctuation">(</span>left_bottom<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5E73\u5730\u90E8\u5206</span>
        count <span class="token operator">+=</span> <span class="token punctuation">(</span>index<span class="token operator">-</span>left_bottom<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> right_bottom <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>n<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u659C\u5761\u90E8\u5206</span>
        count <span class="token operator">+=</span> <span class="token function">deal</span><span class="token punctuation">(</span>right_bottom<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5E73\u5730\u90E8\u5206</span>
        count <span class="token operator">+=</span> n <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> right_bottom<span class="token punctuation">;</span>
        <span class="token comment">//\u5CF0\u70B9</span>
        count <span class="token operator">+=</span>mid<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&lt;=</span>maxSum<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans <span class="token operator">=</span>mid<span class="token punctuation">;</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSum<span class="token punctuation">)</span><span class="token punctuation">{</span>
    ll left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ll right <span class="token operator">=</span> maxSum<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ll mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        ll S <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5DE6\u659C\u5761</span>
        S<span class="token operator">+=</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token function">fmin</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">fmin</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5E73\u5730\u90E8\u5206</span>
        S<span class="token operator">+=</span>index<span class="token operator">-</span><span class="token function">fmin</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u4E2D\u95F4</span>
        S<span class="token operator">+=</span>mid<span class="token punctuation">;</span>
        <span class="token comment">//\u53F3\u659C\u5761</span>
        S<span class="token operator">+=</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token function">fmin</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">fmin</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5E73\u5730\u90E8\u5206</span>
        S<span class="token operator">+=</span>n<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token function">fmin</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">&lt;=</span>maxSum<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5BFB\u627E\u5CF0\u503C-ii-1901" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u5CF0\u503C-ii-1901" aria-hidden="true">#</a> \u5BFB\u627E\u5CF0\u503C II\uFF081901\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u77E9\u9635\u4E8C\u5206\u5207\u7247\u6CD5</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">getColMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> matSize<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> matSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            index <span class="token operator">=</span> i<span class="token punctuation">;</span>
            max <span class="token operator">=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">;</span>
    tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">findPeakGrid</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> matSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> matColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token function">getColMax</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span>matSize<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//\u8FD9\u91CC\u662F\u4E3A\u4E86mid\u9632\u6B62\u8D8A\u754C</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&gt;</span> mat<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> maxIndex<span class="token punctuation">,</span>
                ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> 
                left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> max <span class="token operator">&amp;&amp;</span> max <span class="token operator">&gt;</span> mat<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> maxIndex<span class="token punctuation">;</span>
                ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> max <span class="token operator">&amp;&amp;</span> max <span class="token operator">&lt;</span> mat<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> 
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
    <span class="token punctuation">}</span>
    ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getColMax</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span> matSize<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10);function Sn(xn,zn){const p=c("RouterLink"),o=c("ExternalLinkIcon");return i(),u("div",null,[k,d,n("nav",m,[n("ul",null,[n("li",null,[a(p,{to:"#c\u8BED\u8A00\u4E8C\u7EF4\u6570\u7EC4\u4F20\u53C2\u7684\u683C\u5F0F"},{default:t(()=>[v]),_:1})]),n("li",null,[a(p,{to:"#\u53D8\u91CF\u8303\u56F4"},{default:t(()=>[b]),_:1})]),n("li",null,[a(p,{to:"#\u731C\u6570\u5B57\u5927\u5C0F-374"},{default:t(()=>[y]),_:1})]),n("li",null,[a(p,{to:"#\u5C71\u8109\u6570\u7EC4\u7684\u5CF0\u9876\u7D22\u5F15-852"},{default:t(()=>[w]),_:1})]),n("li",null,[a(p,{to:"#\u6709\u6548\u7684\u5B8C\u5168\u5E73\u65B9\u6570-367"},{default:t(()=>[h]),_:1})]),n("li",null,[a(p,{to:"#\u4E24\u4E2A\u6570\u7EC4\u95F4\u7684\u8DDD\u79BB\u503C-1385"},{default:t(()=>[f]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u6BD4\u76EE\u6807\u5B57\u6BCD\u5927\u7684\u6700\u5C0F\u5B57\u6BCD-744"},{default:t(()=>[g]),_:1})]),n("li",null,[a(p,{to:"#\u6392\u5217\u786C\u5E01-441"},{default:t(()=>[S]),_:1})]),n("li",null,[a(p,{to:"#\u7B2C-k-\u4E2A\u7F3A\u5931\u7684\u6B63\u6574\u6570-1539"},{default:t(()=>[x]),_:1})]),n("li",null,[a(p,{to:"#\u7279\u6B8A\u6570\u7EC4\u7684\u7279\u5F81\u503C-1608"},{default:t(()=>[z]),_:1})]),n("li",null,[a(p,{to:"#\u7EDF\u8BA1\u6709\u5E8F\u77E9\u9635\u4E2D\u7684\u8D1F\u6570-1351"},{default:t(()=>[_]),_:1})]),n("li",null,[a(p,{to:"#\u77E9\u9635\u4E2D\u6218\u6597\u529B\u6700\u5F31\u7684-k-\u884C-1337"},{default:t(()=>[j]),_:1})]),n("li",null,[a(p,{to:"#\u68C0\u67E5\u6574\u6570\u53CA\u5176\u4E24\u500D\u6570\u662F\u5426\u5B58\u5728-1346"},{default:t(()=>[M]),_:1})]),n("li",null,[a(p,{to:"#\u5E73\u65B9\u6570\u4E4B\u548C-633"},{default:t(()=>[P]),_:1})]),n("li",null,[a(p,{to:"#\u4E24\u4E2A\u6570\u7EC4\u7684\u4EA4\u96C6-ii-350"},{default:t(()=>[q]),_:1})]),n("li",null,[a(p,{to:"#\u4E0B\u6807\u5BF9\u4E2D\u7684\u6700\u5927\u8DDD\u79BB-1855"},{default:t(()=>[N]),_:1})]),n("li",null,[a(p,{to:"#\u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4-209"},{default:t(()=>[I]),_:1})]),n("li",null,[a(p,{to:"#\u6709\u6548\u4E09\u89D2\u5F62\u7684\u4E2A\u6570-611"},{default:t(()=>[D]),_:1})]),n("li",null,[a(p,{to:"#\u627E\u5230-k-\u4E2A\u6700\u63A5\u8FD1\u7684\u5143\u7D20-658"},{default:t(()=>[L]),_:1})]),n("li",null,[a(p,{to:"#\u888B\u5B50\u91CC\u6700\u5C11\u6570\u76EE\u7684\u7403-1760"},{default:t(()=>[C]),_:1})]),n("li",null,[a(p,{to:"#\u627E\u5230\u9700\u8981\u8865\u5145\u7C89\u7B14\u7684\u5B66\u751F\u7F16\u53F7-1894"},{default:t(()=>[T]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217-300"},{default:t(()=>[A]),_:1})]),n("li",null,[a(p,{to:"#\u7231\u5403\u9999\u8549\u7684\u73C2\u73C2-875"},{default:t(()=>[O]),_:1})]),n("li",null,[a(p,{to:"#\u4E24\u7403\u4E4B\u95F4\u7684\u78C1\u529B-1552"},{default:t(()=>[K]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u91CD\u590D\u6570-287"},{default:t(()=>[H]),_:1})]),n("li",null,[a(p,{to:"#\u4F7F\u7ED3\u679C\u4E0D\u8D85\u8FC7\u9608\u503C\u7684\u6700\u5C0F\u9664\u6570-1283"},{default:t(()=>[B]),_:1})]),n("li",null,[a(p,{to:"#\u5224\u65AD\u5B50\u5E8F\u5217-392"},{default:t(()=>[R]),_:1})]),n("li",null,[a(p,{to:"#\u53EF\u79FB\u9664\u5B57\u7B26\u7684\u6700\u5927\u6570\u76EE-1898"},{default:t(()=>[U]),_:1})]),n("li",null,[a(p,{to:"#\u51C6\u65F6\u5230\u8FBE\u7684\u5217\u8F66\u6700\u5C0F\u65F6\u901F-1870"},{default:t(()=>[E]),_:1})]),n("li",null,[a(p,{to:"#\u5236\u4F5C-m-\u675F\u82B1\u6240\u9700\u7684\u6700\u5C11\u5929\u6570-1482"},{default:t(()=>[V]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u9AD8\u9891\u5143\u7D20\u7684\u9891\u6570-1838"},{default:t(()=>[F]),_:1})]),n("li",null,[a(p,{to:"#\u6709\u5E8F\u6570\u7EC4\u4E2D\u7684\u5355\u4E00\u5143\u7D20-540"},{default:t(()=>[G]),_:1})]),n("li",null,[a(p,{to:"#\u5C06\u6570\u7EC4\u5206\u6210\u4E09\u4E2A\u5B50\u6570\u7EC4\u7684\u65B9\u6848\u6570-1712"},{default:t(()=>[X]),_:1})]),n("li",null,[a(p,{to:"#\u7EDD\u5BF9\u5DEE\u503C\u548C-1818"},{default:t(()=>[W]),_:1})]),n("li",null,[a(p,{to:"#\u5B89\u6392\u5DE5\u4F5C\u4EE5\u8FBE\u5230\u6700\u5927\u6536\u76CA-826"},{default:t(()=>[J]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u53F3\u533A\u95F4-436"},{default:t(()=>[Q]),_:1})]),n("li",null,[a(p,{to:"#\u6309\u6743\u91CD\u968F\u673A\u9009\u62E9-528"},{default:t(()=>[Y]),_:1})]),n("li",null,[a(p,{to:"#\u6709\u5E8F\u77E9\u9635\u4E2D\u7B2C-k-\u5C0F\u7684\u5143\u7D20-378"},{default:t(()=>[Z]),_:1})]),n("li",null,[a(p,{to:"#\u5B50\u6570\u7EC4\u548C\u6392\u5E8F\u540E\u7684\u533A\u95F4\u548C-1508"},{default:t(()=>[$]),_:1})]),n("li",null,[a(p,{to:"#\u5220\u9664\u6700\u77ED\u7684\u5B50\u6570\u7EC4\u4F7F\u5269\u4F59\u6570\u7EC4\u6709\u5E8F-1574"},{default:t(()=>[nn]),_:1})]),n("li",null,[a(p,{to:"#\u5143\u7D20\u548C\u5C0F\u4E8E\u7B49\u4E8E\u9608\u503C\u7684\u6B63\u65B9\u5F62\u7684\u6700\u5927\u8FB9\u957F-1292"},{default:t(()=>[sn]),_:1})]),n("li",null,[a(p,{to:"#\u6EE1\u8DB3\u6761\u4EF6\u7684\u5B50\u5E8F\u5217\u6570\u76EE-1498"},{default:t(()=>[an]),_:1})]),n("li",null,[a(p,{to:"#\u57FA\u4E8E\u65F6\u95F4\u7684\u952E\u503C\u5B58\u50A8-981"},{default:t(()=>[pn]),_:1})]),n("li",null,[a(p,{to:"#\u8F6C\u53D8\u6570\u7EC4\u540E\u6700\u63A5\u8FD1\u76EE\u6807\u503C\u7684\u6570\u7EC4\u548C-1300"},{default:t(()=>[tn]),_:1})]),n("li",null,[a(p,{to:"#\u6709\u754C\u6570\u7EC4\u4E2D\u6307\u5B9A\u4E0B\u6807\u5904\u7684\u6700\u5927\u503C-1802"},{default:t(()=>[en]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u5CF0\u503C-ii-1901"},{default:t(()=>[on]),_:1})]),n("li",null,[a(p,{to:"#"})])])]),cn,ln,un,rn,kn,n("p",null,[n("a",dn,[mn,a(o)])]),vn,bn,yn,n("p",null,[wn,n("a",hn,[fn,a(o)])]),gn])}var jn=l(r,[["render",Sn],["__file","page23.html.vue"]]);export{jn as default};
