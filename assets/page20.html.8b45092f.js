import{_ as l,r as c,o as i,c as u,b as n,e as a,w as t,d as s,a as e}from"./app.b33ca31f.js";const r={},k=n("h1",{id:"\u5251\u6307offer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5251\u6307offer","aria-hidden":"true"},"#"),s(" \u5251\u6307Offer")],-1),d=n("hr",null,null,-1),v={class:"table-of-contents"},m=s("\u5251\u6307 Offer 09. \u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217"),b=s("\u5251\u6307 Offer 30. \u5305\u542Bmin\u51FD\u6570\u7684\u6808||\u6700\u5C0F\u6808\uFF08155\uFF09"),f=s("\u5251\u6307 Offer 06. \u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868"),y=s("\u5251\u6307 Offer 24. \u53CD\u8F6C\u94FE\u8868"),w=s("\u5251\u6307 Offer 05. \u66FF\u6362\u7A7A\u683C"),h=s("\u5251\u6307 Offer 58 - II. \u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32"),g=s("\u5251\u6307 Offer 03. \u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57"),x=s("\u5251\u6307 Offer 53 - I. \u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u6570\u5B57 I"),_=s("\u5251\u6307 Offer 53 - II. 0\uFF5En-1\u4E2D\u7F3A\u5931\u7684\u6570\u5B57"),S=s("\u5251\u6307 Offer 04. \u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E"),N=s("\u5251\u6307 Offer 50. \u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26"),z=s("\u5251\u6307 Offer 32 - I. \u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811"),L=s("\u5251\u6307 Offer 32 - II. \u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811 II"),j=s("\u5251\u6307 Offer 32 - III. \u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811 III"),T=s("\u5251\u6307 Offer 26. \u6811\u7684\u5B50\u7ED3\u6784"),A=s("\u5251\u6307 Offer 27. \u4E8C\u53C9\u6811\u7684\u955C\u50CF"),I=s("\u5251\u6307 Offer 28. \u5BF9\u79F0\u7684\u4E8C\u53C9\u6811"),q=s("\u5251\u6307 Offer 10- I. \u6590\u6CE2\u90A3\u5951\u6570\u5217"),E=s("\u5251\u6307 Offer 10- II. \u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898"),O=s("\u5251\u6307 Offer 63. \u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6\uFF08121\uFF09"),H=s("\u5251\u6307 Offer 42. \u8FDE\u7EED\u5B50\u6570\u7EC4\u7684\u6700\u5927\u548C\uFF0853\uFF09"),M=s("\u5251\u6307 Offer 47. \u793C\u7269\u7684\u6700\u5927\u4EF7\u503C"),C=s("\u5251\u6307 Offer 46. \u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32"),U=s("\u5251\u6307 Offer 48. \u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32"),B=s("\u5251\u6307 Offer 18. \u5220\u9664\u94FE\u8868\u7684\u8282\u70B9"),R=s("\u5251\u6307 Offer 22. \u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9"),X=s("\u5251\u6307 Offer 52. \u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9\uFF08160\uFF09"),F=s("\u5251\u6307 Offer 25. \u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868"),P=s("\u5251\u6307 Offer 21. \u8C03\u6574\u6570\u7EC4\u987A\u5E8F\u4F7F\u5947\u6570\u4F4D\u4E8E\u5076\u6570\u524D\u9762"),D=s("\u5251\u6307 Offer 57. \u548C\u4E3As\u7684\u4E24\u4E2A\u6570\u5B57"),Q=s("\u5251\u6307 Offer 58 - I. \u7FFB\u8F6C\u5355\u8BCD\u987A\u5E8F"),G=s("\u5251\u6307 Offer 12. \u77E9\u9635\u4E2D\u7684\u8DEF\u5F84\uFF0879\uFF09"),Z=s("\u5251\u6307 Offer 13. \u673A\u5668\u4EBA\u7684\u8FD0\u52A8\u8303\u56F4"),W=s("\u5251\u6307 Offer 34. \u4E8C\u53C9\u6811\u4E2D\u548C\u4E3A\u67D0\u4E00\u503C\u7684\u8DEF\u5F84\uFF08113\uFF09"),V=s("\u5251\u6307 Offer 54. \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7B2Ck\u5927\u8282\u70B9"),Y=s("\u5251\u6307 Offer 45. \u628A\u6570\u7EC4\u6392\u6210\u6700\u5C0F\u7684\u6570"),K=s("\u5251\u6307 Offer 61. \u6251\u514B\u724C\u4E2D\u7684\u987A\u5B50"),J=s("\u5251\u6307 Offer 40. \u6700\u5C0F\u7684k\u4E2A\u6570"),$=s("\u5251\u6307 Offer 55 - I. \u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6\uFF08104\uFF09"),nn=s("\u5251\u6307 Offer 55 - II. \u5E73\u8861\u4E8C\u53C9\u6811\uFF08110\uFF09"),sn=s("\u5251\u6307 Offer 64. \u6C421+2+\u2026+n"),an=s("\u5251\u6307 Offer 68 - I. \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\uFF08235\uFF09"),pn=s("\u5251\u6307 Offer 68 - II. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\uFF08236\uFF09"),tn=s("\u5251\u6307 Offer 07. \u91CD\u5EFA\u4E8C\u53C9\u6811"),en=s("\u5251\u6307 Offer 16. \u6570\u503C\u7684\u6574\u6570\u6B21\u65B9\uFF0850\uFF09"),on=s("\u5251\u6307 Offer 33. \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u5E8F\u5217"),cn=s("\u5251\u6307 Offer 15. \u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570\uFF08191\uFF09"),ln=s("\u5251\u6307 Offer 65. \u4E0D\u7528\u52A0\u51CF\u4E58\u9664\u505A\u52A0\u6CD5"),un=s("\u5251\u6307 Offer 56 - I. \u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570"),rn=s("\u5251\u6307 Offer 56 - II. \u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570 II\uFF08137\uFF09"),kn=s("\u5251\u6307 Offer 39. \u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u7684\u6570\u5B57\uFF08169\uFF09"),dn=s("\u5251\u6307 Offer 66. \u6784\u5EFA\u4E58\u79EF\u6570\u7EC4"),vn=s("\u5251\u6307 Offer 14- I. \u526A\u7EF3\u5B50\uFF08343\uFF09"),mn=s("\u5251\u6307 Offer 57 - II. \u548C\u4E3As\u7684\u8FDE\u7EED\u6B63\u6570\u5E8F\u5217"),bn=s("\u5251\u6307 Offer 62. \u5706\u5708\u4E2D\u6700\u540E\u5269\u4E0B\u7684\u6570\u5B57"),fn=s("\u5251\u6307 Offer 29. \u987A\u65F6\u9488\u6253\u5370\u77E9\u9635\uFF0854\uFF09"),yn=s("\u5251\u6307 Offer 31. \u6808\u7684\u538B\u5165\u3001\u5F39\u51FA\u5E8F\u5217\uFF08946\uFF09"),wn=s("\u5251\u6307 Offer 20. \u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32"),hn=s("\u5251\u6307 Offer 67. \u628A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6574\u6570\uFF088\uFF09"),gn=s("\u5251\u6307 Offer 59 - I. \u6ED1\u52A8\u7A97\u53E3\u7684\u6700\u5927\u503C\uFF08239\uFF09"),xn=s("\u5251\u6307 Offer 59 - II. \u961F\u5217\u7684\u6700\u5927\u503C"),_n=s("\u5251\u6307 Offer 37. \u5E8F\u5217\u5316\u4E8C\u53C9\u6811\uFF08297\uFF09"),Sn=s("\u5251\u6307 Offer 38. \u5B57\u7B26\u4E32\u7684\u6392\u5217"),Nn=s("\u5251\u6307 Offer 19. \u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\uFF0810\uFF09"),zn=s("\u5251\u6307 Offer 49. \u4E11\u6570\uFF08246\uFF09"),Ln=s("\u5251\u6307 Offer 60. n\u4E2A\u9AB0\u5B50\u7684\u70B9\u6570"),jn=s("\u5251\u6307 Offer 17. \u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570"),Tn=s("\u5251\u6307 Offer 51. \u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9"),An=s("\u5251\u6307 Offer 14- II. \u526A\u7EF3\u5B50 II\uFF08343\uFF09"),In=s("\u5251\u6307 Offer 43. 1\uFF5En \u6574\u6570\u4E2D 1 \u51FA\u73B0\u7684\u6B21\u6570\uFF08233\uFF09"),qn=s("\u5251\u6307 Offer 44. \u6570\u5B57\u5E8F\u5217\u4E2D\u67D0\u4E00\u4F4D\u7684\u6570\u5B57\uFF08400\uFF09"),En=s("\u5251\u6307 Offer 36. \u4E8C\u53C9\u641C\u7D22\u6811\u4E0E\u53CC\u5411\u94FE\u8868"),On=s("\u5251\u6307 Offer 35. \u590D\u6742\u94FE\u8868\u7684\u590D\u5236\uFF08138\uFF09"),Hn=s("\u5251\u6307 Offer 41. \u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570\uFF08295\uFF09"),Mn=s("\u5173\u4E8E\u4F18\u5148\u961F\u5217\uFF08\u5806\uFF09"),Cn=e(`<h2 id="\u5251\u6307-offer-09-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-09-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217" aria-hidden="true">#</a> \u5251\u6307 Offer 09. \u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u64CD\u4F5C\u5F88\u7B80\u5355\uFF0C\u4F46\u9700\u8981\u719F\u6089</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>stk<span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkCapactity<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Stack<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Stack<span class="token operator">*</span> stk_in<span class="token punctuation">;</span>
    Stack<span class="token operator">*</span> stk_out<span class="token punctuation">;</span>
<span class="token punctuation">}</span> CQueue<span class="token punctuation">;</span>

Stack<span class="token operator">*</span> <span class="token function">StackCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span> Capactity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Stack<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>stk <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>Capactity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>stkSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>stkCapactity <span class="token operator">=</span> Capactity<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

CQueue<span class="token operator">*</span> <span class="token function">cQueueCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CQueue<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>stk_in <span class="token operator">=</span> <span class="token function">StackCreate</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>stk_out <span class="token operator">=</span> <span class="token function">StackCreate</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">stk_Push</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> obj<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    obj<span class="token operator">-&gt;</span>stk<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">stk_Pop</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    obj<span class="token operator">-&gt;</span>stkSize<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">stk_Top</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>stk<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">is_stk_Empty</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>stkSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">stk_free</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">in2out</span><span class="token punctuation">(</span>CQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_stk_Empty</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_in<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">stk_Push</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_out<span class="token punctuation">,</span><span class="token function">stk_Top</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">stk_Pop</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">cQueueAppendTail</span><span class="token punctuation">(</span>CQueue<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">stk_Push</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_in<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cQueueDeleteHead</span><span class="token punctuation">(</span>CQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_stk_Empty</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_out<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_stk_Empty</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_in<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">in2out</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">stk_Top</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">stk_Pop</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">cQueueFree</span><span class="token punctuation">(</span>CQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">stk_free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">stk_free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk_out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj <span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5176\u4ED6\u4EBA\u7684\u89E3</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_QUEUE_SIZE</span>  <span class="token expression"><span class="token number">10000</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>stackA<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>stackB<span class="token punctuation">;</span>
    <span class="token keyword">int</span> topA<span class="token punctuation">;</span>
    <span class="token keyword">int</span> topB<span class="token punctuation">;</span>
<span class="token punctuation">}</span> CQueue<span class="token punctuation">;</span>


CQueue<span class="token operator">*</span> <span class="token function">cQueueCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CQueue <span class="token operator">*</span>cq<span class="token punctuation">;</span>
    cq <span class="token operator">=</span> <span class="token punctuation">(</span>CQueue<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cq <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    cq<span class="token operator">-&gt;</span>stackA <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MAX_QUEUE_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cq<span class="token operator">-&gt;</span>stackA <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>cq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cq<span class="token operator">-&gt;</span>topA <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    cq<span class="token operator">-&gt;</span>stackB <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MAX_QUEUE_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cq<span class="token operator">-&gt;</span>stackB <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>cq<span class="token operator">-&gt;</span>stackA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>cq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cq<span class="token operator">-&gt;</span>topB <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cq<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">cQueueAppendTail</span><span class="token punctuation">(</span>CQueue<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* \u5C06\u65B0\u5165\u961F\u7684\u5143\u7D20\u538B\u5165\u6808A */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>topA <span class="token operator">!=</span> MAX_QUEUE_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token operator">-&gt;</span>stackA<span class="token punctuation">[</span><span class="token operator">++</span>obj<span class="token operator">-&gt;</span>topA<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cQueueDeleteHead</span><span class="token punctuation">(</span>CQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> topBEelm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> topAElem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">/* \u5982\u679C\u6808B\u4E0D\u4E3A\u7A7A\uFF0C\u5C06\u5728B\u6808\u9876\u7684\u5143\u7D20\u51FA\u961F */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>topB <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        topBEelm <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>stackB<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>topB<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> topBEelm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">/* \u5982\u679C\u6808B\u4E3A\u7A7A\uFF0C\u4E14\u6808A\u4E0D\u4E3A\u7A7A\uFF0C\u5C06\u6808A\u4E2D\u6240\u6709\u7684\u5143\u7D20\u538B\u5165\u6808B */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>topB <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> obj<span class="token operator">-&gt;</span>topA <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>topA <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            topAElem <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>stackA<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>topA<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            obj<span class="token operator">-&gt;</span>stackB<span class="token punctuation">[</span><span class="token operator">++</span>obj<span class="token operator">-&gt;</span>topB<span class="token punctuation">]</span> <span class="token operator">=</span> topAElem<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">/* \u6808B\u4E0D\u4E3A\u7A7A\uFF0C\u5C06\u5728B\u6808\u9876\u7684\u5143\u7D20\u51FA\u961F  */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>topB <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        topBEelm <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>stackB<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>topB<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> topBEelm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">cQueueFree</span><span class="token punctuation">(</span>CQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stackA <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stackA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stackB <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stackB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-30-\u5305\u542Bmin\u51FD\u6570\u7684\u6808-\u6700\u5C0F\u6808-155" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-30-\u5305\u542Bmin\u51FD\u6570\u7684\u6808-\u6700\u5C0F\u6808-155" aria-hidden="true">#</a> \u5251\u6307 Offer 30. \u5305\u542Bmin\u51FD\u6570\u7684\u6808||\u6700\u5C0F\u6808\uFF08155\uFF09</h2><p>\u8FD9\u9898\u8FD8\u6709\u4E00\u79CD\u65B9\u6CD5\u662F\u5355\u8C03\u961F\u5217\uFF0C\u65B9\u6CD5\u540COffer 59</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">10001</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stk<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> min_stk<span class="token punctuation">;</span>
    <span class="token keyword">int</span> min<span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span> MinStack<span class="token punctuation">;</span>

<span class="token comment">/** initialize your data structure here. */</span>

MinStack<span class="token operator">*</span> <span class="token function">minStackCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MinStack<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MinStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>stk <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>min_stk <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>stkSize <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    ret<span class="token operator">-&gt;</span>min <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">minStackPush</span><span class="token punctuation">(</span>MinStack<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token operator">-&gt;</span>stk<span class="token punctuation">[</span><span class="token operator">++</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>min<span class="token operator">&gt;</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        obj<span class="token operator">-&gt;</span>min <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    obj<span class="token operator">-&gt;</span>min_stk<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">minStackPop</span><span class="token punctuation">(</span>MinStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">--</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token operator">-&gt;</span>min <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8BB0\u5F97\u6807\u5FD7\u4F4D\u4E5F\u8981\u56DE\u6EAF</span>
    obj<span class="token operator">-&gt;</span>min <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>min_stk<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">minStackTop</span><span class="token punctuation">(</span>MinStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>stk<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">minStackMin</span><span class="token punctuation">(</span>MinStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>min_stk<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>stkSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">minStackFree</span><span class="token punctuation">(</span>MinStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>stk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>min_stk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-06-\u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-06-\u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868" aria-hidden="true">#</a> \u5251\u6307 Offer 06. \u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7B80\u5355\u9898\u94FE\u8868\u7FFB\u8F6C</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> numSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        numSize<span class="token operator">++</span><span class="token punctuation">;</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">=</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token operator">=</span>numSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> stack<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span>tmp<span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-24-\u53CD\u8F6C\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-24-\u53CD\u8F6C\u94FE\u8868" aria-hidden="true">#</a> \u5251\u6307 Offer 24. \u53CD\u8F6C\u94FE\u8868</h2>`,9),Un=n("p",null,[s("\u5728\u904D\u5386\u94FE\u8868\u65F6\uFF0C\u5C06\u5F53\u524D\u8282\u70B9\u7684 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"next")]),n("annotation",{encoding:"application/x-tex"},"\\textit{next}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6151em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"next")])])])]),s(" \u6307\u9488\u6539\u4E3A\u6307\u5411\u524D\u4E00\u4E2A\u8282\u70B9\u3002\u7531\u4E8E\u8282\u70B9\u6CA1\u6709\u5F15\u7528\u5176\u524D\u4E00\u4E2A\u8282\u70B9\uFF0C\u56E0\u6B64\u5FC5\u987B\u4E8B\u5148\u5B58\u50A8\u5176\u524D\u4E00\u4E2A\u8282\u70B9\u3002\u5728\u66F4\u6539\u5F15\u7528\u4E4B\u524D\uFF0C\u8FD8\u9700\u8981\u5B58\u50A8\u540E\u4E00\u4E2A\u8282\u70B9\u3002\u6700\u540E\u8FD4\u56DE\u65B0\u7684\u5934\u5F15\u7528\u3002")],-1),Bn=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u904D\u5386</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> next <span class="token operator">=</span> curr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        curr<span class="token operator">-&gt;</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>
        curr <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4EE4F(node)\u4E3A\u95EE\u9898:\u53CD\u8F6C\u4EE5node\u4E3A\u5934\u8282\u70B9\u7684\u5355\u5411\u94FE\u8868\uFF1B \u4E00\u822C\uFF0C\u6211\u4EEC\u9700\u8981\u8003\u8651F(n)\u548CF(n-1)\u7684\u5173\u7CFB\uFF0C\u90A3\u4E48\u8FD9\u91CC\uFF0C\u5982\u679Cn\u4EE3\u8868\u4EE5node\u4E3A\u5934\u8282\u70B9\u7684\u5355\u5411\u94FE\u8868\uFF0C\u90A3\u4E48n-1\u5C31\u4EE3\u8868\u4EE5node.next\u4E3A\u5934\u8282\u70B9\u7684\u5355\u5411\u94FE\u8868. \u6240\u4EE5\uFF0C\u6211\u4EEC\u4EE4F(node.next)\u4E3A\u95EE\u9898\uFF1A\u53CD\u8F6C\u4EE5node.next\u4E3A\u5934\u8282\u70B9\u7684\u5355\u5411\u94FE\u8868\uFF1B \u90A3\u4E48\uFF0CF(node)\u548CF(node.next)\u4E4B\u95F4\u7684\u5173\u7CFB\u662F\uFF1F\u8FD9\u91CC\u6211\u4EEC\u6765\u7B80\u5355\u753B\u4E2A\u56FE\uFF0C\u5047\u8BBE\u6211\u4EEC\u53CD\u8F6C3\u4E2A\u8282\u70B9\u7684\u94FE\u8868\uFF1A 1 -&gt; 2 -&gt; 3 \u90A3\u4E48\uFF0CF(node=1)=F(node=2)+? \u8FD9\u91CC\u5047\u8BBE\u5B50\u95EE\u9898F(node=2)\u5DF2\u7ECF\u89E3\u51B3\uFF0C\u90A3\u4E48\u6211\u4EEC\u5982\u4F55\u89E3\u51B3F(node=1)\uFF1A \u5F88\u660E\u663E\uFF0C\u6211\u4EEC\u9700\u8981\u53CD\u8F6Cnode=2\u548Cnode=1\uFF0C \u5373 node.next.next=node; \u540C\u65F6 node.next=null; \u6240\u4EE5\uFF0C\u8FD9\u4E2A\u95EE\u9898\u5C31\u53EF\u4EE5\u662F\uFF1AF(node=1)=F(node=2)+ \u53CD\u8F6Cnode=2\u548Cnode=1</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//\u7EC8\u6B62\u6761\u4EF6\u5E76\u4E0D\u96BE\u60F3</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> node <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>  <span class="token comment">//\u6309\u4E0A\u9762\u7684\u4F8B\u5B50\uFF0CF(node=1)\u548CF(node=2)\u5B83\u4FE9\u53CD\u8F6C\u540E\u7684\u5934\u8282\u70B9\u662F\u540C\u4E00\u4E2A</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Rn=s("\u56FE\u89E3\uFF1A"),Xn={href:"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/jian-zhi-offer-24-fan-zhuan-lian-biao-die-dai-di-2/",target:"_blank",rel:"noopener noreferrer"},Fn=s("https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/jian-zhi-offer-24-fan-zhuan-lian-biao-die-dai-di-2/"),Pn=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53E6\u4E00\u79CD\u9012\u5F52</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pre<span class="token punctuation">;</span>        <span class="token comment">// \u7EC8\u6B62\u6761\u4EF6</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52\u540E\u7EE7\u8282\u70B9</span>
    cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>                       <span class="token comment">// \u4FEE\u6539\u8282\u70B9\u5F15\u7528\u6307\u5411</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>                            <span class="token comment">// \u8FD4\u56DE\u53CD\u8F6C\u94FE\u8868\u7684\u5934\u8282\u70B9</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// \u8C03\u7528\u9012\u5F52\u5E76\u8FD4\u56DE</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-05-\u66FF\u6362\u7A7A\u683C" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-05-\u66FF\u6362\u7A7A\u683C" aria-hidden="true">#</a> \u5251\u6307 Offer 05. \u66FF\u6362\u7A7A\u683C</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token comment">//\u5148\u6269\u5BB9\uFF0C\u518D\u53CC\u6307\u9488\u7EDF\u8BA1</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> newLen <span class="token operator">=</span> len <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> count<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> newLen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//\u8FD9\u91CC\u53CC\u6307\u9488for\u5FAA\u73AF\u7528\u7684\u5999\u554A</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;%&#39;</span><span class="token punctuation">;</span>
            result<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">;</span>
            result<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    result<span class="token punctuation">[</span>newLen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-58-ii-\u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-58-ii-\u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5251\u6307 Offer 58 - II. \u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5F88\u7B80\u5355\u7684\u53CC\u6307\u9488</span>
<span class="token keyword">void</span> <span class="token function">reversstr</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u7FFB\u8F6C\u5DE6\u8FB9</span>
    <span class="token function">reversstr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u7FFB\u8F6C\u53F3\u8FB9</span>
    <span class="token function">reversstr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">,</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u6574\u4F53\u7FFB\u8F6C</span>
    <span class="token function">reversstr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-03-\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-03-\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57" aria-hidden="true">#</a> \u5251\u6307 Offer 03. \u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57</h2><p>\u6B64\u9898\u4E0E\uFF08287\uFF09\u540C\uFF0C\u8FD8\u6709\u5224\u5708\u6CD5\u3001\u53CC\u6307\u9488\u6CD5</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// O(n*n)</span>
bool <span class="token function">isInHash</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> hash<span class="token punctuation">,</span><span class="token keyword">int</span> hashSize<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>hashSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isInHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span>j<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            hash<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//O(n)</span>
<span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-53-i-\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u6570\u5B57-i" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-53-i-\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u6570\u5B57-i" aria-hidden="true">#</a> \u5251\u6307 Offer 53 - I. \u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u6570\u5B57 I</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u67E5\u5DE6\u53F3\u8FB9\u754C</span>
<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u67E5\u5DE6\u53F3\u8FB9\u754C\u7684\u533A\u522B\u5728\u8FD9\u91CC</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8BB0\u5F97\u8FDB\u884C\u8D8A\u754C\u5224\u65AD</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> numsSize <span class="token operator">||</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">right_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u67E5\u5DE6\u53F3\u8FB9\u754C\u7684\u533A\u522B\u5728\u8FD9\u91CC</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8BB0\u5F97\u8FDB\u884C\u8D8A\u754C\u5224\u65AD</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">left_bound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span>  target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">right_bound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span>  target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-53-ii-0-n-1\u4E2D\u7F3A\u5931\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-53-ii-0-n-1\u4E2D\u7F3A\u5931\u7684\u6570\u5B57" aria-hidden="true">#</a> \u5251\u6307 Offer 53 - II. 0\uFF5En-1\u4E2D\u7F3A\u5931\u7684\u6570\u5B57</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4F4D\u8FD0\u7B97</span>
<span class="token comment">//\u5F02\u6216</span>
<span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> xor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        xor <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        xor <span class="token operator">^=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> xor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5224\u65AD\u4E0B\u6807</span>
<span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> numsSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206</span>
<span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-04-\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-04-\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E" aria-hidden="true">#</a> \u5251\u6307 Offer 04. \u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u6CD5</span>
bool <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>matrixSize<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> matrixSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-50-\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-50-\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26" aria-hidden="true">#</a> \u5251\u6307 Offer 50. \u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u54C8\u5E0C\u8868</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">hashTable</span>
<span class="token punctuation">{</span>   
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span> HashTable<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    HashTable<span class="token operator">*</span> frequency <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//\u521B\u5EFA\u54C8\u5E0C\u8868</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ikey <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        HashTable<span class="token operator">*</span> tmp<span class="token punctuation">;</span>
        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>frequency<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ikey<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5148\u627E\u540E\u6DFB\u52A0</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>key <span class="token operator">=</span> ikey<span class="token punctuation">;</span>
            tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>frequency<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u6DFB\u52A0</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            tmp<span class="token operator">-&gt;</span>val<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ikey <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">hashTable</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>
        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>frequency<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ikey<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>tmp<span class="token operator">-&gt;</span>val<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-32-i-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-32-i-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u5251\u6307 Offer 32 - I. \u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5C42\u5E8F\u904D\u5386</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">1002</span></span></span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// int ans[MAX_SIZE] = {0};//\u7528\u8FD9\u79CD\u65B9\u6CD5,\u4E0B\u9762ans[(*returnSize)++]\u65E0\u6CD5\u8D4B\u503C</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>MAX_SIZE<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span> que <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>MAX_SIZE<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>tail<span class="token operator">&gt;</span>head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> tmp <span class="token operator">=</span> que<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            que<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            que<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-32-ii-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811-ii" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-32-ii-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811-ii" aria-hidden="true">#</a> \u5251\u6307 Offer 32 - II. \u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811 II</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5173\u952E\u70B9\u5728\u7B97\u5C42\u6570</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">10000</span></span></span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span> que <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>MAX_SIZE<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tail<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>root<span class="token punctuation">;</span><span class="token comment">//push</span>
    <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>tail<span class="token operator">&gt;</span>head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> size<span class="token operator">=</span><span class="token punctuation">(</span>tail<span class="token operator">-</span>head<span class="token operator">+</span>MAX_SIZE<span class="token punctuation">)</span><span class="token operator">%</span>MAX_SIZE<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token operator">=</span>size<span class="token punctuation">;</span>
        ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span>temp<span class="token operator">=</span>que<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//pop</span>
            ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-32-iii-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811-iii" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-32-iii-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811-iii" aria-hidden="true">#</a> \u5251\u6307 Offer 32 - III. \u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811 III</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//z\u5B57\u5F62\u5C42\u5E8F</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">2000</span></span></span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> que<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    bool isOrderLeft <span class="token operator">=</span> true<span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u6BCF\u5C42\u5EFA\u7ACB\u4E00\u4E2A\u53CC\u7AEF\u961F\u5217</span>
        <span class="token keyword">int</span> levelList<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> front <span class="token operator">=</span> N<span class="token punctuation">,</span>rear <span class="token operator">=</span> N<span class="token punctuation">;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> right<span class="token operator">-</span>left<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//\u53CC\u7AEF\u961F\u5217\uFF0C\u5934\u5C3E\u6307\u9488\u4ECE\u4E2D\u95F4\u5F80\u4E24\u8FB9\u8DD1</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>isOrderLeft<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                levelList<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                levelList<span class="token punctuation">[</span><span class="token operator">--</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>rear<span class="token operator">-</span>front<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>rear<span class="token operator">-</span>front<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> levelList<span class="token punctuation">[</span>i<span class="token operator">+</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> rear <span class="token operator">-</span> front<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        isOrderLeft <span class="token operator">=</span> <span class="token operator">!</span>isOrderLeft<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-26-\u6811\u7684\u5B50\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-26-\u6811\u7684\u5B50\u7ED3\u6784" aria-hidden="true">#</a> \u5251\u6307 Offer 26. \u6811\u7684\u5B50\u7ED3\u6784</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7C7B\u4F3C572\uFF0C\u6DF1\u5EA6\u641C\u7D22</span>
bool <span class="token function">compareSubTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> subroot<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u5982\u679Csubroot \u7A7A\u4E86\u90A3\u5C31\u662F\u904D\u5386\u5B8C\u4E86</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>subroot<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token comment">//\u80FD\u5230\u8FD9\u91CC\u8BF4\u660Esubroot\u6CA1\u6709\u7A7A\uFF0C\u4F46\u662Froot\u7A7A\u4E86\u4E3Afalse</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">||</span>root<span class="token operator">-&gt;</span>val<span class="token operator">!=</span>subroot<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">compareSubTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>subroot<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">compareSubTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>subroot<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isSubStructure</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> B<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>A<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>B<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">compareSubTree</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isSubStructure</span><span class="token punctuation">(</span>A<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isSubStructure</span><span class="token punctuation">(</span>A<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-27-\u4E8C\u53C9\u6811\u7684\u955C\u50CF" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-27-\u4E8C\u53C9\u6811\u7684\u955C\u50CF" aria-hidden="true">#</a> \u5251\u6307 Offer 27. \u4E8C\u53C9\u6811\u7684\u955C\u50CF</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u95EE\u9898\u5206\u89E3</span>
<span class="token comment">//\u9012\u5F52\u5230\u5E95\u5C42\u4EA4\u6362\u5DE6\u53F3</span>
<span class="token comment">//\u81EA\u5E95\u5411\u4E0A</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> right <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> left <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>

    <span class="token function">mirrorTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mirrorTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>

    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span>

    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52</span>
<span class="token comment">//\u6BCF\u5230\u4E00\u4E2A\u8282\u70B9\u5C31\u4EA4\u6362\u5DE6\u53F3</span>
<span class="token comment">//z</span>
<span class="token keyword">void</span> <span class="token function">exchangeTreeNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> tmp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> tmp<span class="token punctuation">;</span>

    <span class="token function">exchangeTreeNode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exchangeTreeNode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">exchangeTreeNode</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-28-\u5BF9\u79F0\u7684\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-28-\u5BF9\u79F0\u7684\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u5251\u6307 Offer 28. \u5BF9\u79F0\u7684\u4E8C\u53C9\u6811</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>bool <span class="token function">traversal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">-&gt;</span>val <span class="token operator">!=</span> right<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">traversal</span><span class="token punctuation">(</span>left<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> right<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">traversal</span><span class="token punctuation">(</span>left<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> right<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
bool <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-10-i-\u6590\u6CE2\u90A3\u5951\u6570\u5217" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-10-i-\u6590\u6CE2\u90A3\u5951\u6570\u5217" aria-hidden="true">#</a> \u5251\u6307 Offer 10- I. \u6590\u6CE2\u90A3\u5951\u6570\u5217</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> b<span class="token punctuation">;</span>
        b <span class="token operator">=</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-10-ii-\u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-10-ii-\u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898" aria-hidden="true">#</a> \u5251\u6307 Offer 10- II. \u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp\u5907\u5FD8\u5F55</span>
<span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E0D\u5E26\u5907\u5FD8\u5F55</span>
<span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp_0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>dp_1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp_0<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp_1<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sum <span class="token operator">=</span> <span class="token punctuation">(</span>dp_0<span class="token operator">+</span>dp_1<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>
        dp_0 <span class="token operator">=</span> dp_1<span class="token punctuation">;</span>
        dp_1 <span class="token operator">=</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp_1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-63-\u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6-121" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-63-\u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6-121" aria-hidden="true">#</a> \u5251\u6307 Offer 63. \u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6\uFF08121\uFF09</h2>`,38),Dn=s("\u8FD9\u91CCdp\u8BB2\u7684\u6211\u8BA4\u4E3A\u5F88\u6E05\u695A\uFF1A"),Qn={href:"https://labuladong.github.io/algo/3/27/96/",target:"_blank",rel:"noopener noreferrer"},Gn=s("https://labuladong.github.io/algo/3/27/96/"),Zn=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u7EF4dp</span>
<span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pricesSize<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>pricesSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pricesSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pricesSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7A7A\u95F4\u4F18\u5316</span>
<span class="token comment">//\u4F18\u5316\uFF1A\u76F8\u90BB\u72B6\u6001</span>
<span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pricesSize<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp_i_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp_i_1 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pricesSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp_i_0 <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp_i_0<span class="token punctuation">,</span>dp_i_1<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp_i_1 <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp_i_0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-42-\u8FDE\u7EED\u5B50\u6570\u7EC4\u7684\u6700\u5927\u548C-53" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-42-\u8FDE\u7EED\u5B50\u6570\u7EC4\u7684\u6700\u5927\u548C-53" aria-hidden="true">#</a> \u5251\u6307 Offer 42. \u8FDE\u7EED\u5B50\u6570\u7EC4\u7684\u6700\u5927\u548C\uFF0853\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxsubsum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxsubsum <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>maxsubsum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maxsubsum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-47-\u793C\u7269\u7684\u6700\u5927\u4EF7\u503C" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-47-\u793C\u7269\u7684\u6700\u5927\u4EF7\u503C" aria-hidden="true">#</a> \u5251\u6307 Offer 47. \u793C\u7269\u7684\u6700\u5927\u4EF7\u503C</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u7EF4dp</span>
<span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u76F4\u63A5\u7528grid\u5F53dp\u77E9\u9635</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> gridSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> gridColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> grid<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4F18\u5316if\u5224\u65AD</span>
<span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u76F4\u63A5\u7528grid\u5F53dp\u77E9\u9635</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> gridSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> gridColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> grid<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-46-\u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-46-\u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5251\u6307 Offer 46. \u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">translateNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> numsSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nums<span class="token punctuation">[</span>numsSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nums<span class="token punctuation">[</span>numsSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token comment">//\u9006\u5E8F\u4EA4\u6362</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">,</span> right<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">26</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">?</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">26</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">?</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-48-\u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-48-\u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5251\u6307 Offer 48. \u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//hash+\u53CC\u6307\u9488</span>
<span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>left<span class="token operator">&lt;</span>hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        max <span class="token operator">=</span> max<span class="token operator">&lt;</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>max<span class="token punctuation">;</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-18-\u5220\u9664\u94FE\u8868\u7684\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-18-\u5220\u9664\u94FE\u8868\u7684\u8282\u70B9" aria-hidden="true">#</a> \u5251\u6307 Offer 18. \u5220\u9664\u94FE\u8868\u7684\u8282\u70B9</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5355\u6307\u9488 node-&gt;next-&gt;val</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val <span class="token operator">!=</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u6CA1\u627E\u5230\u5F85\u5220\u9664\u7684\u8282\u70B9\uFF0C\u7EE7\u7EED\u904D\u5386\u67E5\u627E</span>
        pre <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u627E\u5230</span>
        pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u5934\u8282\u70B9\u4E3A\u5F85\u5220\u9664\u7684\u8282\u70B9</span>
        <span class="token keyword">return</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment">// \u5F53\u524D\u8282\u70B9</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment">// \u4FDD\u5B58\u5F85\u5220\u9664\u8282\u70B9\u7684\u524D\u4E00\u8282\u70B9</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-&gt;</span>val <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u865A\u62DF\u5934\u7ED3\u70B9</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> dummyHead <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dummyHead<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummyHead<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-22-\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-22-\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9" aria-hidden="true">#</a> \u5251\u6307 Offer 22. \u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u94FE\u8868\u5FEB\u6162\u6307\u9488</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-52-\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9-160" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-52-\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9-160" aria-hidden="true">#</a> \u5251\u6307 Offer 52. \u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9\uFF08160\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\u627E\u94FE\u8868\u4EA4\u70B9</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headA<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>headA <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> headB <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>pA <span class="token operator">=</span> headA<span class="token punctuation">,</span> <span class="token operator">*</span>pB <span class="token operator">=</span> headB<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pA <span class="token operator">!=</span> pB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pA <span class="token operator">=</span> pA <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> headB <span class="token operator">:</span> pA<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        pB <span class="token operator">=</span> pB <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> headA <span class="token operator">:</span> pB<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pA<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-25-\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-25-\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868" aria-hidden="true">#</a> \u5251\u6307 Offer 25. \u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u62C9\u94FE\u6CD5</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> con <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> first <span class="token operator">=</span> l1<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> second <span class="token operator">=</span> l2<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>second<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token operator">-&gt;</span>val<span class="token operator">&lt;</span>second<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            con<span class="token operator">-&gt;</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
            first <span class="token operator">=</span> first<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token operator">-&gt;</span>val<span class="token operator">&gt;=</span>second<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            con<span class="token operator">-&gt;</span>next <span class="token operator">=</span> second<span class="token punctuation">;</span>
            second <span class="token operator">=</span> second<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        con <span class="token operator">=</span> con<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        con<span class="token operator">-&gt;</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>second<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        con<span class="token operator">-&gt;</span>next <span class="token operator">=</span> second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-&gt;</span>val<span class="token operator">&lt;</span>l2<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        l1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        l2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l2<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-21-\u8C03\u6574\u6570\u7EC4\u987A\u5E8F\u4F7F\u5947\u6570\u4F4D\u4E8E\u5076\u6570\u524D\u9762" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-21-\u8C03\u6574\u6570\u7EC4\u987A\u5E8F\u4F7F\u5947\u6570\u4F4D\u4E8E\u5076\u6570\u524D\u9762" aria-hidden="true">#</a> \u5251\u6307 Offer 21. \u8C03\u6574\u6570\u7EC4\u987A\u5E8F\u4F7F\u5947\u6570\u4F4D\u4E8E\u5076\u6570\u524D\u9762</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>numsSize<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-57-\u548C\u4E3As\u7684\u4E24\u4E2A\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-57-\u548C\u4E3As\u7684\u4E24\u4E2A\u6570\u5B57" aria-hidden="true">#</a> \u5251\u6307 Offer 57. \u548C\u4E3As\u7684\u4E24\u4E2A\u6570\u5B57</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\uFF0C\u6570\u7EC4\u6709\u5E8F</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-58-i-\u7FFB\u8F6C\u5355\u8BCD\u987A\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-58-i-\u7FFB\u8F6C\u5355\u8BCD\u987A\u5E8F" aria-hidden="true">#</a> \u5251\u6307 Offer 58 - I. \u7FFB\u8F6C\u5355\u8BCD\u987A\u5E8F</h2><p>\u65B9\u6CD5</p><ul><li>\u53CC\u6307\u9488\uFF0C\u90FD\u4ECE\u53F3\u5F80\u5DE6\u904D\u5386\u5B57\u7B26\u4E32\u6570\u7EC4</li><li>start\u6307\u9488\u5148\u627E\u7B2C\u4E00\u4E2A\u975E\u7A7A\u5B57\u7B26</li><li>end\u6307\u9488\u56FA\u5B9A\u8BE5\u975E\u7A7A\u5B57\u7B26\u540E\uFF0C\u5C31\u627E\u5230\u4E86\u5355\u8BCD\u6700\u540E\u4E00\u4E2A\u5B57\u6BCD\uFF0C\u56FA\u5B9A\u8BE5\u4F4D\u7F6E\u4E0D\u52A8</li><li>start\u6307\u9488\u7EE7\u7EED\u5F80\u524D\u79FB\u52A8\u5230\u5355\u8BCD\u9996\u5B57\u6BCD\u4E4B\u524D\u4E00\u683C</li><li>current\u6307\u9488\u627E\u5230start\u6307\u9488\u540E\u9762\u4E00\u683C</li><li>current\u6307\u9488\u5230end\u6307\u9488\u533A\u95F4\u5373\u5B57\u6BCD</li><li>index\u6307\u9488\u662F\u65B0\u6570\u7EC4ans\u91CC\u7684\u6307\u9488\uFF0C\u4ECE0\u5F00\u59CB\u5411\u540E\u79FB\u52A8</li><li>\u6BCF\u6B21\u52A0\u5165\u5355\u8BCD\u540E\u8DF3\u51FA\u5FAA\u73AF\u540E\uFF0C\u52A0\u5165\u4E00\u4E2A\u7A7A\u683C&#39; &#39;</li><li>\u5728\u8FD4\u56DE\u5B57\u7B26\u4E32\u6570\u7EC4\u672B\u5C3E\u53BB\u6389\u7A7A\u683C\u5E76\u52A0\u4E0A&#39;\\0&#39;</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> start <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u4ECE\u53F3\u5411\u5DE6\u5F00\u59CB\u904D\u5386</span>
    <span class="token keyword">int</span> end <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// \u4ECE\u53F3\u5411\u5DE6\u5F00\u59CB\u904D\u5386</span>
    <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// \u76EE\u524D\u6307\u9488\u7684\u4F4D\u7F6E</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">// \u7D22\u5F15\u8BB0\u5F55</span>
    <span class="token comment">// start\u6307\u9488\u4ECE\u53F3\u5411\u5DE6\u904D\u5386\uFF0C\u6700\u5DE6\u8FB9\u4E3A0\uFF0C\u6700\u53F3\u8FB9\u4E3Alen - 1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            start<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// \u4ECE\u53F3\u5411\u5DE6\u904D\u5386\uFF0C\u9047\u5230\u7A7A\u683C\u6307\u9488\u5C31\u7EE7\u7EED\u5F80\u5DE6\u79FB\u52A8\u4E00\u683C</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token comment">// \u4ECE\u53F3\u5411\u5DE6\u904D\u5386\uFF0C\u9047\u5230\u975E\u7A7A</span>
        <span class="token punctuation">{</span>
            end <span class="token operator">=</span> start<span class="token punctuation">;</span> <span class="token comment">// end\u6307\u9488\u8D76\u7D27\u6765\u56FA\u5B9Apin\u5355\u8BCD\u672B\u5C3E\u7684\u975E\u7A7A\u5B57\u6BCD</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                start<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// start\u6307\u9488\u7EE7\u7EED\u5F80\u524D\u79FB\u52A8\u5230\u8BE5\u5355\u8BCD\u7B2C\u4E00\u4E2A\u5B57\u6BCD\u4E4B\u524D\u4E00\u683C\uFF08\u7A7A\u683C\uFF09</span>
            <span class="token punctuation">}</span>
            current <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// current\u6307\u9488\u79FB\u52A8\u5230\u8BE5\u5355\u8BCD\u7684\u7B2C\u4E00\u4E2A\u5B57\u6BCD</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token comment">// \u5F00\u59CB\u904D\u5386\u8FD9\u4E2A\u5355\u8BCD</span>
            <span class="token punctuation">{</span>
                <span class="token comment">/* 
                 * \u628Acurrent\u5230end\u4FE9\u6307\u9488\u533A\u95F4\uFF08\u542B\uFF09\u4E4B\u95F4\u6307\u5411\u7684\u5355\u8BCD\u4ECE\u524D\u5F80\u540E\u62F7\u8D1D\u5230\u65B0\u6570\u7EC4ans\u4E2D
                 * index\u4E3A\u6570\u7EC4ans\u7684\u6307\u9488\uFF0C\u4ECE0\u5F00\u59CB\u5F80\u540E\u79FB\u52A8
                 */</span>

                <span class="token comment">/*
                 * \u5BF9\u4E8Ea[i++]\u548Ca[++i]:
                 * i++\u662F\u5148\u4F7F\u7528i\u73B0\u5728\u7684\u503C\uFF0C\u518D\u7ED9i\u52A01
                 * ++i\u662F\u5148\u7ED9i\u52A01\uFF0C\u518D\u7528\u52A01\u540E\u7684\u503C
                 */</span>
                ans<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>current<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// ans[index + 1]\u51FA\u73B0blueisskyth(?)</span>
            ans<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u6BCF\u4E2A\u5355\u8BCD\u52A0\u5165\u540E\u518D\u52A0\u4E00\u4E2A\u7A7A\u683C&#39; &#39;\uFF0C\u7136\u540Eindex\u6307\u9488\u79FB\u52A8\u5230\u4E0B\u4E00\u4F4D</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/*
    * \u4E0D\u8003\u8651&#39;\\0&#39;\u5C31\u4F1A\u51FA\u73B0\u201C\u6267\u884C\u51FA\u9519\u201D\uFF1A
    * \u5728\u5B57\u7B26\u4E32\u6570\u7EC4\u7684\u672B\u5C3E\u52A0\u4E0A&#39;\\0&#39;\u8868\u793A\u5B57\u7B26\u4E32\u7ED3\u675F. \u5982\u679C\u6CA1\u6709\u8FD9\u4E2A\\0,\u90A3\u4E48\u5728\u4F7F\u7528\u7CFB\u7EDF\u51FD\u6570\u5904\u7406\u8FD9\u4E2A\u5B57\u7B26\u4E32\u7684\u65F6\u5019,\u51FD\u6570\u5C31\u4E0D\u80FD\u51C6\u786E\u5224\u65AD\u5B57\u7B26\u4E32\u5728\u54EA\u91CC\u7ED3\u675F.\u4ECE\u800C\u5BFC\u81F4\u6570\u7EC4\u8D8A\u754C
    */</span>

    <span class="token comment">/*
     * \u66FF\u6362\u6700\u540E\u7684&#39; &#39;\u4E3A&#39;\\0&#39;
     * \u8FD9\u53E5\u8BDD\u5728\u5251\u6307offer58\u91CC\u6CA1\uFF1A\u7531\u4E8Es\u4E2D\u81F3\u5C11\u5B58\u5728\u4E00\u4E2A\u5355\u8BCD\uFF01\uFF01\uFF01\u6240\u4EE5index\u8981\u5224\u65AD\u662F\u5426\u5927\u4E8E0
     * \u5426\u5219\u6D4B\u8BD5\u6848\u4F8B&quot;&quot;\u65E0\u6CD5\u901A\u8FC7\uFF08\u8F93\u5165&quot;&quot;\uFF0C\u8F93\u51FA\u4E5F\u5E94\u8BE5\u4E3A&quot;&quot;\uFF0C\u6240\u4EE5\u6839\u672C\u6CA1\u8FDB\u5165while\u5FAA\u73AF\uFF01\uFF01\uFF01)
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        ans<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0D\u662Findex\uFF0C\u662Findex-1\uFF0C\u56DE\u9000\u5230index\u4E0A\u4E00\u4F4D</span>
    <span class="token keyword">else</span>
        ans <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-12-\u77E9\u9635\u4E2D\u7684\u8DEF\u5F84-79" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-12-\u77E9\u9635\u4E2D\u7684\u8DEF\u5F84-79" aria-hidden="true">#</a> \u5251\u6307 Offer 12. \u77E9\u9635\u4E2D\u7684\u8DEF\u5F84\uFF0879\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//visited+\u56DE\u6EAF</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
bool <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> board<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> visited<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span>word<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">==</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mx<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>my<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>my<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>visited<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bool res <span class="token operator">=</span>  <span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>word<span class="token punctuation">,</span>len<span class="token punctuation">,</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>mx<span class="token punctuation">,</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span>true<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> boardSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> boardColSize<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> visited <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>boardSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>boardSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>boardColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>boardSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>boardColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>boardSize<span class="token punctuation">,</span>boardColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>word<span class="token punctuation">,</span>len<span class="token punctuation">,</span>step<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-13-\u673A\u5668\u4EBA\u7684\u8FD0\u52A8\u8303\u56F4" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-13-\u673A\u5668\u4EBA\u7684\u8FD0\u52A8\u8303\u56F4" aria-hidden="true">#</a> \u5251\u6307 Offer 13. \u673A\u5668\u4EBA\u7684\u8FD0\u52A8\u8303\u56F4</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> xsize<span class="token punctuation">,</span><span class="token keyword">int</span> ysize<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">&gt;=</span>xsize<span class="token operator">||</span>y<span class="token operator">&gt;=</span>ysize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> y <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> y <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// \u5750\u6807\u548C\u8D85\u51FA k \u7684\u9650\u5236</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mx <span class="token operator">=</span> x <span class="token operator">+</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">DFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> mx<span class="token punctuation">,</span> my<span class="token punctuation">,</span>xsize<span class="token punctuation">,</span>ysize<span class="token punctuation">,</span>k<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">DFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-34-\u4E8C\u53C9\u6811\u4E2D\u548C\u4E3A\u67D0\u4E00\u503C\u7684\u8DEF\u5F84-113" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-34-\u4E8C\u53C9\u6811\u4E2D\u548C\u4E3A\u67D0\u4E00\u503C\u7684\u8DEF\u5F84-113" aria-hidden="true">#</a> \u5251\u6307 Offer 34. \u4E8C\u53C9\u6811\u4E2D\u548C\u4E3A\u67D0\u4E00\u503C\u7684\u8DEF\u5F84\uFF08113\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS+\u56DE\u6EAF</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">2001</span></span></span>
<span class="token keyword">void</span> <span class="token function">preRoot</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stackSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    stack<span class="token punctuation">[</span>stackSize<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">,</span> stack<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>target<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>returnColumnSizes<span class="token punctuation">,</span>res<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>target<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>returnColumnSizes<span class="token punctuation">,</span>res<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>MAX_SIZE<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>target<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>returnColumnSizes<span class="token punctuation">,</span>res<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-54-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7B2Ck\u5927\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-54-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7B2Ck\u5927\u8282\u70B9" aria-hidden="true">#</a> \u5251\u6307 Offer 54. \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7B2Ck\u5927\u8282\u70B9</h2><p>\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u4E2D\u5E8F\u904D\u5386\u4E3A <strong>\u9012\u589E\u5E8F\u5217</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> target<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> result<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">||</span><span class="token operator">*</span>target<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    
    <span class="token comment">//\u5148\u5230\u6700\u53F3\u8FB9\uFF0C\u624D\u5F00\u59CB\u51CFtarget\u503C</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>target<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//\u5982\u679C\u653E\u5230\u4E0A\u9762\u5C31\u662F\u4ECE\u6839\u5F00\u59CB\u51CF</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>target<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>result <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>target<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> target <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token operator">&amp;</span>target<span class="token punctuation">,</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-45-\u628A\u6570\u7EC4\u6392\u6210\u6700\u5C0F\u7684\u6570" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-45-\u628A\u6570\u7EC4\u6392\u6210\u6700\u5C0F\u7684\u6570" aria-hidden="true">#</a> \u5251\u6307 Offer 45. \u628A\u6570\u7EC4\u6392\u6210\u6700\u5C0F\u7684\u6570</h2><p>\u82E5\u62FC\u63A5\u5B57\u7B26\u4E32 x + y &gt; y + x\uFF0C\u5219 x \u201C\u5927\u4E8E\u201D y \u53CD\u4E4B\uFF0C\u82E5 x + y &lt; y + x\uFF0C\u5219 x \u201C\u5C0F\u4E8E\u201D y</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6B64\u9898\u6700\u725B\u903C\u7684\u5C31\u662F\u81EA\u5B9A\u4E49\u6BD4\u8F83\u51FD\u6570</span>
<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> num1<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> num2<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//\u683C\u5F0F\u5316\u6570\u636E\u8F93\u5165\u5B57\u7B26\u4E32</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> <span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> <span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">minNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> res<span class="token punctuation">;</span>

    <span class="token comment">//\u5FEB\u901F\u6392\u5E8F\uFF0C\u81EA\u5B9A\u4E49\u51FD\u6570\u592A\u725B\u903C\u4E86</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        p <span class="token operator">+=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-61-\u6251\u514B\u724C\u4E2D\u7684\u987A\u5B50" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-61-\u6251\u514B\u724C\u4E2D\u7684\u987A\u5B50" aria-hidden="true">#</a> \u5251\u6307 Offer 61. \u6251\u514B\u724C\u4E2D\u7684\u987A\u5B50</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5FEB\u6392</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isStraight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>minIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u5927\u5C0F\u738B\u53EF\u4EE5\u5F53\u4EFB\u4F55\u6570</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            minIndex<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u68C0\u67E5\u6709\u6CA1\u6709\u76F8\u540C\u5143\u7D20</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u770B\u6700\u5927\u6700\u5C0F\u505A\u5DEE\u662F\u5426\u5C0F\u4E8E4</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-40-\u6700\u5C0F\u7684k\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-40-\u6700\u5C0F\u7684k\u4E2A\u6570" aria-hidden="true">#</a> \u5251\u6307 Offer 40. \u6700\u5C0F\u7684k\u4E2A\u6570</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5FEB\u6392</span>
<span class="token keyword">int</span> <span class="token function">cmpfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>num1<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span>num2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>num1<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> arrSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arrSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfun<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize<span class="token operator">=</span>k<span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-55-i-\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6-104" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-55-i-\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6-104" aria-hidden="true">#</a> \u5251\u6307 Offer 55 - I. \u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6\uFF08104\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u8FD9\u4E2A\u9012\u5F52\u725B\u903C</span>
<span class="token comment">//\u52A8\u89C4\u601D\u60F3\uFF0C\u81EA\u5E95\u5411\u4E0A</span>
<span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u9876\u5411\u4E0B</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> MAX_depth<span class="token punctuation">,</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>MAX_depth <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span><span class="token operator">*</span>MAX_depth<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>MAX_depth<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>MAX_depth<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> MAX_depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token operator">&amp;</span>MAX_depth<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> MAX_depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-55-ii-\u5E73\u8861\u4E8C\u53C9\u6811-110" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-55-ii-\u5E73\u8861\u4E8C\u53C9\u6811-110" aria-hidden="true">#</a> \u5251\u6307 Offer 55 - II. \u5E73\u8861\u4E8C\u53C9\u6811\uFF08110\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5728\u8BA1\u7B97\u6DF1\u5EA6\u57FA\u7840\u4E0A\u5224\u65AD</span>
<span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

bool <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fabs</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-64-\u6C421-2-n" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-64-\u6C421-2-n" aria-hidden="true">#</a> \u5251\u6307 Offer 64. \u6C421+2+\u2026+n</h2><p>\u8981\u6C42\u4E0D\u80FD\u4F7F\u7528\u4E58\u9664\u6CD5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7B49\u5173\u952E\u5B57\u53CA\u6761\u4EF6\u5224\u65AD\u8BED\u53E5\uFF0C\u56E0\u6B64\u6211\u4EEC\u624B\u91CC\u80FD\u7528\u7684\u5DE5\u5177\u5F88\u5C11\uFF0C\u5217\u4E3E\u51FA\u6765\u53D1\u73B0\u53EA\u6709\u52A0\u51CF\u6CD5\u3001\u8D4B\u503C\u3001\u4F4D\u8FD0\u7B97\u7B26\u4EE5\u53CA\u903B\u8F91\u8FD0\u7B97\u7B26\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52</span>
<span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span> n <span class="token operator">+</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52\u4E0D\u7528\u5224\u65AD</span>
<span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    n <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">+=</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8003\u8651 A \u548C B \u4E24\u6570\u76F8\u4E58\u7684\u65F6\u5019\u6211\u4EEC\u5982\u4F55\u5229\u7528\u52A0\u6CD5\u548C\u4F4D\u8FD0\u7B97\u6765\u6A21\u62DF\uFF0C\u5176\u5B9E\u5C31\u662F\u5C06 B \u4E8C\u8FDB\u5236\u5C55\u5F00\uFF0C\u5982\u679C B \u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E0B\u7B2C i \u4F4D\u4E3A 1\uFF0C\u90A3\u4E48\u8FD9\u4E00\u4F4D\u5BF9\u6700\u540E\u7ED3\u679C\u7684\u8D21\u732E\u5C31\u662F A*(1&lt;&lt;i)\uFF0C\u5373 A&lt;&lt;i\u3002\u6211\u4EEC\u904D\u5386 B \u4E8C\u8FDB\u5236\u5C55\u5F00\u4E0B\u7684\u6BCF\u4E00\u4F4D\uFF0C\u5C06\u6240\u6709\u8D21\u732E\u7D2F\u52A0\u8D77\u6765\u5C31\u662F\u6700\u540E\u7684\u7B54\u6848\uFF0C\u8FD9\u4E2A\u65B9\u6CD5\u4E5F\u88AB\u79F0\u4F5C\u300C\u4FC4\u7F57\u65AF\u519C\u6C11\u4E58\u6CD5\u300D\uFF0C\u8FD9\u4E2A\u65B9\u6CD5\u7ECF\u5E38\u88AB\u7528\u4E8E\u4E24\u6570\u76F8\u4E58\u53D6\u6A21\u7684\u573A\u666F\uFF0C\u5982\u679C\u4E24\u6570\u76F8\u4E58\u5DF2\u7ECF\u8D85\u8FC7\u6570\u636E\u8303\u56F4\uFF0C\u4F46\u53D6\u6A21\u540E\u4E0D\u4F1A\u8D85\u8FC7\uFF0C\u53EF\u4EE5\u5229\u7528\u8FD9\u4E2A\u65B9\u6CD5\u6765\u62C6\u4F4D\u53D6\u6A21\u8BA1\u7B97\u8D21\u732E\uFF0C\u4FDD\u8BC1\u6BCF\u6B21\u8FD0\u7B97\u90FD\u5728\u6570\u636E\u8303\u56F4\u5185\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53EA\u662F\u5FEB\u901F\u4E58\u7B97\u6CD5\u5B9E\u73B0</span>
<span class="token keyword">int</span> <span class="token function">quickMulti</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>B<span class="token punctuation">;</span>B<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            ans <span class="token operator">+=</span> A<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//14\u4F4D\u5C55\u5F00</span>
<span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> A <span class="token operator">=</span> n<span class="token punctuation">,</span> B <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    B <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ans <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5229\u7528\u5143\u7D20\u5927\u5C0F\u8BA1\u7B97</span>
<span class="token comment">// n(n+1)/2 == n(n+1)&gt;&gt;1</span>
<span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-68-i-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-235" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-68-i-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-235" aria-hidden="true">#</a> \u5251\u6307 Offer 68 - I. \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\uFF08235\uFF09</h2><p>\u5982\u679C\u5728 BST \u4E2D\u5BFB\u627E\u6700\u8FD1\u516C\u5171\u7956\u5148\uFF0C\u53CD\u800C\u5BB9\u6613\u5F88\u591A\uFF0C\u4E3B\u8981\u5229\u7528 BST \u5DE6\u5C0F\u53F3\u5927\uFF08\u5DE6\u5B50\u6811\u6240\u6709\u8282\u70B9\u90FD\u6BD4\u5F53\u524D\u8282\u70B9\u5C0F\uFF0C\u53F3\u5B50\u6811\u6240\u6709\u8282\u70B9\u90FD\u6BD4\u5F53\u524D\u8282\u70B9\u5927\uFF09\u7684\u7279\u70B9\u5373\u53EF\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5229\u7528\u641C\u7D22\u6811\u7279\u6027</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> ans <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>val<span class="token operator">&lt;</span>ans<span class="token operator">-&gt;</span>val<span class="token operator">&amp;&amp;</span>q<span class="token operator">-&gt;</span>val<span class="token operator">&lt;</span>ans<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> ans<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>val<span class="token operator">&gt;</span>ans<span class="token operator">-&gt;</span>val<span class="token operator">&amp;&amp;</span>q<span class="token operator">-&gt;</span>val<span class="token operator">&gt;</span>ans<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> ans<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-68-ii-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-236" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-68-ii-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-236" aria-hidden="true">#</a> \u5251\u6307 Offer 68 - II. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\uFF08236\uFF09</h2><p>\u9012\u5F52\u5224\u65AD\u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\uFF0C\u67E5\u627Ep\u6216\u8005q\u662F\u5426\u5728\u5F53\u524D\u8282\u70B9\u7684\u5B50\u6811\u4E0A</p><ol><li>\u5728\u540C\u4E00\u5B50\u6811\u4E0A\uFF0C\u540C\u4E00\u5DE6\u5B50\u6811\uFF0C\u8FD4\u56DE\u7B2C\u4E00\u4E2A\u627E\u5230\u7684\u76F8\u540C\u503C\uFF0C\u540C\u4E00\u53F3\u5B50\u6811\u4E0A\uFF0C\u8FD4\u56DE\u7B2C\u4E00\u4E2A\u627E\u5230\u7684\u76F8\u540C\u503C</li><li>\u4E0D\u5728\u540C\u4E00\u5B50\u6811\u662F\uFF0C\u8BF4\u660E\u5F53\u524D\u8282\u70B9\u5C31\u662F\u4ED6\u4EEC\u7684\u516C\u5171\u7956\u5148\u8282\u70B9</li></ol><div class="custom-container tip"><p class="custom-container-title">\u4E2A\u4EBA\u7406\u89E3</p><p>\u5E26\u8FD4\u56DE\u5B69\u5B50\u72B6\u6001\u7684\u540E\u5E8F\u904D\u5386</p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>p<span class="token operator">||</span>root<span class="token operator">==</span>q<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">?</span>right<span class="token operator">:</span>left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-07-\u91CD\u5EFA\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-07-\u91CD\u5EFA\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u5251\u6307 Offer 07. \u91CD\u5EFA\u4E8C\u53C9\u6811</h2><p>\u524D\u5E8F\u904D\u5386\uFF1A\u6839\u8282\u70B9-&gt;\u5DE6\u5B50\u6811-&gt;\u53F3\u5B50\u6811 \u4E2D\u5E8F\u904D\u5386\uFF1A\u5DE6\u5B50\u6811-&gt;\u6839\u8282\u70B9-&gt;\u53F3\u5B50\u6811 \u540E\u5E8F\u904D\u5386\uFF1A\u5DE6\u5B50\u6811-&gt;\u53F3\u5B50\u6811-&gt;\u6839\u8282\u70B9</p><ul><li>\u601D\u8DEF\uFF1A \u6839\u8282\u70B9\uFF1Apre[0], in[i]\uFF1B \u5DE6\u5B50\u6811\uFF1Apre[1] ~ pre[i], in[0] ~ on[i - 1] \u53F3\u5B50\u6811\uFF1Apre[i + 1] ~ pre[size]\uFF0Cin[i + 1] ~ in[size]</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preorderSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inorderSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>preorderSize<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>inorder<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>inorderSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>val <span class="token operator">=</span> preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// \u524D\u5E8F\u904D\u5386\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\u5373\u4E3A\u6839\u8282\u70B9\u503C</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>inorderSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u4E24\u79CD</span>
	<span class="token comment">//root-&gt;left = buildTree(preorder+1, i, inorder, i);</span>
    <span class="token comment">//root-&gt;right = buildTree(preorder+i+1, preorderSize-i-1, inorder+i+1, preorderSize-i-1);</span>
    root<span class="token operator">-&gt;</span>left<span class="token operator">=</span><span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>preorder<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>inorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>right<span class="token operator">=</span><span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>preorder<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>preorderSize<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>inorder<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>preorderSize<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-16-\u6570\u503C\u7684\u6574\u6570\u6B21\u65B9-50" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-16-\u6570\u503C\u7684\u6574\u6570\u6B21\u65B9-50" aria-hidden="true">#</a> \u5251\u6307 Offer 16. \u6570\u503C\u7684\u6574\u6570\u6B21\u65B9\uFF0850\uFF09</h2><p>\u8F6C\u5316\u4E3A\u4F4D\u8FD0\u7B97\uFF1A \u5411\u4E0B\u6574\u9664 n / 2\u7B49\u4EF7\u4E8E \u53F3\u79FB\u4E00\u4F4Dn&gt;&gt;1 \u53D6\u4F59\u6570 n%2 \u7B49\u4EF7\u4E8E\u5224\u65AD\u4E8C\u8FDB\u5236\u6700\u53F3\u4E00\u4F4D\u503C n&amp;1</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5FEB\u901F\u5E42</span>
<span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">//if(n&amp;1==1)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//return myPow(x*x,n&gt;&gt;1);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-33-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-33-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u5E8F\u5217" aria-hidden="true">#</a> \u5251\u6307 Offer 33. \u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u5E8F\u5217</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5212\u5206\u6570\u7EC4</span>
bool <span class="token function">verifyPostorder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> postorderSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>postorderSize<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token comment">//\u627E\u5230\u53F3\u5B50\u6811</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>postorderSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>postorder<span class="token punctuation">[</span>postorderSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            index <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u5224\u65AD\u53F3\u5B50\u6811\u662F\u5426\u6240\u6709\u503C\u90FD\u6BD4\u6839\u5C0F</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>postorderSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>postorder<span class="token punctuation">[</span>postorderSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">verifyPostorder</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">verifyPostorder</span><span class="token punctuation">(</span>postorder<span class="token operator">+</span>index<span class="token punctuation">,</span>postorderSize<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-15-\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570-191" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-15-\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570-191" aria-hidden="true">#</a> \u5251\u6307 Offer 15. \u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570\uFF08191\uFF09</h2><p>\u7528\u7684\u65B9\u6CD5\u662Fn&amp;n-1\uFF0C\u5C06\u6700\u4F4E\u4F4D\u76841\u6539\u4E3A0\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4F4D\u8FD0\u7B97</span>
<span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        n<span class="token operator">=</span>n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-65-\u4E0D\u7528\u52A0\u51CF\u4E58\u9664\u505A\u52A0\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-65-\u4E0D\u7528\u52A0\u51CF\u4E58\u9664\u505A\u52A0\u6CD5" aria-hidden="true">#</a> \u5251\u6307 Offer 65. \u4E0D\u7528\u52A0\u51CF\u4E58\u9664\u505A\u52A0\u6CD5</h2><p>\u4E8C\u8FDB\u5236\u7684\u52A0\u6CD5\u8FD0\u7B97\u548C\u5341\u8FDB\u5236\u7C7B\u4F3C\uFF0C\u4E5F\u662F\u6BCF\u4E00\u4F4D\u76F8\u52A0\uFF0C\u548C\u5927\u4E8E\u7B49\u4E8E 2 \u7684\u8BDD\u8FDB\u4E00\u4F4D\uFF0C\u53EA\u4E0D\u8FC7\u4E8C\u8FDB\u5236\u6570\u6C42\u548C\u53CA\u8FDB\u4F4D\u7684\u64CD\u4F5C\u662F\u7528\u4F4D\u8FD0\u7B97\u6765\u5B9E\u73B0\u7684\u3002</p><p>\u5F02\u6216\u8FD0\u7B97 <code>^</code> \u7684\u7ED3\u679C\u53EF\u4EE5\u7406\u89E3\u4E3A\u5BF9\u5E94\u4F4D\u76F8\u52A0\uFF0C\u4E14\u8FD0\u7B97 <code>&amp;</code> \u7684\u7ED3\u679C\u5DE6\u79FB\u4E00\u4F4D\u53EF\u4EE5\u7406\u89E3\u4E3A\u8FDB\u4F4D\u7684\u7ED3\u679C\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> b <span class="token operator">:</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8BBE a = 1001</span>
    <span class="token comment">// \u8BBE b = 0101</span>
    <span class="token comment">// \u6C42\u548C 1100</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
    <span class="token comment">// \u8FDB\u4F4D 0001 &lt;&lt; 1 = 0010</span>
    <span class="token comment">//\u6B64\u5904unsigned\u975E\u5E38\u91CD\u8981</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// add(1100, 0010)</span>
    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-56-i-\u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-56-i-\u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570" aria-hidden="true">#</a> \u5251\u6307 Offer 56 - I. \u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570</h2><p>\u4F4D\u8FD0\u7B97\uFF1Ax&amp;(-x)</p><p>\u5212\u5206\u6570\u7EC4</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4F4D\u8FD0\u7B97</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>   
        ret <span class="token operator">^=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//x&amp;(-x)\u53D6\u51FA\u6700\u4F4E\u4F4D1\uFF0C\u65E0\u9700\u5FAA\u73AF\u64CD\u4F5C</span>
    m <span class="token operator">=</span> ret<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-56-ii-\u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570-ii-137" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-56-ii-\u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570-ii-137" aria-hidden="true">#</a> \u5251\u6307 Offer 56 - II. \u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570 II\uFF08137\uFF09</h2><p>\u6B63\u5E38\uFF1A\u54C8\u5E0C\u8868</p><p>\u6BCF\u4E2A\u6570\u5B57\u9010\u4F4D\u76F8\u52A0mod3</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4F4D\u8FD0\u7B97</span>
<span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> bit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u8FD9\u91CC\u4E0D\u80FD\u7528|\u56E0\u4E3A\u8FD9\u91CC\u662F10\u8FDB\u5236</span>
            bit <span class="token operator">+=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//res |= (bit%3&lt;&lt;i);</span>
        res <span class="token operator">+=</span> <span class="token punctuation">(</span>bit<span class="token operator">%</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-39-\u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u7684\u6570\u5B57-169" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-39-\u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u7684\u6570\u5B57-169" aria-hidden="true">#</a> \u5251\u6307 Offer 39. \u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u7684\u6570\u5B57\uFF08169\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6BCF\u6B21\u5220\u9664\u4E24\u4E2A\u4E0D\u540C\u7684\u503C,\u76F8\u5F53\u4E8E\u540C\u5F52\u4E8E\u5C3D\u6700\u540E\u5269\u4E0B\u6765\u7684\u5C31\u662F\u591A\u6570\u6D3E</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>A<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>B<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>A<span class="token punctuation">;</span>
    <span class="token operator">*</span>A <span class="token operator">=</span> <span class="token operator">*</span>B<span class="token punctuation">;</span>
    <span class="token operator">*</span>B <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>numsSize<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">==</span>numsSize<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        left<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6295\u7968\u6CD5</span>
<span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> majority <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            majority <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> majority<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            count<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> majority<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//qsort \u8F93\u51FA\u4E2D\u95F4</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>numsSize<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//f</span>
<span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span><span class="token keyword">int</span> he<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>lo<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>he<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">bisplit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span><span class="token keyword">int</span> he<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lo<span class="token operator">==</span>he<span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> lo<span class="token operator">+</span><span class="token punctuation">(</span>he<span class="token operator">-</span>lo<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">bisplit</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">bisplit</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>he<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> leftCount <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rightCount <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>right<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>he<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> leftCount<span class="token operator">&gt;</span>rightCount<span class="token operator">?</span>left<span class="token operator">:</span>right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">bisplit</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-66-\u6784\u5EFA\u4E58\u79EF\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-66-\u6784\u5EFA\u4E58\u79EF\u6570\u7EC4" aria-hidden="true">#</a> \u5251\u6307 Offer 66. \u6784\u5EFA\u4E58\u79EF\u6570\u7EC4</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6784\u5EFA\u5DE6\u53F3\u4E58\u79EF\u8868</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">constructArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> aSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> aSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token punctuation">[</span>aSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token punctuation">[</span>aSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    right<span class="token punctuation">[</span>aSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>aSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>aSize<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>aSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-14-i-\u526A\u7EF3\u5B50-343" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-14-i-\u526A\u7EF3\u5B50-343" aria-hidden="true">#</a> \u5251\u6307 Offer 14- I. \u526A\u7EF3\u5B50\uFF08343\uFF09</h2><p>\u5173\u4E8E\u4E3A\u4EC0\u4E48\u5207\u5206\u4E3A3\u7684\u4F18\u5148\u7EA7\u6700\u9AD8\uFF1A</p><p>\u53EF\u4EE5\u5229\u7528\u5747\u503C\u4E0D\u7B49\u5F0F\u6C42\u51FA\u4E58\u79EF\u6700\u5927\u503C <code>L(m)=(n/m)^m</code> \u5BF9\u6B64\u5F0F\u6C42\u5BFC\uFF08\u53EF\u5229\u7528\u5BF9\u6570\u6CD5\uFF09\uFF0C\u53EF\u4EE5\u8BC1\u660E\u5F53 <code>m=n/e</code> \u65F6\uFF0C\u4E58\u79EF\u53D6\u6700\u5927\uFF0C\u6B64\u65F6\u6BCF\u6BB5\u7EF3\u5B50\u7684\u957F\u5EA6\u4E3A <code>n/(n/e)=e</code>\uFF0C\u81EA\u7136\u5BF9\u6570e\u7684\u503C\u4E3A2.718\uFF0C\u663E\u7136\u63A5\u8FD13\uFF0C\u4F46\u662F\u4E0D\u80FD\u7B80\u5355\u7684\u7406\u89E3\u4E3A<code>e</code>\u63A5\u8FD13\uFF0C\u6700\u597D\u5E26\u5165\u76EE\u6807\u51FD\u6570\u4E2D\u53BB\u9A8C\u8BC1\u3002</p><p>\u5B9E\u8D28\u4E0A\u5C31\u662F\u6BD4\u8F83 <code>3^{1/3}</code> \u548C <code>2^{1/2}</code>\u7684\u5927\u5C0F</p><p>\u53EF\u4EE5\u540C\u65F6\u53D6\u5404\u81EA\u7684 6 \u6B21\u65B9\uFF0C\u53D1\u73B0\u5C31\u662F3\u7684\u5E73\u65B9\u548C2\u7684\u7ACB\u65B9\u7684\u6BD4\u8F83\uFF0C\u663E\u71363\u7ED3\u679C\u597D\u4E00\u4E9B\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u62C63\u30012,\u7EAF\u6570\u5B66,\u8D2A\u5FC3</span>
<span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t_count <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> yu <span class="token operator">=</span> n<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>yu<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        t_count<span class="token operator">--</span><span class="token punctuation">;</span>
        s_count<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>yu<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        s_count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>t_count<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>s_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53 i \u2265 2 \u65F6\uFF0C\u5047\u8BBE\u5BF9\u957F\u5EA6\u4E3A i \u7EF3\u5B50\u526A\u51FA\u7684\u7B2C\u4E00\u6BB5\u7EF3\u5B50\u957F\u5EA6\u662F j\uFF081\u2264j&lt;i\uFF09\uFF0C\u5219\u6709\u4EE5\u4E0B\u4E24\u79CD\u65B9\u6848\uFF1A</p><ul><li><p>\u5C06 i \u526A\u6210 j \u548C i-j \u957F\u5EA6\u7684\u7EF3\u5B50\uFF0C\u4E14 i\u2212j \u4E0D\u518D\u7EE7\u7EED\u526A\uFF0C\u6B64\u65F6\u7684\u4E58\u79EF\u662F j\xD7(i\u2212j)</p></li><li><p>\u5C06 i \u526A\u6210 j \u548C i\u2212j \u957F\u5EA6\u7684\u7EF3\u5B50\uFF0C\u4E14 i\u2212j \u7EE7\u7EED\u526A\u6210\u591A\u6BB5\u957F\u5EA6\u7684\u7EF3\u5B50\uFF0C\u6B64\u65F6\u7684\u4E58\u79EF\u662F j\xD7dp[i\u2212j]</p></li><li><p>\u56E0\u6B64\uFF0C\u5F53 j \u56FA\u5B9A\u65F6\uFF0C\u6709 dp[i]=max(j\xD7(i\u2212j),j\xD7dp[i\u2212j])\u3002\u7531\u4E8E j \u7684\u53D6\u503C\u8303\u56F4\u662F 1 \u5230 i \uFF0C\u9700\u8981\u904D\u5386\u6240\u6709\u7684 j \u5F97\u5230dp[i]\u7684\u6700\u5927\u503C</p></li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">/**
     * 1. \u786E\u5B9Adp\u6570\u7EC4\u4E0B\u6807\u542B\u4E49 \u5206\u62C6\u6570\u5B57i\uFF0C\u53EF\u4EE5\u5F97\u5230\u7684\u6700\u5927\u4E58\u79EF\u4E3Adp[i];
     * 2. \u9012\u63A8\u516C\u5F0F dp[i] = max(dp[i],(i-j)*j,dp[i-j]*j);
     * 3. \u521D\u59CB\u5316 dp[2] = 1;
     * 4. \u904D\u5386\u987A\u5E8F \u4ECE\u524D\u5411\u540E\u904D\u5386\u5C31\u53EF\u4EE5;
     * 5. \u63A8\u5BFC\u7ED3\u679C;
     */</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>dp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u4ECE\u524D\u5411\u540E\u904D\u5386 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* j\u904D\u5386\u5230\u5C0F\u4E8Ei\u7684\u503C */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">fmax</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">*</span>j<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-57-ii-\u548C\u4E3As\u7684\u8FDE\u7EED\u6B63\u6570\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-57-ii-\u548C\u4E3As\u7684\u8FDE\u7EED\u6B63\u6570\u5E8F\u5217" aria-hidden="true">#</a> \u5251\u6307 Offer 57 - II. \u548C\u4E3As\u7684\u8FDE\u7EED\u6B63\u6570\u5E8F\u5217</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u72B6\u6001\u63A7\u5236\u7684\u6ED1\u52A8\u7A97\u53E3</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>len <span class="token operator">=</span> target<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token operator">-</span>left<span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span>left<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
            sum <span class="token operator">-=</span>left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span>right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum <span class="token operator">-=</span>left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-62-\u5706\u5708\u4E2D\u6700\u540E\u5269\u4E0B\u7684\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-62-\u5706\u5708\u4E2D\u6700\u540E\u5269\u4E0B\u7684\u6570\u5B57" aria-hidden="true">#</a> \u5251\u6307 Offer 62. \u5706\u5708\u4E2D\u6700\u540E\u5269\u4E0B\u7684\u6570\u5B57</h2><p>\u9996\u5148\u6709\u4E24\u4E2A\u5173\u952E\u70B9\uFF1A</p><ul><li>\u6D3B\u4E0B\u6765\u7684\u90A3\u4E2A\u4EBA\u4F4D\u7F6E\u4E00\u5B9A\u4E3A<code>0</code></li><li>\u77E5\u9053\u4F4D\u7F6E\u4E3A<code>0</code>\uFF0C\u5219\u53EF\u4EE5\u901A\u8FC70\u5F00\u59CB\u53CD\u63A8</li></ul><p>\u9012\u63A8\u516C\u5F0F\uFF1A<code>pos = (pos+m)%i</code></p><p>\u52A0\u7684m\u662F\u5728\u6A21\u62DF\u4E0A\u6B21\u6740\u4EBA\u540E\u524D<code>m</code>\u4E2A\u4EBA\uFF0C\u52A0\u540E\u53EF\u80FD\u4F1A\u5927\u4E8E<code>n</code>\uFF0C\u6240\u4EE5\u9700\u8981<code>mod(i)</code></p>`,114),Wn=s("\u53C2\u8003\u9898\u89E3\uFF1A"),Vn={href:"https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/huan-ge-jiao-du-ju-li-jie-jue-yue-se-fu-huan-by-as/",target:"_blank",rel:"noopener noreferrer"},Yn=s("https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/huan-ge-jiao-du-ju-li-jie-jue-yue-se-fu-huan-by-as/"),Kn=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">%</span>i<span class="token punctuation">;</span><span class="token comment">//\u6BCF\u6B21\u5FAA\u73AF\u53F3\u79FB</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-29-\u987A\u65F6\u9488\u6253\u5370\u77E9\u9635-54" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-29-\u987A\u65F6\u9488\u6253\u5370\u77E9\u9635-54" aria-hidden="true">#</a> \u5251\u6307 Offer 29. \u987A\u65F6\u9488\u6253\u5370\u77E9\u9635\uFF0854\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5176\u5B9E\u662F4\u6307\u9488\uFF0C\u63A7\u5236\u56DB\u4E2A\u8FB9\u754C</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matrixSize<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> upbound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rightbound <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> bottombound <span class="token operator">=</span> matrixSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> leftbound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> resSize <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>matrixSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>resSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token operator">&lt;</span>resSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>upbound<span class="token operator">&lt;=</span>bottombound<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> leftbound<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>rightbound<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                res<span class="token punctuation">[</span>flag<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>upbound<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            upbound<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>leftbound<span class="token operator">&lt;=</span>rightbound<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> upbound<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>bottombound<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                res<span class="token punctuation">[</span>flag<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rightbound<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            rightbound<span class="token operator">--</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>upbound<span class="token operator">&lt;=</span>bottombound<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> rightbound<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span>leftbound<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                res<span class="token punctuation">[</span>flag<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>bottombound<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            bottombound<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
       
        <span class="token keyword">if</span><span class="token punctuation">(</span>leftbound<span class="token operator">&lt;=</span>rightbound<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bottombound<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span>upbound<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                res<span class="token punctuation">[</span>flag<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>leftbound<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            leftbound<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> resSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-31-\u6808\u7684\u538B\u5165\u3001\u5F39\u51FA\u5E8F\u5217-946" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-31-\u6808\u7684\u538B\u5165\u3001\u5F39\u51FA\u5E8F\u5217-946" aria-hidden="true">#</a> \u5251\u6307 Offer 31. \u6808\u7684\u538B\u5165\u3001\u5F39\u51FA\u5E8F\u5217\uFF08946\uFF09</h2><div class="custom-container tip"><p class="custom-container-title">\u4EE3\u7801\u5C0F\u5751</p><p>\u5224\u65AD\u8D8A\u754C\u7684\u6807\u5FD7\u4F4D\u4E00\u5B9A\u8981\u5148\u5224\u65AD\uFF0C\u5426\u5219\u4F1A\u4EA7\u751F\u8D8A\u754C\u9519\u8BEF</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>top<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>popped<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span>     <span class="token comment">//yes</span>
popped<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>top<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span>     <span class="token comment">//err</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6A21\u62DF\u6808</span>
bool <span class="token function">validateStackSequences</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> pushed<span class="token punctuation">,</span> <span class="token keyword">int</span> pushedSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> popped<span class="token punctuation">,</span> <span class="token keyword">int</span> poppedSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>pushedSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pushedSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        
        stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> pushed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5224\u65AD\u8D8A\u754C\u7684\u6807\u5FD7\u4F4D\u4E00\u5B9A\u8981\u5148\u5224\u65AD\uFF0C\u5426\u5219\u4F1A\u4EA7\u751F\u8D8A\u754C\u9519\u8BEF</span>
        <span class="token comment">//top!=-1&amp;&amp;popped[j]==stack[top]     //yes</span>
        <span class="token comment">//popped[j]==stack[top]&amp;&amp;top!=-1     //err</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>popped<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
            top<span class="token operator">--</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-20-\u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-20-\u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5251\u6307 Offer 20. \u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u63A7\u5236\u72B6\u6001</span>
bool <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>

    <span class="token comment">//\u8DF3\u8FC7\u9996\u5C3E\u7A7A\u683C</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    bool isNum <span class="token operator">=</span> false<span class="token punctuation">;</span>
    bool isDot <span class="token operator">=</span> false<span class="token punctuation">;</span>
    bool isEe <span class="token operator">=</span> false<span class="token punctuation">;</span>
    bool isSign <span class="token operator">=</span> false<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            isNum <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u4E00\u4E2A&#39;.&#39;\uFF1Be/E\u540E\u9762\u8DDF\u4E00\u4E2A\u6574\u6570\uFF08\u4E0D\u80FD\u6709&#39;.&#39;\uFF09</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isDot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isEe<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            isDot <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u4E00\u4E2A&#39;E&#39;\u6216&#39;e&#39;\uFF1B\u524D\u9762\u9700\u8981\u51FA\u73B0\u8FC7\u6570\u5B57</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;E&#39;</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isNum <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isEe<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            isEe <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token comment">//// \u907F\u514De\u7ED3\u5C3E\u7684\u60C5\u51B5 e\u540E\u9762\u5F97\u8DDF\u4E00\u4E2A\u6574\u6570</span>
            isNum <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// &#39;+&#39;&#39;-&#39;\u53EA\u80FD\u51FA\u73B0\u5728\u5F00\u5934\u6216\u8005&#39;E&#39;\u6216&#39;e&#39;\u7684\u540E\u4E00\u4F4D</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;+&#39;</span><span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span>left<span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;E&#39;</span><span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            isSign <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5FC5\u987B\u4EE5\u6570\u5B57\u7ED3\u5C3E</span>
    <span class="token keyword">return</span> isNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5B98\u89E3\u4F18\u96C5\u7684\u6709\u9650\u72B6\u6001\u673A</span>
<span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    STATE_INITIAL<span class="token punctuation">,</span>
    STATE_INT_SIGN<span class="token punctuation">,</span>
    STATE_INTEGER<span class="token punctuation">,</span>
    STATE_POINT<span class="token punctuation">,</span>
    STATE_POINT_WITHOUT_INT<span class="token punctuation">,</span>
    STATE_FRACTION<span class="token punctuation">,</span>
    STATE_EXP<span class="token punctuation">,</span>
    STATE_EXP_SIGN<span class="token punctuation">,</span>
    STATE_EXP_NUMBER<span class="token punctuation">,</span>
    STATE_END<span class="token punctuation">,</span>
    STATE_ILLEGAL
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">CharType</span> <span class="token punctuation">{</span>
    CHAR_NUMBER<span class="token punctuation">,</span>
    CHAR_EXP<span class="token punctuation">,</span>
    CHAR_POINT<span class="token punctuation">,</span>
    CHAR_SIGN<span class="token punctuation">,</span>
    CHAR_SPACE<span class="token punctuation">,</span>
    CHAR_ILLEGAL
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//\u6B64\u5904\u5C55\u793A\u4E86\u679A\u4E3E\u51FD\u6570</span>
<span class="token keyword">enum</span> <span class="token class-name">CharType</span> <span class="token function">toCharType</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> CHAR_NUMBER<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;e&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;E&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> CHAR_EXP<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> CHAR_POINT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> CHAR_SIGN<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> CHAR_SPACE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> CHAR_ILLEGAL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">State</span> st<span class="token punctuation">,</span> <span class="token keyword">enum</span> <span class="token class-name">CharType</span> typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> STATE_INITIAL<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_SPACE<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_INITIAL<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_INTEGER<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_POINT<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_POINT_WITHOUT_INT<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_SIGN<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_INT_SIGN<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_INT_SIGN<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_INTEGER<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_POINT<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_POINT_WITHOUT_INT<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_INTEGER<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_INTEGER<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_EXP<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_EXP<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_POINT<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_POINT<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_SPACE<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_END<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_POINT<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_FRACTION<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_EXP<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_EXP<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_SPACE<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_END<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_POINT_WITHOUT_INT<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_FRACTION<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_FRACTION<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_FRACTION<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_EXP<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_EXP<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_SPACE<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_END<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_EXP<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_EXP_NUMBER<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_SIGN<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_EXP_SIGN<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_EXP_SIGN<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_EXP_NUMBER<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_EXP_NUMBER<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_NUMBER<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_EXP_NUMBER<span class="token punctuation">;</span>
                <span class="token keyword">case</span> CHAR_SPACE<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_END<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> STATE_END<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>typ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> CHAR_SPACE<span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_END<span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> STATE_ILLEGAL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

bool <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token class-name">State</span> st <span class="token operator">=</span> STATE_INITIAL<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">enum</span> <span class="token class-name">CharType</span> typ <span class="token operator">=</span> <span class="token function">toCharType</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">enum</span> <span class="token class-name">State</span> nextState <span class="token operator">=</span> <span class="token function">transfer</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> typ<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextState <span class="token operator">==</span> STATE_ILLEGAL<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        st <span class="token operator">=</span> nextState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> st <span class="token operator">==</span> STATE_INTEGER <span class="token operator">||</span> st <span class="token operator">==</span> STATE_POINT <span class="token operator">||</span> st <span class="token operator">==</span> STATE_FRACTION <span class="token operator">||</span> st <span class="token operator">==</span> STATE_EXP_NUMBER <span class="token operator">||</span> st <span class="token operator">==</span> STATE_END<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-67-\u628A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6574\u6570-8" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-67-\u628A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6574\u6570-8" aria-hidden="true">#</a> \u5251\u6307 Offer 67. \u628A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6574\u6570\uFF088\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u786E\u5B9A\u6709\u9650\u72B6\u6001\u673A\uFF08deterministic finite automaton, DFA\uFF09</span>
<span class="token keyword">int</span> <span class="token function">strToInt</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* \u5904\u7406\u524D\u5BFC\u7A7A\u683C */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* \u7B2C\u4E00\u4E2A\u5B57\u7B26\u7684\u6B63\u8D1F */</span>
    bool flag <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> false<span class="token punctuation">;</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* \u5B57\u7B26\u540E\u9762\u7684\u6570\u5B570 */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* \u5F00\u59CB\u5904\u7406\u5B57\u7B26 */</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//\u5224\u65AD\u6B63\u8D1F</span>
            res <span class="token operator">=</span> flag <span class="token operator">?</span> <span class="token operator">*</span>str <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* \u5F53\u524Dres\u5C0F\u4E8EINT_MAX / 10\u65F6\uFF1B
             * \u5F53\u524Dres\u7B49\u4E8EINT_MAX / 10\u3001(*str - &#39;0&#39;)\u5C0F\u4E8EINT_MAX % 10\u65F6\uFF1B
             * res\u66F4\u65B0\u4E4B\u540E\u5747\u4E3A\u8D85\u8FC7int\u6700\u5927\u8303\u56F4
             */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> 
                <span class="token operator">||</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> INT_MAX <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">/* \u5F53\u524Dres\u5927\u4E8EINT_MIN / 10\u65F6\uFF1B
             * \u5F53\u524Dres\u7B49\u4E8EINT_MIN / 10\u3001(*str - &#39;0&#39;)\u5C0F\u4E8Eabs(INT_MAX % 10)\u65F6\uFF1B
             * res\u66F4\u65B0\u4E4B\u540E\u5747\u4E3A\u8D85\u8FC7int\u6700\u5C0F\u8303\u56F4
             */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;</span> INT_MIN <span class="token operator">/</span> <span class="token number">10</span> 
                <span class="token operator">||</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> INT_MIN <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">abs</span><span class="token punctuation">(</span>INT_MAX <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-59-i-\u6ED1\u52A8\u7A97\u53E3\u7684\u6700\u5927\u503C-239" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-59-i-\u6ED1\u52A8\u7A97\u53E3\u7684\u6700\u5927\u503C-239" aria-hidden="true">#</a> \u5251\u6307 Offer 59 - I. \u6ED1\u52A8\u7A97\u53E3\u7684\u6700\u5927\u503C\uFF08239\uFF09</h2><p><strong>\u5927\u6839\u5806\uFF08\u4F18\u5148\u961F\u5217\uFF09</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5927\u6839\u5806\u7ED3\u6784\u4F53</span>
<span class="token keyword">struct</span> <span class="token class-name">Heap</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> heap<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token operator">*</span> q<span class="token punctuation">,</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    q<span class="token operator">-&gt;</span>heap <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>heap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>capacity<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        q<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">setFree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>obj<span class="token operator">-&gt;</span>capacity<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> num0<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>  
    <span class="token comment">//\u5229\u7528\u4E86\u6570\u7EC4\u4E0B\u6807\u8868\u793A\u6811</span>
    <span class="token keyword">int</span> sub1 <span class="token operator">=</span> <span class="token operator">++</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> sub2 <span class="token operator">=</span> sub1 <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> num0<span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num1<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>sub2 <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub2<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5411\u4E0A\u8C03\u6574</span>
        sub1 <span class="token operator">=</span> sub2<span class="token punctuation">,</span> sub2 <span class="token operator">=</span> sub1 <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sub <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//\u8F93\u51FA\u6839\u8282\u70B9</span>
    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>sub <span class="token operator">&lt;=</span> obj<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sub1 <span class="token operator">=</span> sub <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> sub2 <span class="token operator">=</span> sub <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> maxSub <span class="token operator">=</span> sub<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sub1 <span class="token operator">&lt;=</span> obj<span class="token operator">-&gt;</span>size <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>maxSub<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxSub <span class="token operator">=</span> sub1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sub2 <span class="token operator">&lt;=</span> obj<span class="token operator">-&gt;</span>size <span class="token operator">&amp;&amp;</span> <span class="token function">cmp</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>maxSub<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxSub <span class="token operator">=</span> sub2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">==</span> maxSub<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>sub<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span>maxSub<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sub <span class="token operator">=</span> maxSub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>heap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>numsSize<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">top</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4ECE\u7B2C\u4E00\u4E2A\u7A97\u53E3\u5F00\u59CB</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">push</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">top</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">pop</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">top</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">setFree</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code>\u5FAA\u73AF\u4E2D<code>++i</code>\uFF0C\u548C<code>i++</code>\u6267\u884C\u7ED3\u679C\u76F8\u540C</p><p><strong>\u5355\u8C03\u961F\u5217</strong></p><p>\u5355\u8C03\u961F\u5217\u6838\u5FC3\u5B9E\u73B0\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u5C06\u524D\u9762\u5C0F\u4E8E\u81EA\u5DF1\u7684\u5143\u7D20\u90FD\u51FA\u961F</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>maxq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> maxq<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
	maxq<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u5728\u5C3E\u90E8\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20 n\uFF0C\u7EF4\u62A4 maxq \u7684\u5355\u8C03\u6027\u8D28</span>
maxq<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5355\u8C03\u961F\u5217</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>numsSize<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> q<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5C06\u524D\u9762\u5C0F\u4E8E\u81EA\u5DF1\u7684\u5143\u7D20\u90FD\u51FA\u961F</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5728\u5C3E\u90E8\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20\uFF0C\u7EF4\u62A4\u5355\u8C03\u6027\u8D28</span>
        q<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>numsSize <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//\u5165\u961F</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        q<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token comment">//q[left] &lt;=i-k   \u5224\u65AD\u5143\u7D20\u662F\u5426\u5728\u961F\u5217\u4E2D\uFF0C\u51FA\u961F</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-59-ii-\u961F\u5217\u7684\u6700\u5927\u503C" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-59-ii-\u961F\u5217\u7684\u6700\u5927\u503C" aria-hidden="true">#</a> \u5251\u6307 Offer 59 - II. \u961F\u5217\u7684\u6700\u5927\u503C</h2><p>\u300C\u5355\u8C03\u961F\u5217\u300D\u8FD9\u4E2A\u6570\u636E\u7ED3\u6784\u4E3B\u8981\u7528\u6765\u8F85\u52A9\u89E3\u51B3\u6ED1\u52A8\u7A97\u53E3\u76F8\u5173\u7684\u95EE\u9898</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> que1<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u6B63\u5E38\u961F\u5217</span>
    <span class="token keyword">int</span> que2<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u5355\u8C03\u961F\u5217</span>
    <span class="token keyword">int</span> head1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rear1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> head2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rear2<span class="token punctuation">;</span>
<span class="token punctuation">}</span> MaxQueue<span class="token punctuation">;</span>

MaxQueue<span class="token operator">*</span> <span class="token function">maxQueueCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MaxQueue<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span>MaxQueue<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MaxQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">maxQueueMax_value</span><span class="token punctuation">(</span>MaxQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>head2<span class="token operator">!=</span>obj<span class="token operator">-&gt;</span>rear2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>que2<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>head2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">maxQueuePush_back</span><span class="token punctuation">(</span>MaxQueue<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token operator">-&gt;</span>que1<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>rear1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token comment">//\u4E0B\u9762\u662F\u5355\u8C03\u961F\u5217\u5165\u961F\u6838\u5FC3\u4EE3\u7801</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>head2<span class="token operator">!=</span>obj<span class="token operator">-&gt;</span>rear2<span class="token operator">&amp;&amp;</span>obj<span class="token operator">-&gt;</span>que2<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>rear2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        obj<span class="token operator">-&gt;</span>rear2<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    obj<span class="token operator">-&gt;</span>que2<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>rear2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">maxQueuePop_front</span><span class="token punctuation">(</span>MaxQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>head1<span class="token operator">==</span>obj<span class="token operator">-&gt;</span>rear1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>que1<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>head1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4E0B\u9762\u662F\u5355\u8C03\u961F\u5217\u51FA\u961F\u6838\u5FC3\u4EE3\u7801</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span>obj<span class="token operator">-&gt;</span>que2<span class="token punctuation">[</span>obj<span class="token operator">-&gt;</span>head2<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        obj<span class="token operator">-&gt;</span>head2<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">maxQueueFree</span><span class="token punctuation">(</span>MaxQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-37-\u5E8F\u5217\u5316\u4E8C\u53C9\u6811-297" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-37-\u5E8F\u5217\u5316\u4E8C\u53C9\u6811-297" aria-hidden="true">#</a> \u5251\u6307 Offer 37. \u5E8F\u5217\u5316\u4E8C\u53C9\u6811\uFF08297\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5C42\u5E8F\u904D\u5386</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Maxsize</span> <span class="token expression"><span class="token number">20480</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">Queue</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> Node<span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> front<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rear<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span>
    str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Queue</span> que<span class="token punctuation">;</span>
    que<span class="token punctuation">.</span>front <span class="token operator">=</span> que<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> t<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span>front<span class="token operator">&lt;</span>que<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        t <span class="token operator">=</span> que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u51FA\u961F</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            temp <span class="token operator">=</span> t<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token operator">-</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//\u8D1F\u6570\u5904\u7406</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">/</span><span class="token number">10000</span><span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">/</span><span class="token number">10000</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">/</span><span class="token number">100</span><span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">/</span><span class="token number">100</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">/</span><span class="token number">10</span><span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">;</span>
            <span class="token comment">//\u5165\u961F</span>
            que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>rear<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>rear<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u7A7A\u5219NULL</span>
            str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;n&#39;</span><span class="token punctuation">;</span>
            str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;u&#39;</span><span class="token punctuation">;</span>
            str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">;</span>
            str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">;</span>
            str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cnt<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    str<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;]&#39;</span><span class="token punctuation">;</span>
    str<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/** Decodes your encoded data to tree. */</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token char">&#39;9&#39;</span><span class="token operator">||</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>signal<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Queue</span> que<span class="token punctuation">;</span>
    que<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    que<span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        signal<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u7B26\u53F7\u4F4D</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8D1F\u52A0\u8D1F\u8FD8\u662F\u8D1F</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> sum<span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>sum<span class="token operator">+</span>signal<span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>val<span class="token operator">=</span>sum<span class="token punctuation">;</span>
    que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>rear<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;]&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        q<span class="token operator">=</span>que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5DE6\u5B69\u5B50</span>
        signal<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;n&#39;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            q<span class="token operator">-&gt;</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
            index<span class="token operator">=</span>index<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                signal<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                index<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> sum<span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>sum<span class="token operator">+</span>signal<span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            q<span class="token operator">-&gt;</span>left<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            q<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>val<span class="token operator">=</span>sum<span class="token punctuation">;</span>
            que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>rear<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u53F3\u5B69\u5B50</span>
        signal<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;]&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            q<span class="token operator">-&gt;</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;n&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            q<span class="token operator">-&gt;</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
            index<span class="token operator">=</span>index<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>signal<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> sum<span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>sum<span class="token operator">+</span>signal<span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            q<span class="token operator">-&gt;</span>right<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            q<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>val<span class="token operator">=</span>sum<span class="token punctuation">;</span>
            que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>rear<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span>front<span class="token operator">&lt;</span>que<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        q<span class="token operator">=</span>que<span class="token punctuation">.</span>Node<span class="token punctuation">[</span>que<span class="token punctuation">.</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        q<span class="token operator">-&gt;</span>left<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
        q<span class="token operator">-&gt;</span>right<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5C42\u5E8F</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">80000</span></span></span>
<span class="token comment">/** Encodes a tree to a single string. */</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* \u7279\u5224 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;[]&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* \u8F85\u52A9\u961F\u5217 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u8FD4\u56DE\u6570\u7EC4 */</span>
    <span class="token keyword">char</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>MAX_SIZE<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u961F\u5217\u6307\u9488 */</span>
    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u961F\u5217\u521D\u503C */</span>
    queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">/* \u8FD4\u56DE\u6570\u7EC4\u521D\u503C */</span>
    <span class="token keyword">char</span> tmpChar<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>tmpChar<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">;</span>
    <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tmpChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u5F00\u59CBBFS */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">&lt;</span> rear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* \u8BB0\u5F55\u5F53\u524D\u961F\u5C3E */</span>
        <span class="token keyword">int</span> curRear <span class="token operator">=</span> rear<span class="token punctuation">;</span>
        <span class="token comment">/* \u5F53\u524D\u5C42 */</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">&lt;</span> curRear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">/* \u5F53\u524D\u8282\u70B9\u7684\u5DE6\u5B69\u5B50\u5B58\u5728 */</span>
                queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
                <span class="token function">memset</span><span class="token punctuation">(</span>tmpChar<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">sprintf</span><span class="token punctuation">(</span>tmpChar<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tmpChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment">/* \u5F53\u524D\u8282\u70B9\u7684\u5DE6\u5B69\u5B50\u4E0D\u5B58\u5728 */</span>
                <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&quot;null,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">/* \u5F53\u524D\u8282\u70B9\u7684\u53F3\u5B69\u5B50\u5B58\u5728 */</span>
                queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                <span class="token function">memset</span><span class="token punctuation">(</span>tmpChar<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">sprintf</span><span class="token punctuation">(</span>tmpChar<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tmpChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment">/* \u5F53\u524D\u8282\u70B9\u7684\u53F3\u5B69\u5B50\u4E0D\u5B58\u5728 */</span>
                <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&quot;null,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">/* \u5F53\u524D\u5C42\u7684\u4E0B\u4E00\u8282\u70B9 */</span>
            front<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* \u627E\u5230\u6700\u540E\u7684\u90A3\u4E2A&quot;,&quot;\u5C06\u5176\u53D8\u4E3A&quot;]&quot; */</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> len <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> len<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            len<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;]&#39;</span><span class="token punctuation">;</span>
    res<span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u8FD4\u56DE */</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/** Decodes your encoded data to tree. */</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* \u7279\u5224 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;[]&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* \u8F85\u52A9\u961F\u5217 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u961F\u5217\u6307\u9488 */</span>
    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u8BB0\u5F55\u5B57\u7B26\u4E32\u4E2D\u7684\u6570\u5B57 */</span>
    <span class="token keyword">char</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* point\u4E3Anum\u7684\u7D22\u5F15\u6307\u9488 */</span>
    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u4E32\u957F\u5EA6 */</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;,&#39;</span> <span class="token operator">||</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* \u5F53\u524D\u5355\u8BCD\u7ED3\u675F */</span>
            <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* \u5F53\u524D\u5355\u8BCD\u4E3ANULL */</span>
                tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">memset</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">/* \u8282\u70B9\u5165\u961F\u5217 */</span>
            queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token comment">/* num\u6E05\u96F6 */</span>
            point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">/* \u5F53\u524D\u5B57\u7B26\u4E0D\u4E3A\u5355\u8BCD\u7ED3\u675F */</span>
            num<span class="token punctuation">[</span>point<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* point\u7F6E\u4E3A1 */</span>
    point<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u8FD4\u56DE\u7ED3\u679C\u7684\u6839\u8282\u70B9 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/* \u5C42\u5E8F\u6784\u9020\u4E8C\u53C9\u6811 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rear<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> tmp <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">/* \u5F53\u524D\u8282\u70B9\u4E0D\u4E3A\u7A7A */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* \u5DE6\u5B69\u5B50\u4E0D\u4E3A\u53F6\u5B50\u8282\u70B9 */</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>point <span class="token operator">&lt;</span> rear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tmp<span class="token operator">-&gt;</span>left <span class="token operator">=</span> queue<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">/* \u53F3\u5B69\u5B50\u4E0D\u4E3A\u53F6\u5B50\u8282\u70B9 */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>point <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> rear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tmp<span class="token operator">-&gt;</span>right <span class="token operator">=</span> queue<span class="token punctuation">[</span>point <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">/* \u6307\u5411\u4E0B\u4E00\u8282\u70B9\u7684\u5B69\u5B50\u8282\u70B9 */</span>
            point <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-38-\u5B57\u7B26\u4E32\u7684\u6392\u5217" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-38-\u5B57\u7B26\u4E32\u7684\u6392\u5217" aria-hidden="true">#</a> \u5251\u6307 Offer 38. \u5B57\u7B26\u4E32\u7684\u6392\u5217</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token operator">/</span>
bool <span class="token function">judgeRepeat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u526A\u679D\uFF0C\u610F\u5473\u7740\u5C31\u662F\u5DF2\u7ECF\u53BB\u8FC7\u4E0A\u8FB9\u4F4D\u7F6E\u7684\u4E0D\u9700\u8981\u518D\u53BB\u4E00\u6B21\u4E86</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// dfs(s)\u65B9\u6CD5\u8FDB\u884C\u5B57\u7B26\u4E32\u7684\u6392\u5217\u7EC4\u5408,\u52A8\u6001\u5206\u914D\u7A7A\u95F4</span>
    <span class="token comment">// \u9012\u5F52\u51FA\u53E3</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// \u5BF9temps \u8FDB\u884Ccopy \u4E00\u4EFD</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judgeRepeat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> head<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> head<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u653E\u5230\u5F00\u5934</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5BF9\u5269\u4E0B\u7684\u518D\u6B21\u8FDB\u884C\u9012\u5F52</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// \u8FDB\u884C\u8FD8\u539F</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permutation</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> baseSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        baseSize <span class="token operator">=</span> baseSize <span class="token operator">*</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>baseSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u9012\u5F52\u5165\u53E3</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5168\u6392\u5217\u6539</span>
bool <span class="token function">isHaveSame</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> indexleft<span class="token punctuation">,</span><span class="token keyword">int</span> indexRight<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>indexleft <span class="token operator">&lt;</span> indexRight<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexleft<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>indexRight<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span> 
        indexRight<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> indexA<span class="token punctuation">,</span><span class="token keyword">int</span> indexB<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> temp  <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token comment">// printf(&quot;%c %c\\n&quot;,nums[indexA],nums[indexB]);</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">==</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHaveSame</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permutation</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">40320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-19-\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D-10" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-19-\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D-10" aria-hidden="true">#</a> \u5251\u6307 Offer 19. \u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\uFF0810\uFF09</h2><p>1\u3001\u5982\u679Cp\u4E3A\u7A7A\uFF0Cs\u4E3A\u7A7A\u5339\u914D\uFF0Cs\u975E\u7A7A\u4E0D\u5339\u914D\uFF1B 2\u3001s\u975E\u7A7A\uFF0Cp == s || p == &#39;.&#39;\u65F6\u7B2C\u4E00\u4E2A\u5B57\u7B26\u5339\u914D\uFF1B 3\u3001<code>(p+1) != &#39;&#39;</code>\uFF0C\u5219\u9012\u5F52\u5224\u65AD\u5269\u4E0B\u7684\u662F\u5426\u5339\u914D <code>first_match &amp;&amp; isMatch(++s, ++p)</code> 4\u3001<code>(p+1) == &#39;*&#39;</code>\uFF0C\u5219\u6709\u4E24\u79CD\u60C5\u51B5\u5339\u914D\uFF1A a: *\u5339\u914D0\u4E2A\u5B57\u7B26\uFF0Cs\u5339\u914D\u5269\u4E0B\u7684\uFF0C\u5373<code>isMatch(s, p+2)</code> b: *\u5339\u914D1\u4E2A\u5B57\u7B26\uFF0C\u7EE7\u7EED\u7528p\u5339\u914D\u5269\u4E0B\u7684s\uFF0C\u5373<code>first_match &amp;&amp; isMatch(s+1, p)</code></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u52A8\u89C41</span>
bool <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u5982\u679Cp\u4E3A\u7A7A\uFF0Cs\u4E3A\u7A7A\u5339\u914D\uFF0Cs\u975E\u7A7A\u4E0D\u5339\u914D\uFF1B</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">*</span>s<span class="token punctuation">;</span>
    <span class="token comment">//\u5176\u5B9E\u662F\u52A8\u89C4\u7684\u53D8\u91CF\uFF0C\u4F5C\u7528\u662F\u5339\u914D\u7B2C\u4E00\u4E2A\u5B57\u7B26</span>
    bool first <span class="token operator">=</span> <span class="token operator">*</span>s<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">==</span><span class="token operator">*</span>s<span class="token operator">||</span><span class="token operator">*</span>p<span class="token operator">==</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u5F00\u59CB\u770B\u7B2C\u4E8C\u4E2A\u5B57\u7B26</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//isMatch(s,p+2)\u610F\u601D\u662Fs\u5339\u914D0\u4E2A\u5B57\u7B26\uFF0C\u7EE7\u7EED\u5339\u914Dp\u540E\u9762\u7684\u90E8\u5206</span>
        <span class="token comment">//(first&amp;&amp;isMatch(++s,p))\u610F\u601D\u662F\u5339\u914D1\u4E2A\u5B57\u7B26\u5C31\u662Ffirst,\u540C\u65F6\u7EE7\u7EED\u7528p\u5339\u914D\u5269\u4E0B\u7684s</span>
        <span class="token keyword">return</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>first<span class="token operator">&amp;&amp;</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token operator">++</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u76F8\u540C\u5C31\u540C\u65F6++</span>
        <span class="token keyword">return</span> first<span class="token operator">&amp;&amp;</span><span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token operator">++</span>s<span class="token punctuation">,</span><span class="token operator">++</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://m.360buyimg.com/babel/jfs/t1/58571/37/20412/18387/62ef7e98E679cbc56/480920160700f542.png" alt="image-20220807165601470.png"></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u52A8\u89C42</span>
bool <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    <span class="token keyword">int</span> slen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> plen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>plen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>slen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>plen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>slen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> plen <span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> slen <span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//\u90FD\u7A7A\u5219\u5339\u914D\u4E0A</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//\u4E00\u4E2A\u7A7A\u4E00\u4E2A\u4E0D\u7A7A\u5219\u6CA1\u6709\u5339\u914D\u4E0A</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//\u5982\u679C\u540E\u4E00\u4E2A\u662F*</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//\u5219\u5F53\u524D\u76F8\u540C\u5339\u914D\u6210\u529F||\u5F53\u524D\u4E3A&#39;.&#39;\u4E14s\u4E0D\u7A7A\u5339\u914D\u6210\u529F</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token comment">//\u5339\u914D\u4E00\u4E2A\u3001\u6216\u8005\u5339\u914D0\u4E2A</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">|</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token comment">//\u5339\u914D0\u4E2A</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-49-\u4E11\u6570-246" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-49-\u4E11\u6570-246" aria-hidden="true">#</a> \u5251\u6307 Offer 49. \u4E11\u6570\uFF08246\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u52A8\u89C4</span>
<span class="token keyword">int</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3<span class="token punctuation">;</span>
        n1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
        n2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>
        n3 <span class="token operator">=</span> dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token comment">//\u72B6\u6001\u8F6C\u79FB</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span><span class="token function">fmin</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span>n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>n1<span class="token punctuation">)</span>a<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>n2<span class="token punctuation">)</span>b<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>n3<span class="token punctuation">)</span>c<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-60-n\u4E2A\u9AB0\u5B50\u7684\u70B9\u6570" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-60-n\u4E2A\u9AB0\u5B50\u7684\u70B9\u6570" aria-hidden="true">#</a> \u5251\u6307 Offer 60. n\u4E2A\u9AB0\u5B50\u7684\u70B9\u6570</h2><p>\u53EF\u4EE5\u770Bk\u795E\u7684\u9006\u5411dp</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//z</span>
<span class="token keyword">double</span><span class="token operator">*</span> <span class="token function">dicesProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u521D\u59CB\u5316base</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">//\u72B6\u6001\u8F6C\u79FB</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">double</span> amount <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>amount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-17-\u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-17-\u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570" aria-hidden="true">#</a> \u5251\u6307 Offer 17. \u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570</h2><p>\u505A\u9898\u8FD8\u662F\u52A1\u5B9E\u7684\u597D\uFF0C\u4E0D\u80FD\u56E0\u4E3A\u6761\u4EF6\u9650\u5236\u5BBD\u677E\u800C\u653E\u4F4E\u5BF9\u81EA\u5DF1\u7684\u8981\u6C42</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>end<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        nums<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u53BB\u96F6,\u6B64\u5904\u9700\u8981\u5224\u65AD\u662F\u5426\u5168\u4E3A0\uFF0C\u628A\u591A\u4F59\u76840\u53BB\u6389</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>str<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">strcpy</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        str<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token comment">//\u5FC5\u987B\u6709\u7ED3\u675F\u7B26\uFF0C\u4E0D\u7136strcpy\u8D8A\u754C</span>
        str<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>str<span class="token punctuation">,</span>end<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">printNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span> returnSize <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> numsc <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> nums <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DFS</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>str<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u8F6C\u5316</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token operator">*</span>returnSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        numsc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u6B64\u9898\u8F93\u51FA\u5B57\u7B26\u4E32\u6570\u7EC4\u4E3Anums,</span>
    <span class="token comment">//\u8F93\u51FAint\u6570\u7EC4\u4E3Anumsc,</span>
    <span class="token keyword">return</span> numsc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-51-\u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-51-\u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9" aria-hidden="true">#</a> \u5251\u6307 Offer 51. \u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5F52\u5E76\u6392\u5E8F\u4E2D\u52A0\u4E86\u4E00\u4E2A\u6570\u91CF\u7EDF\u8BA1</span>
<span class="token keyword">int</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> tmp<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span>right<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span><span class="token comment">//\u5DE6\u8FB9\u5934</span>
    <span class="token keyword">int</span> j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u53F3\u8FB9\u5934</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>left<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>left<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token operator">||</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            res <span class="token operator">+=</span> mid<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-14-ii-\u526A\u7EF3\u5B50-ii-343" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-14-ii-\u526A\u7EF3\u5B50-ii-343" aria-hidden="true">#</a> \u5251\u6307 Offer 14- II. \u526A\u7EF3\u5B50 II\uFF08343\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u8D2A\u5FC3</span>
<span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">1L</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token comment">//\u8D2A\u5FC3\u7B97\u6CD5\uFF0C\u4F18\u5148\u5207\u4E09\uFF0C\u5176\u6B21\u5207\u4E8C</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token operator">=</span>res<span class="token operator">*</span><span class="token number">3</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
        n<span class="token operator">-=</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u51FA\u6765\u5FAA\u73AF\u53EA\u6709\u4E09\u79CD\u60C5\u51B5\uFF0C\u5206\u522B\u662Fn=2\u30013\u30014</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>res<span class="token operator">*</span>n<span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5FEB\u901F\u5E42</span>
<span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> rem <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>rem<span class="token operator">=</span><span class="token punctuation">(</span>rem<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
        x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rem<span class="token operator">*</span><span class="token number">3</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rem<span class="token operator">*</span><span class="token number">4</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rem<span class="token operator">*</span><span class="token number">6</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-43-1-n-\u6574\u6570\u4E2D-1-\u51FA\u73B0\u7684\u6B21\u6570-233" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-43-1-n-\u6574\u6570\u4E2D-1-\u51FA\u73B0\u7684\u6B21\u6570-233" aria-hidden="true">#</a> \u5251\u6307 Offer 43. 1\uFF5En \u6574\u6570\u4E2D 1 \u51FA\u73B0\u7684\u6B21\u6570\uFF08233\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>eg<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">345</span>YXX<span class="token punctuation">]</span>
		<span class="token number">345</span> <span class="token punctuation">[</span>Y<span class="token punctuation">]</span> XX
base	<span class="token number">000</span>		<span class="token number">00</span>
       	 <span class="token operator">|</span>		 <span class="token operator">|</span>
        <span class="token number">344</span>		<span class="token number">99</span>
\u5C0F\u4E8E<span class="token number">345</span>\u7684\u53EF\u80FD\u79CD\u7C7B\u4E3A\uFF1A<span class="token number">345</span><span class="token operator">*</span><span class="token number">100</span>
\u7B49\u4E8E<span class="token number">345</span>\u7684\u53EF\u80FD\u79CD\u7C7B\u5206\u4E3A<span class="token number">3</span>\u79CD\u60C5\u51B5\uFF1A
Y<span class="token operator">&gt;</span><span class="token number">1</span>		<span class="token number">345</span>		<span class="token number">00</span>
            	 <span class="token operator">|</span>
            	<span class="token number">99</span>
\u53EF\u80FD\u79CD\u7C7B\u4E3A\uFF1A<span class="token number">100</span>
Y<span class="token operator">=</span><span class="token number">1</span>		<span class="token number">345</span>		<span class="token number">00</span>
            	 <span class="token operator">|</span>
            	XX
\u53EF\u80FD\u79CD\u7C7B\u4E3A\uFF1AXX<span class="token operator">+</span><span class="token number">1</span>
Y<span class="token operator">=</span><span class="token number">0</span>		<span class="token number">345</span>		<span class="token number">00</span>
\u53EF\u80FD\u79CD\u7C7B\u4E3A\uFF1A<span class="token number">0</span>
            
\u6240\u4EE5\u4E09\u4E2A\u516C\u5F0F\u5206\u522B\u4E3A\uFF1A
Y<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token number">345</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">100</span> 	<span class="token punctuation">(</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>digit
Y<span class="token operator">=</span><span class="token number">1</span> <span class="token number">345</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span>XX<span class="token operator">+</span><span class="token number">1</span>	high<span class="token operator">*</span>digit<span class="token operator">+</span>low<span class="token operator">+</span><span class="token number">1</span>
Y<span class="token operator">=</span><span class="token number">0</span> <span class="token number">345</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">0</span>		high<span class="token operator">*</span>digit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6570\u5B66 dp</span>
<span class="token keyword">int</span> <span class="token function">countDigitOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> digit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u4E2A\u4F4D</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> high <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> cur <span class="token operator">=</span> n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>high<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>cur<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//high\u548Ccur\u540C\u65F6\u4E3A0\u8BF4\u660E\u5DF2\u7ECF\u8D8A\u8FC7\u6700\u9AD8\u4F4D</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            res <span class="token operator">+=</span> high<span class="token operator">*</span>digit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            res <span class="token operator">+=</span> high<span class="token operator">*</span>digit<span class="token operator">+</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            res <span class="token operator">+=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>digit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        low <span class="token operator">+=</span>cur<span class="token operator">*</span>digit<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> high<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        high <span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>
        digit <span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-44-\u6570\u5B57\u5E8F\u5217\u4E2D\u67D0\u4E00\u4F4D\u7684\u6570\u5B57-400" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-44-\u6570\u5B57\u5E8F\u5217\u4E2D\u67D0\u4E00\u4F4D\u7684\u6570\u5B57-400" aria-hidden="true">#</a> \u5251\u6307 Offer 44. \u6570\u5B57\u5E8F\u5217\u4E2D\u67D0\u4E00\u4F4D\u7684\u6570\u5B57\uFF08400\uFF09</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//           \u6570\u5B57\u8303\u56F4   \u4F4D\u6570   \u6570\u5B57\u6570\u91CF   \u6570\u4F4D\u6570\u91CF</span>
<span class="token comment">//            1 - 9      1        9          9</span>
<span class="token comment">//           10 - 99     2        90         180</span>
<span class="token comment">//          100 - 999    3        900        2700</span>
<span class="token comment">//             ...      ...       ...        ...</span>
<span class="token comment">//        start - end   digit    9*start   9*start*dight</span>
<span class="token keyword">int</span> <span class="token function">findNthDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>

    <span class="token comment">//\u5B9A\u4F4D\u6570\u5B57\u8303\u56F4</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        n<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n<span class="token operator">-</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        digit <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
        start <span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>
        count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">*</span>start<span class="token operator">*</span>digit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u5B9A\u4F4D\u6240\u5728\u6570\u5B57</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>digit<span class="token punctuation">;</span>

    <span class="token comment">//\u5B9A\u4F4D\u6570\u5B57\u7B2C\u51E0\u4F4D</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>digit<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token punctuation">(</span>digit<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        num <span class="token operator">=</span> num<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
        digit<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-36-\u4E8C\u53C9\u641C\u7D22\u6811\u4E0E\u53CC\u5411\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-36-\u4E8C\u53C9\u641C\u7D22\u6811\u4E0E\u53CC\u5411\u94FE\u8868" aria-hidden="true">#</a> \u5251\u6307 Offer 36. \u4E8C\u53C9\u641C\u7D22\u6811\u4E0E\u53CC\u5411\u94FE\u8868</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">//\u4E2D\u5E8F\u904D\u5386\u641C\u7D22\u6811</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Node<span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    Node<span class="token operator">*</span> <span class="token function">treeToDoublyList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token operator">-&gt;</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre<span class="token operator">-&gt;</span>right <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// \u9012\u5F52\u8FB9\u754C: \u53F6\u5B50\u7ED3\u70B9\u8FD4\u56DE</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u5DE6\u5B50\u6811</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">)</span> pre<span class="token operator">-&gt;</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">else</span> head <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// \u4FDD\u5B58\u94FE\u8868\u5934\u7ED3\u70B9</span>
        root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span> 
        pre <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u53F3\u5B50\u6811</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-35-\u590D\u6742\u94FE\u8868\u7684\u590D\u5236-138" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-35-\u590D\u6742\u94FE\u8868\u7684\u590D\u5236-138" aria-hidden="true">#</a> \u5251\u6307 Offer 35. \u590D\u6742\u94FE\u8868\u7684\u590D\u5236\uFF08138\uFF09</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">//3\u6B21\u8FED\u4EE3 c++</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> nodeNew<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            nodeNew<span class="token operator">-&gt;</span>random <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>random <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token operator">-&gt;</span>random<span class="token operator">-&gt;</span>next <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Node<span class="token operator">*</span> headNew <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> nodeNew<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> headNew<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//3\u6B21\u8FED\u4EE3 c\u8BED\u8A00</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u5148\u7ED9\u6BCF\u4E2A\u8282\u70B9\u540E\u8FB9\u52A0\u4E2A\u8282\u70B9</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> nodeNew <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nodeNew<span class="token operator">-&gt;</span>val <span class="token operator">=</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> nodeNew<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u628A\u539F\u6765\u7684random\u8F6C\u5230\u65B0\u7684\u8282\u70B9\u4E0A</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        nodeNew<span class="token operator">-&gt;</span>random <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>random <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token operator">-&gt;</span>random<span class="token operator">-&gt;</span>next <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u65AD\u5F00\u539F\u6765\u65E7\u7684\u8282\u70B9</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> headNew <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>nodeNew<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span> nodeNew<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> headNew<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">//c++ hash+\u56DE\u6EAF</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">//\u5EFA\u7ACBhash</span>
    unordered_map<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token punctuation">,</span> Node<span class="token operator">*</span><span class="token operator">&gt;</span> cachedNode<span class="token punctuation">;</span>
    <span class="token comment">//ptr\u6307\u9488\u7684\u610F\u601D</span>
    <span class="token comment">//NULL==0 nullptr==\u7A7A\u6307\u9488</span>
    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cachedNode<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> headNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cachedNode<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> headNew<span class="token punctuation">;</span>
            headNew<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            headNew<span class="token operator">-&gt;</span>random <span class="token operator">=</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cachedNode<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//hash+\u56DE\u6EAF </span>
<span class="token comment">/*
    \u601D\u8DEF\u5176\u5B9E\u662F\u8D70\u4E24\u8D9F\uFF0C\u8FC7\u53BB\u7684\u65F6\u5019\u8FDB\u884C\u62F7\u8D1D\u521B\u5EFA\uFF0C\u56DE\u6765\u7684\u65F6\u5019\u8FDB\u884Crandom\u67E5\u8868
*/</span>
<span class="token keyword">struct</span> <span class="token class-name">HashTable</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">*</span> cachedNode<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">HashTable</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>cachedNode<span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> headNew <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headNew<span class="token operator">-&gt;</span>val <span class="token operator">=</span> head<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
        tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">HashTable</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>key <span class="token operator">=</span> head<span class="token punctuation">;</span>
        tmp<span class="token operator">-&gt;</span>val <span class="token operator">=</span> headNew<span class="token punctuation">;</span>
        <span class="token function">HASH_ADD_PTR</span><span class="token punctuation">(</span>cachedNode<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        headNew<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        headNew<span class="token operator">-&gt;</span>random <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cachedNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5251\u6307-offer-41-\u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570-295" tabindex="-1"><a class="header-anchor" href="#\u5251\u6307-offer-41-\u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570-295" aria-hidden="true">#</a> \u5251\u6307 Offer 41. \u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570\uFF08295\uFF09</h2><h3 id="\u5173\u4E8E\u4F18\u5148\u961F\u5217-\u5806" tabindex="-1"><a class="header-anchor" href="#\u5173\u4E8E\u4F18\u5148\u961F\u5217-\u5806" aria-hidden="true">#</a> \u5173\u4E8E\u4F18\u5148\u961F\u5217\uFF08\u5806\uFF09</h3><ol><li>\u5982\u679C\u662F\u4ECE\u6570\u7EC4\u5934\u90E8\u63D2\u5165\uFF0C\u76F8\u5F53\u4E8E\u5806\u9876\u63D2\u5165\uFF0C\u5219\u9700\u8981\u4E0B\u6C89\uFF0C\u5411\u4E0B\u8C03\u6574</li><li>\u5982\u679C\u662F\u4ECE\u6570\u7EC4\u5C3E\u90E8\u63D2\u5165\uFF0C\u76F8\u5F53\u4E8E\u5806\u4F4E\u63D2\u5165\uFF0C\u5219\u9700\u8981\u4E0A\u6D6E\uFF0C\u5411\u4E0A\u8C03\u6574</li><li>\u5220\u9664\u540C\u7406</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5229\u7528\u5927\u6839\u5806\u5C0F\u6839\u5806\u6765\u7EF4\u62A4\u4E2D\u4F4D\u6570</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Heap</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">;</span>   <span class="token comment">//\u5B58\u653E\u5806\u7684\u6570\u7EC4</span>
    <span class="token keyword">int</span>  capacity<span class="token punctuation">;</span><span class="token comment">//\u6570\u7EC4\u7684\u5BB9\u91CF</span>
    <span class="token keyword">int</span>  len<span class="token punctuation">;</span>     <span class="token comment">//\u5DF2\u5B58\u6570\u7EC4\u7684\u5927\u5C0F</span>
<span class="token punctuation">}</span>Heap<span class="token punctuation">;</span>
                                                        <span class="token comment">/*\u5927\u5C0F\u6839\u5806\u5207\u6362\u5F00\u5173*/</span>
<span class="token keyword">int</span>  <span class="token function">HeapLen</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//heap\u83B7\u53D6\u5F53\u524D\u7684\u5806\u5927\u5C0F</span>
<span class="token keyword">void</span> <span class="token function">HeapSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> pLeft<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pRight<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//heap\u4EA4\u6362\u7236\u5B50\u7ED3\u70B9\u7684\u6570\u503C</span>
bool <span class="token function">HeapEmpty</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//heap\u5224\u7A7A</span>
bool <span class="token function">HeapFull</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//heap\u5224\u6EE1</span>
<span class="token keyword">int</span>  <span class="token function">HeapGetTop</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//heap\u83B7\u53D6\u5806\u9876</span>
<span class="token keyword">void</span> <span class="token function">HeapInsert</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">,</span> <span class="token keyword">int</span>  dat<span class="token punctuation">,</span>bool isMax<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//heap\u5411\u5806\u7684\u5C3E\u90E8\u63D2\u51651\u4E2A\u5143\u7D20</span>
<span class="token keyword">void</span> <span class="token function">HeapDelete</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">,</span>bool isMax<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//heap\u5220\u9664\u5806\u9876</span>
<span class="token keyword">void</span> <span class="token function">HeapAdjustDown</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">,</span> <span class="token keyword">int</span> parent<span class="token punctuation">,</span>bool isMax<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//heap\u5411\u4E0B\u8C03\u6574</span>
<span class="token keyword">void</span> <span class="token function">HeapAdjustUp</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">,</span> <span class="token keyword">int</span> child<span class="token punctuation">,</span>bool isMax<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//heap\u5411\u4E0A\u8C03\u6574</span>
Heap<span class="token operator">*</span> <span class="token function">CreateHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//heap\u521B\u5EFA</span>
<span class="token keyword">void</span> <span class="token function">heapFree</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//heap\u91CA\u653E\u7A7A\u95F4</span>

<span class="token keyword">int</span> <span class="token function">HeapLen</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> hp<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">HeapEmpty</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span>          <span class="token comment">//\u5224\u7A7A</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HeapLen</span><span class="token punctuation">(</span>hp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">HeapFull</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span>          <span class="token comment">//\u5224\u6EE1</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hp<span class="token operator">-&gt;</span>capacity <span class="token operator">==</span> hp<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">HeapSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> pLeft<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pRight<span class="token punctuation">)</span><span class="token comment">//\u4EA4\u6362\u6570\u503C</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u4EA4\u6362\u5806\u4E2D\u7684\u7236\u5B50\u7ED3\u70B9</span>
    <span class="token keyword">int</span>  temp<span class="token punctuation">;</span>
    temp    <span class="token operator">=</span> <span class="token operator">*</span>pLeft<span class="token punctuation">;</span>
    <span class="token operator">*</span>pLeft  <span class="token operator">=</span> <span class="token operator">*</span>pRight<span class="token punctuation">;</span>
    <span class="token operator">*</span>pRight <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">HeapGetTop</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



Heap<span class="token operator">*</span> <span class="token function">CreateHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Heap<span class="token operator">*</span> heap <span class="token operator">=</span> <span class="token punctuation">(</span>Heap<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Heap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>   heapLen <span class="token operator">=</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u957F\u5EA6\u6BD4size\u7684\u957F\u5EA6\u59271\u624D\u884C</span>
    <span class="token comment">//\u7ED9\u5806\u7533\u8BF7\u7A7A\u95F4,\u521D\u59CB\u5316</span>
    heap<span class="token operator">-&gt;</span>array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> heapLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    heap<span class="token operator">-&gt;</span>capacity  <span class="token operator">=</span> heapLen<span class="token punctuation">;</span>     <span class="token comment">//\u5BB9\u91CF</span>
    heap<span class="token operator">-&gt;</span>len       <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//\u5F53\u524D\u5927\u5C0F</span>
    <span class="token keyword">return</span> heap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">HeapAdjustDown</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">,</span> <span class="token keyword">int</span> parent <span class="token punctuation">,</span>bool isMax<span class="token punctuation">)</span><span class="token comment">//\u5411\u4E0B\u8C03\u6574</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u6807\u8BB0\u5DE6\u53F3\u5B69\u5B50\u4E2D\u6700\u5C0F\u5B69\u5B50</span>
    <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> parent<span class="token punctuation">;</span>            <span class="token comment">//\u5DE6\u5B69\u5B50\u4E3A2*parent  \u53F3\u5B69\u5B50\u4E3A 2*parent +1</span>
    <span class="token keyword">int</span> len  <span class="token operator">=</span> hp<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">&lt;</span> len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isMax<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u5927\u6839\u5806 \u9009\u6700\u5927\u7684</span>
            <span class="token comment">//\u6709\u53F3\u5B50\u6811\u65F6 \uFF0C\u627E\u5DE6\u53F3\u5B69\u5B50\u4E2D\u6700\u5927\u7684\u5B69\u5B50 </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                child <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

            <span class="token comment">//\u6700\u5927\u5B69\u5B50\u5927\u4E8E\u53CC\u4EB2\u65F6 \uFF0C\u5B69\u5B50\u4E0E\u53CC\u4EB2\u6570\u503C\u4EA4\u6362\uFF0C\u5426\u5219\u8BF4\u660E\u5DF2\u7ECF\u8C03\u597D\uFF0C\u4E0D\u7528\u7EE7\u7EED</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&gt;</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">HeapSwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//\u8FD9\u91CC\u662F\u5728\u5411\u4E0B\u79FB\u52A8\uFF0C\u56E0\u4E3A\u662F\u5411\u4E0B\u8C03\u6574\uFF0C\u5C31\u662Fparent\u5411\u4E0B\u6C89</span>
                parent <span class="token operator">=</span> child<span class="token punctuation">;</span>
                child <span class="token operator">=</span> parent <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u5C0F\u6839\u5806  \u9009\u6700\u5C0F\u7684</span>
            <span class="token comment">//\u6709\u53F3\u5B50\u6811\u65F6 \uFF0C\u627E\u5DE6\u53F3\u5B69\u5B50\u4E2D\u6700\u5C0F\u7684\u5B69\u5B50 </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&gt;</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                child <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

            <span class="token comment">//\u6700\u5C0F\u5B69\u5B50\u5C0F\u4E8E\u53CC\u4EB2\u65F6 \uFF0C\u5B69\u5B50\u4E0E\u53CC\u4EB2\u6570\u503C\u4EA4\u6362\uFF0C\u5426\u5219\u8BF4\u660E\u5DF2\u7ECF\u8C03\u597D\uFF0C\u4E0D\u7528\u7EE7\u7EED</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">HeapSwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//\u8FD9\u91CC\u662F\u5728\u5411\u4E0B\u79FB\u52A8\uFF0C\u56E0\u4E3A\u662F\u5411\u4E0B\u8C03\u6574\uFF0C\u5C31\u662Fparent\u5411\u4E0B\u6C89</span>
                parent <span class="token operator">=</span> child<span class="token punctuation">;</span>
                child <span class="token operator">=</span> parent <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">HeapAdjustUp</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">,</span> <span class="token keyword">int</span> child<span class="token punctuation">,</span>bool isMax<span class="token punctuation">)</span><span class="token comment">//\u5411\u4E0A\u8C03\u6574</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u5F97\u5230\u7236\u6BCD\u7ED3\u70B9\u7684\u4F4D\u7F6E</span>
    <span class="token keyword">int</span> parent <span class="token operator">=</span> child <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isMax<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u5927\u6839\u5806\u9009\u62E9\u5927\u7684</span>
            <span class="token comment">//\u5FAA\u73AF\u8FED\u4EE3\u4ECEchild\u5F53\u524D\u4F4D\u7F6E\u4E00\u76F4\u8FED\u4EE3\u52300\u4F4D\u7F6E\u5373\u5BF9\u9876</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&gt;</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">HeapSwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//\u8FD9\u91CC\u662F\u5728\u5411\u4E0A\u79FB\u52A8\uFF0C\u56E0\u4E3A\u662F\u5411\u4E0A\u8C03\u6574\uFF0C\u5C31\u662Fparent\u5411\u4E0A\u6D6E</span>
                child <span class="token operator">=</span> parent<span class="token punctuation">;</span>
                parent <span class="token operator">=</span> child<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u5C0F\u6839\u5806\u9009\u62E9\u5C0F\u7684</span>
            <span class="token comment">//\u5FAA\u73AF\u8FED\u4EE3\u4ECEchild\u5F53\u524D\u4F4D\u7F6E\u4E00\u76F4\u8FED\u4EE3\u52300\u4F4D\u7F6E\u5373\u5BF9\u9876</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">HeapSwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//\u8FD9\u91CC\u662F\u5728\u5411\u4E0A\u79FB\u52A8\uFF0C\u56E0\u4E3A\u662F\u5411\u4E0A\u8C03\u6574\uFF0C\u5C31\u662Fparent\u5411\u4E0A\u6D6E</span>
                child <span class="token operator">=</span> parent<span class="token punctuation">;</span>
                parent <span class="token operator">=</span> child<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">HeapDelete</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">,</span>bool isMax<span class="token punctuation">)</span><span class="token comment">//\u5220\u9664\u5806\u9876</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HeapEmpty</span><span class="token punctuation">(</span>hp<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token comment">//\u7528\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u8986\u76D6\u5806\u9876\uFF0C\u76F8\u5F53\u4E8E\u5220\u9664\u5806\u9876</span>
    hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>hp<span class="token operator">-&gt;</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    hp<span class="token operator">-&gt;</span>len<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//\u5220\u9664\u6700\u540E\u4E00\u4E2A\u5143\u7D20 heap\u957F\u5EA6\u53D8\u77ED</span>
    <span class="token function">HeapAdjustDown</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>isMax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5BF9\u7B2C\u4E00\u4E2A\u5143\u7D20\u8FDB\u884C\u8C03\u6574</span>
<span class="token punctuation">}</span>



<span class="token keyword">void</span> <span class="token function">HeapInsert</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">,</span> <span class="token keyword">int</span>  dat<span class="token punctuation">,</span>bool isMax<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HeapFull</span><span class="token punctuation">(</span>hp<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u6269\u5BB9</span>
        hp<span class="token operator">-&gt;</span>capacity <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        hp<span class="token operator">-&gt;</span>array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">,</span> hp<span class="token operator">-&gt;</span>capacity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//\u63D2\u5165\u5230\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u7684\u4E0B\u4E00\u4E2A\u4F4D\u7F6E</span>
    hp<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span>hp<span class="token operator">-&gt;</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> dat<span class="token punctuation">;</span>
    <span class="token comment">//\u8C03\u6574\u521A\u63D2\u5165\u5143\u7D20\uFF0C</span>
    <span class="token comment">//\u56E0\u4E3A\u63D2\u5165\u7684\u662F\u5806\u7684\u5C3E\u90E8\uFF0C\u9700\u8981\u5806\u5411\u4E0A\u8C03\u6574</span>
    <span class="token function">HeapAdjustUp</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hp<span class="token operator">-&gt;</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>isMax<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">heapFree</span><span class="token punctuation">(</span>Heap<span class="token operator">*</span> hp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hp<span class="token operator">-&gt;</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    <span class="token comment">//\u5DE6\u8FB9\u662F \u6700\u5927\u5806   \u53F3\u8FB9\u662F\u5C0F\u6839\u5806</span>
    <span class="token comment">//0 1 3              5 7 9 </span>
    Heap<span class="token operator">*</span> maxLHeap<span class="token punctuation">;</span>
    Heap<span class="token operator">*</span> minRHeap<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> MedianFinder<span class="token punctuation">;</span>


MedianFinder<span class="token operator">*</span> <span class="token function">medianFinderCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    MedianFinder<span class="token operator">*</span> newMedian <span class="token operator">=</span> <span class="token punctuation">(</span>MedianFinder<span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MedianFinder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newMedian<span class="token operator">-&gt;</span>maxLHeap <span class="token operator">=</span> <span class="token function">CreateHeap</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newMedian<span class="token operator">-&gt;</span>minRHeap <span class="token operator">=</span> <span class="token function">CreateHeap</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newMedian<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">medianFinderAddNum</span><span class="token punctuation">(</span>MedianFinder<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u68C0\u67E5</span>
    <span class="token keyword">int</span> leftHeapLen <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>maxLHeap<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rightHeapLen <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>minRHeap<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftHeapLen <span class="token operator">&lt;=</span> rightHeapLen<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u63D2\u5165\u5DE6\u8FB9\u7684\u6700\u5C0F\u5806</span>
        <span class="token comment">//\u68C0\u67E5\u5F53\u524D\u503C \u662F\u5426\u5927\u4E8E \u53F3\u8FB9\u7684\u6700\u5C0F\u5806\u7684\u5806\u9876\u503C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">HeapEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>minRHeap<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> obj<span class="token operator">-&gt;</span>minRHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//\u4FDD\u5B58\u5F53\u524D\u53F3\u8FB9\u6700\u5C0F\u5806\u5806\u9876\u503C \u9700\u8981\u51C6\u5907\u79FB\u52A8\u5230 \u5DE6\u8FB9 \u6700\u5927\u5806\u4E2D</span>
                <span class="token keyword">int</span>  moveValue <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>minRHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

                <span class="token comment">//\u5C06\u5F53\u524D\u503C\u653E\u5230 \u53F3\u8FB9\u7684\u6700\u5C0F\u5806 \u7684\u5806\u9876</span>
                obj<span class="token operator">-&gt;</span>minRHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
                <span class="token function">HeapAdjustDown</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>minRHeap<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//\u63D2\u5165\u5230\u5DE6\u8FB9\u6700\u5927\u5806\u4E2D</span>
                <span class="token function">HeapInsert</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>maxLHeap<span class="token punctuation">,</span> moveValue<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//\u76F4\u63A5\u7ED3\u675F\u4E86</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//\u8FD9\u91CC\u68C0\u67E5 num\u662F\u5C0F\u4E8E\u53F3\u8FB9\u7684 \u6700\u5C0F\u5806 \u7684\u5806\u9876\u503C\u7684</span>
        <span class="token function">HeapInsert</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>maxLHeap<span class="token punctuation">,</span> num<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u63D2\u5165\u53F3\u8FB9\u7684\u6700\u5927\u5806</span>
        <span class="token comment">//\u68C0\u67E5\u5F53\u524D\u503C \u662F\u5426\u5C0F\u4E8E \u5DE6\u8FB9\u7684\u6700\u5927\u5806\u7684\u5806\u9876\u503C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">HeapEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>maxLHeap<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> obj<span class="token operator">-&gt;</span>maxLHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//\u4FDD\u5B58\u5F53\u524D\u5DE6\u8FB9\u6700\u5927\u5806\u5806\u9876\u503C \u9700\u8981\u51C6\u5907\u79FB\u52A8\u5230 \u53F3\u8FB9 \u6700\u5C0F\u5806\u4E2D</span>
                <span class="token keyword">int</span>  moveValue <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>maxLHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

                <span class="token comment">//\u5C06\u5F53\u524D\u503C\u653E\u5230 \u5DE6\u8FB9\u7684\u6700da\u5806 \u7684\u5806\u9876</span>
                obj<span class="token operator">-&gt;</span>maxLHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
                <span class="token function">HeapAdjustDown</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>maxLHeap<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//\u63D2\u5165\u5230\u53F3\u8FB9\u6700\u5C0F\u5806\u4E2D</span>
                <span class="token function">HeapInsert</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>minRHeap<span class="token punctuation">,</span> moveValue<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//\u76F4\u63A5\u7ED3\u675F\u4E86</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u8FD9\u91CC\u68C0\u67E5 num\u662F\u5927\u4E8E\u5DE6\u8FB9\u7684 \u6700\u5927\u5806 \u7684\u5806\u9876\u503C\u7684</span>
        <span class="token function">HeapInsert</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>minRHeap<span class="token punctuation">,</span> num<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">medianFinderFindMedian</span><span class="token punctuation">(</span>MedianFinder<span class="token operator">*</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>maxLHeap<span class="token operator">-&gt;</span>len <span class="token operator">==</span> obj<span class="token operator">-&gt;</span>minRHeap<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>minRHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> obj<span class="token operator">-&gt;</span>maxLHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>obj<span class="token operator">-&gt;</span>maxLHeap<span class="token operator">-&gt;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">medianFinderFree</span><span class="token punctuation">(</span>MedianFinder<span class="token operator">*</span> obj<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token function">heapFree</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>maxLHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">heapFree</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>minRHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">//c++\u7248</span>
<span class="token keyword">class</span> <span class="token class-name">MedianFinder</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> queMin<span class="token punctuation">;</span>
    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> queMax<span class="token punctuation">;</span>

    <span class="token function">MedianFinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queMin<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> num <span class="token operator">&lt;=</span> queMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            queMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queMax<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> queMin<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queMax<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                queMin<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            queMax<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queMax<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> queMin<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queMax<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                queMax<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">double</span> <span class="token function">findMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queMin<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> queMax<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> queMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>queMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> queMax<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63);function Jn($n,ns){const p=c("RouterLink"),o=c("ExternalLinkIcon");return i(),u("div",null,[k,d,n("nav",v,[n("ul",null,[n("li",null,[a(p,{to:"#\u5251\u6307-offer-09-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217"},{default:t(()=>[m]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-30-\u5305\u542Bmin\u51FD\u6570\u7684\u6808-\u6700\u5C0F\u6808-155"},{default:t(()=>[b]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-06-\u4ECE\u5C3E\u5230\u5934\u6253\u5370\u94FE\u8868"},{default:t(()=>[f]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-24-\u53CD\u8F6C\u94FE\u8868"},{default:t(()=>[y]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-05-\u66FF\u6362\u7A7A\u683C"},{default:t(()=>[w]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-58-ii-\u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32"},{default:t(()=>[h]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-03-\u6570\u7EC4\u4E2D\u91CD\u590D\u7684\u6570\u5B57"},{default:t(()=>[g]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-53-i-\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u6570\u5B57-i"},{default:t(()=>[x]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-53-ii-0-n-1\u4E2D\u7F3A\u5931\u7684\u6570\u5B57"},{default:t(()=>[_]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-04-\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u67E5\u627E"},{default:t(()=>[S]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-50-\u7B2C\u4E00\u4E2A\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u5B57\u7B26"},{default:t(()=>[N]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-32-i-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811"},{default:t(()=>[z]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-32-ii-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811-ii"},{default:t(()=>[L]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-32-iii-\u4ECE\u4E0A\u5230\u4E0B\u6253\u5370\u4E8C\u53C9\u6811-iii"},{default:t(()=>[j]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-26-\u6811\u7684\u5B50\u7ED3\u6784"},{default:t(()=>[T]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-27-\u4E8C\u53C9\u6811\u7684\u955C\u50CF"},{default:t(()=>[A]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-28-\u5BF9\u79F0\u7684\u4E8C\u53C9\u6811"},{default:t(()=>[I]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-10-i-\u6590\u6CE2\u90A3\u5951\u6570\u5217"},{default:t(()=>[q]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-10-ii-\u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898"},{default:t(()=>[E]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-63-\u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6-121"},{default:t(()=>[O]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-42-\u8FDE\u7EED\u5B50\u6570\u7EC4\u7684\u6700\u5927\u548C-53"},{default:t(()=>[H]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-47-\u793C\u7269\u7684\u6700\u5927\u4EF7\u503C"},{default:t(()=>[M]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-46-\u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32"},{default:t(()=>[C]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-48-\u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32"},{default:t(()=>[U]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-18-\u5220\u9664\u94FE\u8868\u7684\u8282\u70B9"},{default:t(()=>[B]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-22-\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9"},{default:t(()=>[R]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-52-\u4E24\u4E2A\u94FE\u8868\u7684\u7B2C\u4E00\u4E2A\u516C\u5171\u8282\u70B9-160"},{default:t(()=>[X]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-25-\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868"},{default:t(()=>[F]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-21-\u8C03\u6574\u6570\u7EC4\u987A\u5E8F\u4F7F\u5947\u6570\u4F4D\u4E8E\u5076\u6570\u524D\u9762"},{default:t(()=>[P]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-57-\u548C\u4E3As\u7684\u4E24\u4E2A\u6570\u5B57"},{default:t(()=>[D]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-58-i-\u7FFB\u8F6C\u5355\u8BCD\u987A\u5E8F"},{default:t(()=>[Q]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-12-\u77E9\u9635\u4E2D\u7684\u8DEF\u5F84-79"},{default:t(()=>[G]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-13-\u673A\u5668\u4EBA\u7684\u8FD0\u52A8\u8303\u56F4"},{default:t(()=>[Z]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-34-\u4E8C\u53C9\u6811\u4E2D\u548C\u4E3A\u67D0\u4E00\u503C\u7684\u8DEF\u5F84-113"},{default:t(()=>[W]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-54-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u7B2Ck\u5927\u8282\u70B9"},{default:t(()=>[V]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-45-\u628A\u6570\u7EC4\u6392\u6210\u6700\u5C0F\u7684\u6570"},{default:t(()=>[Y]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-61-\u6251\u514B\u724C\u4E2D\u7684\u987A\u5B50"},{default:t(()=>[K]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-40-\u6700\u5C0F\u7684k\u4E2A\u6570"},{default:t(()=>[J]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-55-i-\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6-104"},{default:t(()=>[$]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-55-ii-\u5E73\u8861\u4E8C\u53C9\u6811-110"},{default:t(()=>[nn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-64-\u6C421-2-n"},{default:t(()=>[sn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-68-i-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-235"},{default:t(()=>[an]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-68-ii-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148-236"},{default:t(()=>[pn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-07-\u91CD\u5EFA\u4E8C\u53C9\u6811"},{default:t(()=>[tn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-16-\u6570\u503C\u7684\u6574\u6570\u6B21\u65B9-50"},{default:t(()=>[en]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-33-\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u540E\u5E8F\u904D\u5386\u5E8F\u5217"},{default:t(()=>[on]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-15-\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570-191"},{default:t(()=>[cn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-65-\u4E0D\u7528\u52A0\u51CF\u4E58\u9664\u505A\u52A0\u6CD5"},{default:t(()=>[ln]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-56-i-\u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570"},{default:t(()=>[un]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-56-ii-\u6570\u7EC4\u4E2D\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u6570-ii-137"},{default:t(()=>[rn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-39-\u6570\u7EC4\u4E2D\u51FA\u73B0\u6B21\u6570\u8D85\u8FC7\u4E00\u534A\u7684\u6570\u5B57-169"},{default:t(()=>[kn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-66-\u6784\u5EFA\u4E58\u79EF\u6570\u7EC4"},{default:t(()=>[dn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-14-i-\u526A\u7EF3\u5B50-343"},{default:t(()=>[vn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-57-ii-\u548C\u4E3As\u7684\u8FDE\u7EED\u6B63\u6570\u5E8F\u5217"},{default:t(()=>[mn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-62-\u5706\u5708\u4E2D\u6700\u540E\u5269\u4E0B\u7684\u6570\u5B57"},{default:t(()=>[bn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-29-\u987A\u65F6\u9488\u6253\u5370\u77E9\u9635-54"},{default:t(()=>[fn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-31-\u6808\u7684\u538B\u5165\u3001\u5F39\u51FA\u5E8F\u5217-946"},{default:t(()=>[yn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-20-\u8868\u793A\u6570\u503C\u7684\u5B57\u7B26\u4E32"},{default:t(()=>[wn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-67-\u628A\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6574\u6570-8"},{default:t(()=>[hn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-59-i-\u6ED1\u52A8\u7A97\u53E3\u7684\u6700\u5927\u503C-239"},{default:t(()=>[gn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-59-ii-\u961F\u5217\u7684\u6700\u5927\u503C"},{default:t(()=>[xn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-37-\u5E8F\u5217\u5316\u4E8C\u53C9\u6811-297"},{default:t(()=>[_n]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-38-\u5B57\u7B26\u4E32\u7684\u6392\u5217"},{default:t(()=>[Sn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-19-\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D-10"},{default:t(()=>[Nn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-49-\u4E11\u6570-246"},{default:t(()=>[zn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-60-n\u4E2A\u9AB0\u5B50\u7684\u70B9\u6570"},{default:t(()=>[Ln]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-17-\u6253\u5370\u4ECE1\u5230\u6700\u5927\u7684n\u4F4D\u6570"},{default:t(()=>[jn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-51-\u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9"},{default:t(()=>[Tn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-14-ii-\u526A\u7EF3\u5B50-ii-343"},{default:t(()=>[An]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-43-1-n-\u6574\u6570\u4E2D-1-\u51FA\u73B0\u7684\u6B21\u6570-233"},{default:t(()=>[In]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-44-\u6570\u5B57\u5E8F\u5217\u4E2D\u67D0\u4E00\u4F4D\u7684\u6570\u5B57-400"},{default:t(()=>[qn]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-36-\u4E8C\u53C9\u641C\u7D22\u6811\u4E0E\u53CC\u5411\u94FE\u8868"},{default:t(()=>[En]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-35-\u590D\u6742\u94FE\u8868\u7684\u590D\u5236-138"},{default:t(()=>[On]),_:1})]),n("li",null,[a(p,{to:"#\u5251\u6307-offer-41-\u6570\u636E\u6D41\u4E2D\u7684\u4E2D\u4F4D\u6570-295"},{default:t(()=>[Hn]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u5173\u4E8E\u4F18\u5148\u961F\u5217-\u5806"},{default:t(()=>[Mn]),_:1})])])])])]),Cn,Un,Bn,n("p",null,[Rn,n("a",Xn,[Fn,a(o)])]),Pn,n("p",null,[Dn,n("a",Qn,[Gn,a(o)])]),Zn,n("p",null,[Wn,n("a",Vn,[Yn,a(o)])]),Kn])}var as=l(r,[["render",Jn],["__file","page20.html.vue"]]);export{as as default};
