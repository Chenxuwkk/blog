import{_ as l,r as c,o as i,c as u,b as n,e as a,w as t,d as s,a as o}from"./app.b33ca31f.js";const k={},r=n("h1",{id:"leetcode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#leetcode","aria-hidden":"true"},"#"),s(" Leetcode")],-1),d=n("hr",null,null,-1),m={class:"table-of-contents"},v=s("C\u8BED\u8A00\u5E93\u51FD\u6570"),b=s("qsort()"),y=s("\u5DE5\u5177\u51FD\u6570"),w=s("\u5DE5\u5177\u5B8F"),f=s("\u54C8\u5E0C\u51FD\u6570"),h=s("\u4E8C\u5206\u6CD5"),g=s("\u6846\u67B6"),x=s("\u4E8C\u5206\u67E5\u627E\uFF08704\uFF09"),z=s("\u627E\u7B2C\u4E00\u4E2A\u9519\u8BEF(278)"),S=s("\u627E\u63D2\u5165\u4F4D\u7F6E\uFF0835\uFF09"),_=s("\u4E24\u6570\u4E4B\u548C|\u6709\u5E8F\uFF08167\uFF09"),j=s("\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\uFF0834\uFF09"),q=s("\u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\uFF0833\uFF09"),N=s("\u641C\u7D22\u4E8C\u7EF4\u77E9\u9635\uFF0874\uFF09"),L=s("\u641C\u7D22\u4E8C\u7EF4\u77E9\u9635 II\uFF08240\uFF09"),C=s("\u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C\uFF08153\uFF09"),U=s("\u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C II\uFF08154\uFF09"),M=s("\u5BFB\u627E\u5CF0\u503C\uFF08162\uFF09"),T=s("\u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4 II\uFF0881\uFF09"),A=s("x \u7684\u5E73\u65B9\u6839 \uFF0869\uFF09"),I=s("\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570\uFF08222\uFF09"),B=s("H \u6307\u6570 II\uFF08275\uFF09"),D=s("\u5BFB\u627E\u91CD\u590D\u6570\uFF08287\uFF09"),F=s("\u53CC\u6307\u9488\u3001\u6392\u5E8F"),R=s("\u76F4\u63A5\u63D2\u5165\u6392\u5E8F"),P=s("\u5FEB\u901F\u6392\u5E8F"),H=s("\u8BA1\u6570\u6392\u5E8F\uFF08\u7279\u6B8A\u6876\u6392\u5E8F\uFF09"),O=s("\u6709\u5E8F\u6570\u7EC4\u7684\u5E73\u65B9\uFF08977\uFF09"),E=s("\u53CC\u6307\u9488\u6846\u67B6"),X=s("\u8F6E\u8F6C\u6570\u7EC4\uFF08189\uFF09"),W=s("\u79FB\u52A8\u96F6\uFF08283\uFF09"),Y=s("\u4E24\u6570\u4E4B\u548C|\u6709\u5E8F\uFF08167\uFF09"),$=s("\u53CD\u8F6C\u5B57\u7B26\u4E32\uFF08344\uFF09"),K=s("\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD III\uFF08557\uFF09"),Q=s("\u94FE\u8868\u4E2D\u95F4\u8282\u70B9\uFF08876\uFF09"),V=s("\u76F8\u4EA4\u94FE\u8868\uFF08160\uFF09"),Z=s("\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C N \u4E2A\u7ED3\u70B9\uFF0819\uFF09"),G=s("\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20\uFF0883\uFF09"),J=s("\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20 II\uFF0882\uFF09"),nn=s("\u4E09\u6570\u4E4B\u548C\uFF0815\uFF09"),sn=s("\u56DB\u6570\u4E4B\u548C\uFF0818\uFF09"),an=s("\u6BD4\u8F83\u542B\u9000\u683C\u7684\u5B57\u7B26\u4E32\uFF08844\uFF09"),pn=s("\u533A\u95F4\u5217\u8868\u7684\u4EA4\u96C6\uFF08986\uFF09"),tn=s("\u76DB\u6700\u591A\u6C34\u7684\u5BB9\u5668\uFF0811\uFF09"),on=s("\u6700\u957F\u56DE\u6587\u5B50\u4E32\uFF085\uFF09"),en=s("\u6ED1\u52A8\u7A97\u53E3"),cn=s("\u6846\u67B6"),ln=s("\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32\uFF083\uFF09"),un=s("\u5B57\u7B26\u4E32\u7684\u6392\u5217\uFF08567\uFF09"),kn=s("\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD\uFF08438\uFF09"),rn=s("\u4E58\u79EF\u5C0F\u4E8E K \u7684\u5B50\u6570\u7EC4\uFF08713\uFF09"),dn=s("\u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4\uFF08209\uFF09"),mn=s("\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22 / \u6DF1\u5EA6\u4F18\u5148\u641C\u7D22"),vn=s("\u6846\u67B6"),bn=s("\u56FE\u50CF\u6E32\u67D3\uFF08733\uFF09"),yn=s("\u5C9B\u5C7F\u7684\u6700\u5927\u9762\u79EF\uFF08695\uFF09"),wn=s("\u5408\u5E76\u4E8C\u53C9\u6811\uFF08617\uFF09"),fn=s("\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488\uFF08116\uFF09"),hn=s("\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488 II\uFF08117\uFF09"),gn=s("\u76F8\u540C\u7684\u6811\uFF08100\uFF09"),xn=s("\u53E6\u4E00\u68F5\u6811\u7684\u5B50\u6811\uFF08572\uFF09"),zn=s("01 \u77E9\u9635\uFF08542\uFF09"),Sn=s("\u8150\u70C2\u7684\u6A58\u5B50\uFF08994\uFF09"),_n=s("\u5C9B\u5C7F\u6570\u91CF\uFF08200\uFF09"),jn=s("\u7701\u4EFD\u6570\u91CF\uFF08547\uFF09"),qn=s("\u4E8C\u8FDB\u5236\u77E9\u9635\u4E2D\u7684\u6700\u77ED\u8DEF\u5F84\uFF081091\uFF09"),Nn=s("\u88AB\u56F4\u7ED5\u7684\u533A\u57DF\uFF08130\uFF09"),Ln=s("\u6240\u6709\u53EF\u80FD\u7684\u8DEF\u5F84\uFF08797\uFF09"),Cn=s("\u8DEF\u5F84\u603B\u548C\uFF08112\uFF09"),Un=s("\u8DEF\u5F84\u603B\u548C II\uFF08113\uFF09"),Mn=s("\u5E76\u67E5\u96C6"),Tn=s("\u7701\u4EFD\u6570\u91CF\uFF08547\uFF09"),An=s("\u88AB\u56F4\u7ED5\u7684\u533A\u57DF\uFF08130\uFF09"),In=s("\u9012\u5F52\u3001\u56DE\u6EAF"),Bn=s("\u6846\u67B6"),Dn=s("\u5168\u6392\u5217\uFF0846\uFF09"),Fn=s("\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868\uFF0821\uFF09"),Rn=s("\u53CD\u8F6C\u94FE\u8868\uFF08206\uFF09"),Pn=s("\u7EC4\u5408\uFF0877\uFF09"),Hn=s("\u5B57\u6BCD\u5927\u5C0F\u5199\u5168\u6392\u5217\uFF08784\uFF09"),On=s("\u5B50\u96C6\uFF0878\uFF09"),En=s("\u5B50\u96C6 II\uFF0890\uFF09"),Xn=s("\u5168\u6392\u5217 II\uFF0847\uFF09"),Wn=s("\u7EC4\u5408\u603B\u548C\uFF0839\uFF09"),Yn=s("\u7EC4\u5408\u603B\u548C II\uFF0840\uFF09"),$n=s("\u7535\u8BDD\u53F7\u7801\u7684\u5B57\u6BCD\u7EC4\u5408\uFF0817\uFF09"),Kn=s("\u62EC\u53F7\u751F\u6210\uFF0822\uFF09"),Qn=s("\u5355\u8BCD\u641C\u7D22\uFF0879\uFF09"),Vn=s("\u52A8\u6001\u89C4\u5212"),Zn=s("\u6846\u67B6"),Gn=s("\u722C\u697C\u68AF\uFF0870\uFF09"),Jn=s("\u6253\u5BB6\u52AB\u820D\uFF08198\uFF09"),ns=s("\u4E09\u89D2\u5F62\u6700\u5C0F\u8DEF\u5F84\u548C\uFF08120\uFF09"),ss=s("\u6253\u5BB6\u52AB\u820D II\uFF08213\uFF09"),as=s("\u8DF3\u8DC3\u6E38\u620F\uFF0855\uFF09"),ps=s("\u8DF3\u8DC3\u6E38\u620F II\uFF0845\uFF09"),ts=s("\u4E0D\u540C\u8DEF\u5F84\uFF0862\uFF09"),os=s("\u6700\u957F\u56DE\u6587\u5B50\u4E32\uFF085\uFF09"),es=s("\u7B49\u5DEE\u6570\u5217\u5212\u5206\uFF08413\uFF09"),cs=s("\u89E3\u7801\u65B9\u6CD5\uFF0891\uFF09"),ls=s("\u5355\u8BCD\u62C6\u5206\uFF08139\uFF09"),is=s("\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\uFF08300\uFF09"),us=s("\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570\uFF08673\uFF09"),ks=s("\u6700\u957F\u516C\u5171\u5B50\u5E8F\u5217\uFF081143\uFF09"),rs=s("\u4E24\u4E2A\u5B57\u7B26\u4E32\u7684\u5220\u9664\u64CD\u4F5C\uFF08583\uFF09"),ds=s("\u96F6\u94B1\u5151\u6362\uFF08322\uFF09"),ms=s("\u6574\u6570\u62C6\u5206\uFF08343\uFF09"),vs=s("\u6700\u5927\u5B50\u6570\u7EC4\u548C\uFF0853\uFF09"),bs=s("\u4F4D\u8FD0\u7B97"),ys=s("\u57FA\u672C\u64CD\u4F5C"),ws=s("2 \u7684\u5E42\uFF08231\uFF09"),fs=s("\u4F4D1\u7684\u4E2A\u6570\uFF08191\uFF09"),hs=s("\u98A0\u5012\u4E8C\u8FDB\u5236\u4F4D\uFF08190\uFF09"),gs=s("\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57\uFF08136\uFF09"),xs=s("\u4E22\u5931\u7684\u6570\u5B57\uFF08268\uFF09"),zs=s("\u4E24\u6570\u76F8\u9664\uFF0829\uFF09"),Ss=s("\u6570\u5B57\u8303\u56F4\u6309\u4F4D\u4E0E\uFF08201\uFF09"),_s=s("\u5176\u4ED6"),js=s("\u6D17\u724C\u7B97\u6CD5\u6846\u67B6"),qs=s("\u6253\u4E71\u6570\u7EC4\uFF08384\uFF09"),Ns=s("\u5FEB\u4E50\u6570\uFF08202\uFF09"),Ls=s("\u76F4\u7EBF\u4E0A\u6700\u591A\u7684\u70B9\u6570\uFF08149\uFF09"),Cs=s("\u5BFB\u627E\u591A\u6570\u5143\u7D20\uFF08\u4E3B\u5143\u7D20\uFF09"),Us=s("\u5355\u5237"),Ms=s("\u5BFB\u627E\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570\uFF084\uFF09"),Ts=s("\u4E24\u6570\u4E4B\u548C|\u65E0\u5E8F\uFF081\uFF09"),As=s("\u94FE\u8868\u52A0\u6CD5\uFF082\uFF09"),Is=s("\u52A0\u4E00\uFF0866\uFF09"),Bs=s("\u5468\u8D5B"),Ds=s("\u6781\u5927\u6781\u5C0F\u6E38\u620F\uFF086090\uFF09"),Fs=s("\u5212\u5206\u6570\u7EC4\u4F7F\u6700\u5927\u5DEE\u4E3AK\uFF086091\uFF09"),Rs=s("\u5206\u89E3"),Ps=s("\u62BD\u5956"),Hs=s("\u9152\u6876\u3001\u5957\u5A03\u3001\u4FE1\u5C01"),Os=s("\u4E58\u6CD5\u9006\u5143"),Es=s("\u6C34\u4F4D\u7EBF"),Xs=s("\u9006\u6CE2\u5170\u5F0F\u8BA1\u7B97"),Ws=s("\u5403\u5976\u916A"),Ys=s("\u7EBF\u6027\u5582\u732A"),$s=s("\u4E2D\u6691\u7684\u7AF9\u9F20"),Ks=s("\u6700\u5927\u516C\u7EA6\u6570"),Qs=s("\u7BA1\u7406\u901A\u8BAF\u7C3F"),Vs=s("\u5E73\u5747\u4E32"),Zs=s("\u5206\u7403\u5668"),Gs=s("\u5408\u6CD5id"),Js=s("\u65B0\u4E16\u7EAA\u7EBF\u6BB5\u8986\u76D6"),na=s("\u4FE1\u4EF0\u4E4B\u8DC3"),sa=s("\u5206\u6570\u4E2A\u6570"),aa=s("\u4E92\u8D28"),pa=s("\u6700\u5C0F\u6570\u5B57"),ta=s("\u6C42\u89E3\u540C\u4F59\u65B9\u7A0B"),oa=s("\u529B\u6263\u4E3B\u9875\uFF1A"),ea={href:"https://leetcode.cn/u/Chenxuwkk/",target:"_blank",rel:"noopener noreferrer"},ca=s("https://leetcode.cn/u/Chenxuwkk/"),la=s("\u901F\u67E5c++\uFF1A"),ia={href:"https://www.runoob.com/cplusplus/cpp-tutorial.html",target:"_blank",rel:"noopener noreferrer"},ua=s("https://www.runoob.com/cplusplus/cpp-tutorial.html"),ka=s("\u901F\u67E5c\uFF1A"),ra={href:"https://www.runoob.com/cprogramming/c-function-qsort.html",target:"_blank",rel:"noopener noreferrer"},da=s("https://www.runoob.com/cprogramming/c-function-qsort.html"),ma=o(`<h2 id="c\u8BED\u8A00\u5E93\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#c\u8BED\u8A00\u5E93\u51FD\u6570" aria-hidden="true">#</a> C\u8BED\u8A00\u5E93\u51FD\u6570</h2><h3 id="qsort" tabindex="-1"><a class="header-anchor" href="#qsort" aria-hidden="true">#</a> qsort()</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>base<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nitems<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>compar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//base -- \u6307\u5411\u8981\u6392\u5E8F\u7684\u6570\u7EC4\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684\u6307\u9488\u3002</span>
<span class="token comment">//nitems -- \u7531 base \u6307\u5411\u7684\u6570\u7EC4\u4E2D\u5143\u7D20\u7684\u4E2A\u6570\u3002</span>
<span class="token comment">//size -- \u6570\u7EC4\u4E2D\u6BCF\u4E2A\u5143\u7D20\u7684\u5927\u5C0F\uFF0C\u4EE5\u5B57\u8282\u4E3A\u5355\u4F4D\u3002</span>
<span class="token comment">//compar -- \u7528\u4E8E\u5BF9\u6570\u7EC4\u5143\u7D20\u8FDB\u884C\u6BD4\u8F83\u7684\u51FD\u6570\u7684\u6307\u9488\uFF08\u8BE5\u51FD\u6570\u662F\u8981\u81EA\u5DF1\u5199\u7684\uFF09\uFF0C\u8FD4\u56DE\u503C\u4E3A1\u6216-1\uFF08p1&gt;p2\u5219\u8FD4\u56DE-1\uFF0Cp1&lt;p2\u5219\u8FD4\u56DE1\uFF0Cp1==p2\u5219\u8FD4\u56DE0\uFF09\uFF0Cs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*
int cmpfunc (const void * a, const void * b)
{
   return ( *(char*)a - *(char*)b );
}
*/</span>
<span class="token comment">//\u539F\u7406\u5982\u4E0B</span>

<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> dataa <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>
    <span class="token keyword">char</span> datab <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> dataa<span class="token operator">-</span>datab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5347\u5E8F</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>STU<span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token operator">-&gt;</span>num <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>STU<span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token operator">-&gt;</span>num<span class="token punctuation">;</span><span class="token comment">//\u5347\u5E8F</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u7B2C\u4E00\u5217\u964D\u5E8F\uFF0C\u7B2C\u4E8C\u5217\u5347\u5E8F\uFF0C\u53CC\u5173\u952E\u8BCD\u6392\u5E8F</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>aa <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>bb <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>aa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> bb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> aa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> aa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> bb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">qsort</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5DE5\u5177\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u5DE5\u5177\u51FD\u6570" aria-hidden="true">#</a> \u5DE5\u5177\u51FD\u6570</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5B57\u7B26\u4E32\u5220\u9664</span>
<span class="token comment">//\u8F93\u51FA\u65B0\u5B57\u7B26\u4E32</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">arr_del</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6700\u503C</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5B57\u5178\u6BD4\u8F83\uFF08\u5B57\u6BCD\uFF09</span>
<span class="token keyword">int</span> <span class="token function">cmp_dict</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> dict_S<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> dict_P<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dict_S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>dict_P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4EA4\u6362\u503C</span>
<span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5B57\u7B26\u4E32\u64CD\u4F5C\u770B DP\u2014\u300B5</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6700\u5927\u516C\u7EA6\u6570</span>
<span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//int\u8F6Cstring</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">itoa</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> radix<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> index<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="token punctuation">;</span><span class="token comment">//\u7D22\u5F15\u8868</span>
    <span class="token keyword">unsigned</span> unum<span class="token punctuation">;</span><span class="token comment">//\u5B58\u653E\u8981\u8F6C\u6362\u7684\u6574\u6570\u7684\u7EDD\u5BF9\u503C,\u8F6C\u6362\u7684\u6574\u6570\u53EF\u80FD\u662F\u8D1F\u6570</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token comment">//i\u7528\u6765\u6307\u793A\u8BBE\u7F6E\u5B57\u7B26\u4E32\u76F8\u5E94\u4F4D\uFF0C\u8F6C\u6362\u4E4B\u540Ei\u5176\u5B9E\u5C31\u662F\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\uFF1B\u8F6C\u6362\u540E\u987A\u5E8F\u662F\u9006\u5E8F\u7684\uFF0C\u6709\u6B63\u8D1F\u7684\u60C5\u51B5\uFF0Ck\u7528\u6765\u6307\u793A\u8C03\u6574\u987A\u5E8F\u7684\u5F00\u59CB\u4F4D\u7F6E;j\u7528\u6765\u6307\u793A\u8C03\u6574\u987A\u5E8F\u65F6\u7684\u4EA4\u6362\u3002</span>
 
    <span class="token comment">//\u83B7\u53D6\u8981\u8F6C\u6362\u7684\u6574\u6570\u7684\u7EDD\u5BF9\u503C</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>radix<span class="token operator">==</span><span class="token number">10</span><span class="token operator">&amp;&amp;</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//\u8981\u8F6C\u6362\u6210\u5341\u8FDB\u5236\u6570\u5E76\u4E14\u662F\u8D1F\u6570</span>
    <span class="token punctuation">{</span>
        unum<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token comment">//\u5C06num\u7684\u7EDD\u5BF9\u503C\u8D4B\u7ED9unum</span>
        str<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">;</span><span class="token comment">//\u5728\u5B57\u7B26\u4E32\u6700\u524D\u9762\u8BBE\u7F6E\u4E3A&#39;-&#39;\u53F7\uFF0C\u5E76\u4E14\u7D22\u5F15\u52A01</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> unum<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>num<span class="token punctuation">;</span><span class="token comment">//\u82E5\u662Fnum\u4E3A\u6B63\uFF0C\u76F4\u63A5\u8D4B\u503C\u7ED9unum</span>
 
    <span class="token comment">//\u8F6C\u6362\u90E8\u5206\uFF0C\u6CE8\u610F\u8F6C\u6362\u540E\u662F\u9006\u5E8F\u7684</span>
    <span class="token keyword">do</span>
    <span class="token punctuation">{</span>
        str<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>index<span class="token punctuation">[</span>unum<span class="token operator">%</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u53D6unum\u7684\u6700\u540E\u4E00\u4F4D\uFF0C\u5E76\u8BBE\u7F6E\u4E3Astr\u5BF9\u5E94\u4F4D\uFF0C\u6307\u793A\u7D22\u5F15\u52A01</span>
        unum<span class="token operator">/=</span>radix<span class="token punctuation">;</span><span class="token comment">//unum\u53BB\u6389\u6700\u540E\u4E00\u4F4D</span>
 
    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>unum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u76F4\u81F3unum\u4E3A0\u9000\u51FA\u5FAA\u73AF</span>
 
    str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span><span class="token comment">//\u5728\u5B57\u7B26\u4E32\u6700\u540E\u6DFB\u52A0&#39;\\0&#39;\u5B57\u7B26\uFF0Cc\u8BED\u8A00\u5B57\u7B26\u4E32\u4EE5&#39;\\0&#39;\u7ED3\u675F\u3002</span>
 
    <span class="token comment">//\u5C06\u987A\u5E8F\u8C03\u6574\u8FC7\u6765</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u5982\u679C\u662F\u8D1F\u6570\uFF0C\u7B26\u53F7\u4E0D\u7528\u8C03\u6574\uFF0C\u4ECE\u7B26\u53F7\u540E\u9762\u5F00\u59CB\u8C03\u6574</span>
    <span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u4E0D\u662F\u8D1F\u6570\uFF0C\u5168\u90E8\u90FD\u8981\u8C03\u6574</span>
 
    <span class="token keyword">char</span> temp<span class="token punctuation">;</span><span class="token comment">//\u4E34\u65F6\u53D8\u91CF\uFF0C\u4EA4\u6362\u4E24\u4E2A\u503C\u65F6\u7528\u5230</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>k<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//\u5934\u5C3E\u4E00\u4E00\u5BF9\u79F0\u4EA4\u6362\uFF0Ci\u5176\u5B9E\u5C31\u662F\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\uFF0C\u7D22\u5F15\u6700\u5927\u503C\u6BD4\u957F\u5EA6\u5C111</span>
    <span class="token punctuation">{</span>
        temp<span class="token operator">=</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u5934\u90E8\u8D4B\u503C\u7ED9\u4E34\u65F6\u53D8\u91CF</span>
        str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u5C3E\u90E8\u8D4B\u503C\u7ED9\u5934\u90E8</span>
        str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token comment">//\u5C06\u4E34\u65F6\u53D8\u91CF\u7684\u503C(\u5176\u5B9E\u5C31\u662F\u4E4B\u524D\u7684\u5934\u90E8\u503C)\u8D4B\u7ED9\u5C3E\u90E8</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token comment">//\u8FD4\u56DE\u8F6C\u6362\u540E\u7684\u5B57\u7B26\u4E32</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">translateNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token function">itoa</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">debug</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6570\u7EC4DEBUG\u51FD\u6570</span>
<span class="token comment">//\u6B64\u5904\u4F20\u5165\u7684\u6570\u7EC4</span>
<span class="token keyword">void</span> <span class="token function">matrixDebug</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>nums<span class="token operator">+</span>i<span class="token operator">*</span>col<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u8C03\u7528</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">matrixDebug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>f<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6B64\u5904\u4F20\u5165\u4E8C\u7EF4\u6307\u9488</span>
<span class="token keyword">void</span> <span class="token function">matrixDebug</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u8C03\u7528</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> f <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>t_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">matrixDebug</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>t_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5DE5\u5177\u5B8F" tabindex="-1"><a class="header-anchor" href="#\u5DE5\u5177\u5B8F" aria-hidden="true">#</a> \u5DE5\u5177\u5B8F</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;%d\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span>a<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Rep</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u54C8\u5E0C\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u54C8\u5E0C\u51FD\u6570" aria-hidden="true">#</a> \u54C8\u5E0C\u51FD\u6570</h3><p><strong>\u54C8\u5E0C\u7ED3\u6784\u4F53</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;uthash.h&quot;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Hash<span class="token punctuation">;</span>
Hash <span class="token operator">*</span>hash <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5176\u4E2D<code>UT_hash_handle</code>\u7684\u5934\u6587\u4EF6<code>#include &quot;uthash.h&quot;</code>\u4E2D\u5B9A\u4E49\u7684\uFF0C\u7136\u540EHash\u7ED3\u6784\u4F53\u662F\u81EA\u5B9A\u4E49\u7684\u3002</p><p><code>key</code>\u7684\u7C7B\u578B\u53EF\u4EE5\u662F<code>int</code>,<code> char*</code> ,<code> char[]</code>\uFF0C<code>void*</code> \u8FD94\u79CD\uFF0C<code>value</code>\u53EF\u4EE5\u662F\u4EFB\u610F\u7C7B\u578B</p><p><strong>\u589E\u5220\u67E5</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u589E\u52A0</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Hash <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> <span class="token punctuation">(</span>Hash <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token punctuation">}</span>
<span class="token comment">// \u67E5\u627E</span>
<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Hash <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u67E5\u627E\u5230\u7ED3\u679C</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u5220\u9664</span>
<span class="token keyword">void</span> <span class="token function">delete</span> <span class="token punctuation">(</span>Hash <span class="token operator">*</span>s<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">HASH_DEL</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5176\u4E2D<code>HASH_ADD_INT</code>\u3001<code>HASH_FIND_INT</code>\u3001<code>HASH_DEL</code>\u90FD\u662F\u6807\u51C6\u51FD\u6570\uFF0C\u5176\u4ED6\u90FD\u662F\u81EA\u5B9A\u4E49\u4EE3\u7801\u3002</p><p><strong>\u6CE8\u610F</strong>\uFF1A\u63D2\u5165\u4E4B\u524D\u8981\u5148\u67E5\u627E\u786E\u8BA4\u6CA1\u6709\u8FD9\u4E2A\u5143\u7D20\u3002\u5982\u679C\u8981\u4FEE\u6539\u5DF2\u7ECF\u5B58\u5728\u7684\u952E\u503C\u5BF9\uFF0C\u8981\u5148\u5220\u9664\u518D\u63D2\u5165\u3002</p><p><strong>\u904D\u5386\u3001\u6E05\u7A7A\u3001\u8BA1\u6570</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u6E05\u7A7A</span>
<span class="token keyword">void</span> <span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Hash <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>
    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> s<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">delete</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//hh\uFF1A\u8868\u793Ahash\u53E5\u67C4\uFF0C\u4E0D\u662F\u4E2A\u53D8\u91CF\uFF1B</span>
	<span class="token comment">//hash\uFF1A\u5F85\u5FAA\u73AF\u7684hash\u8868\uFF1B</span>
	<span class="token comment">//s\uFF1A\u8868\u793A\u6BCF\u6B21\u5FAA\u73AF\u65F6\u83B7\u5F97\u7684\u90A3\u4E2A\u952E\u503C\u5BF9\uFF0C\u5728\u51FD\u6570\u524D\u76F4\u63A5\u5B9A\u4E49\uFF0C\u4E0D\u7528\u8D4B\u521D\u503C\u3002\u5728\u5FAA\u73AF\u4E2D\uFF0C\u6211\u4EEC\u5C31\u5BF9s\u8FDB\u884C\u64CD\u4F5C\u3002</span>
	<span class="token comment">//tmp\uFF1A\u4E34\u65F6\u53D8\u91CF,\u8FD9\u4E2A\u53D8\u91CF\u4ECE\u8868\u9762\u4E0A\u6765\u770B\u6CA1\u6709\u4EC0\u4E48\u610F\u4E49\uFF0C\u4F46\u662F\u4F1A\u5728\u8FD9\u4E2A\u51FD\u6570\u5185\u90E8\u88AB\u4F7F\u7528\uFF0C\u6240\u4EE5\u4E00\u5B9A\u8981\u58F0\u660E\u4E00\u4E2Atmp\u7ED3\u6784\u4F53\u6307\u9488\uFF08\u4E0D\u7528\u8D4B\u503C\uFF09\uFF0C\u5E76\u9001\u5165\u51FD\u6570\u3002</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u8BA1\u6570</span>
<span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">HASH_COUNT</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5176\u4E2D\uFF0C<code>HASH_ITER</code>\u662F\u6807\u51C6\u5B8F\uFF0C<code>HASH_COUNT</code>\u662F\u6807\u51C6\u51FD\u6570\u3002</p><p><strong>\u5176\u4ED6\u7C7B\u578B\u7684key</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//char* key HASH_ADD_KEYPTR</span>
<span class="token comment">//char key[100] HASH_ADD_STR</span>
<span class="token comment">//void* key HASH_ADD_PTR</span>
<span class="token comment">//void* key HASH_FIND_PTR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E8C\u5206\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u5206\u6CD5" aria-hidden="true">#</a> \u4E8C\u5206\u6CD5</h2><div class="custom-container tip"><p class="custom-container-title">\u603B\u7ED3</p><p>\u4E8C\u5206\u6CD5\u53EF\u4EE5\u627E\u5408\u9002\u7684\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u4E5F\u5C31\u80FD\u7528\u6765\u6392\u5E8F</p></div><h3 id="\u6846\u67B6" tabindex="-1"><a class="header-anchor" href="#\u6846\u67B6" aria-hidden="true">#</a> \u6846\u67B6</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u53E6\u5916\u63D0\u524D\u8BF4\u660E\u4E00\u4E0B\uFF0C\u8BA1\u7B97 <code>mid</code> \u65F6\u9700\u8981\u9632\u6B62\u6EA2\u51FA</strong>\uFF0C\u4EE3\u7801\u4E2D <code>left + (right - left) / 2</code> \u5C31\u548C <code>(left + right) / 2</code> \u7684\u7ED3\u679C\u76F8\u540C\uFF0C\u4F46\u662F\u6709\u6548\u9632\u6B62\u4E86 <code>left</code> \u548C <code>right</code> \u592A\u5927\uFF0C\u76F4\u63A5\u76F8\u52A0\u5BFC\u81F4\u6EA2\u51FA\u7684\u60C5\u51B5\u3002</p><p>\u4F7F\u7528<code>(low+high)/2</code>\u4F1A\u6709\u6574\u6570\u6EA2\u51FA\u7684\u95EE\u9898\uFF0C\u95EE\u9898\u4F1A\u51FA\u73B0\u5728\u5F53<code>low+high</code>\u7684\u7ED3\u679C\u5927\u4E8E\u8868\u8FBE\u5F0F\u7ED3\u679C\u7C7B\u578B\u6240\u80FD\u8868\u793A\u7684\u6700\u5927\u503C\u65F6\uFF0C\u8FD9\u6837\uFF0C\u4EA7\u751F\u6EA2\u51FA\u540E\u518D<code>/2</code>\u662F\u4E0D\u4F1A\u4EA7\u751F\u6B63\u786E\u7ED3\u679C\u7684\uFF0C\u800C<code>low+(high - low)/2</code>\u4E0D\u5B58\u5728\u8FD9\u4E2A\u95EE\u9898\u3002</p><p>\u4F8B\u5982:</p><p>high = 0100 0000 0000 0000 0000 0000 0000 0000 = 1073741824</p><p>low = 0100 0000 0000 0000 0000 0000 0000 0000 = 1073741824</p><p>high + low = 1000 0000 0000 0000 0000= -2147483648 as signed 32-bit integer</p><p>\u4F5C\u4E3A\u5E26\u7B26\u53F7\u768432\u4F4D\u6574\u6570\uFF0C\u5B83\u662F\u6EA2\u51FA\u7684\u5E76\u4E14\u7FFB\u8F6C\u4E3A\u8D1F\u3002\u56E0\u6B64<code>(high + low) / 2</code>\u662F\u9519\u8BEF\u7684\uFF0C\u56E0\u4E3A<code>high + low</code>\u7684\u8FD0\u7B97\u7ED3\u679C\u53EF\u80FD\u8D85\u51FA\u5F53\u524D\u7C7B\u578B\u6240\u8868\u793A\u7684\u8303\u56F4\u7684\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u57FA\u672C\u6B3E</span>
<span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u6700\u597D\u6700\u5148\u5224\u65AD==\u60C5\u51B5</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>\u56E0\u4E3A\u6211\u4EEC\u521D\u59CB\u5316 right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
\u6240\u4EE5\u51B3\u5B9A\u4E86\u6211\u4EEC\u7684\u300C\u641C\u7D22\u533A\u95F4\u300D\u662F <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span>
\u6240\u4EE5\u51B3\u5B9A\u4E86 <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>
\u540C\u65F6\u4E5F\u51B3\u5B9A\u4E86 left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span> \u548C right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span>

\u56E0\u4E3A\u6211\u4EEC\u53EA\u9700\u627E\u5230\u4E00\u4E2A target \u7684\u7D22\u5F15\u5373\u53EF
\u6240\u4EE5\u5F53 nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target \u65F6\u53EF\u4EE5\u7ACB\u5373\u8FD4\u56DE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E3A\u4EC0\u4E48 <code>left = mid + 1</code>\uFF0C<code>right = mid - 1</code>\uFF1F\u6211\u770B\u6709\u7684\u4EE3\u7801\u662F <code>right = mid</code> \u6216\u8005 <code>left = mid</code>\uFF0C\u6CA1\u6709\u8FD9\u4E9B\u52A0\u52A0\u51CF\u51CF\uFF0C\u5230\u5E95\u600E\u4E48\u56DE\u4E8B\uFF0C\u600E\u4E48\u5224\u65AD\uFF1F</p><p>\u7B54\uFF1A\u8FD9\u4E5F\u662F\u4E8C\u5206\u67E5\u627E\u7684\u4E00\u4E2A\u96BE\u70B9\uFF0C\u4E0D\u8FC7\u53EA\u8981\u4F60\u80FD\u7406\u89E3\u524D\u9762\u7684\u5185\u5BB9\uFF0C\u5C31\u80FD\u591F\u5F88\u5BB9\u6613\u5224\u65AD\u3002</p><p>\u521A\u624D\u660E\u786E\u4E86\u300C\u641C\u7D22\u533A\u95F4\u300D\u8FD9\u4E2A\u6982\u5FF5\uFF0C\u800C\u4E14\u672C\u7B97\u6CD5\u7684\u641C\u7D22\u533A\u95F4\u662F\u4E24\u7AEF\u90FD\u95ED\u7684\uFF0C\u5373 <code>[left, right]</code>\u3002\u90A3\u4E48\u5F53\u6211\u4EEC\u53D1\u73B0\u7D22\u5F15 <code>mid</code> \u4E0D\u662F\u8981\u627E\u7684 <code>target</code> \u65F6\uFF0C\u4E0B\u4E00\u6B65\u5E94\u8BE5\u53BB\u641C\u7D22\u54EA\u91CC\u5462\uFF1F</p><p>\u5F53\u7136\u662F\u53BB\u641C\u7D22\u533A\u95F4 <code>[left, mid-1]</code> \u6216\u8005\u533A\u95F4 <code>[mid+1, right]</code> \u5BF9\u4E0D\u5BF9\uFF1F<strong>\u56E0\u4E3A <code>mid</code> \u5DF2\u7ECF\u641C\u7D22\u8FC7\uFF0C\u5E94\u8BE5\u4ECE\u641C\u7D22\u533A\u95F4\u4E2D\u53BB\u9664</strong>\u3002</p><h4 id="\u627E\u5DE6\u8FB9\u754C" tabindex="-1"><a class="header-anchor" href="#\u627E\u5DE6\u8FB9\u754C" aria-hidden="true">#</a> \u627E\u5DE6\u8FB9\u754C</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5DE6\u95ED\u53F3\u5F00 [left, right) </span>
<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// \u6CE8\u610F</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6CE8\u610F</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span> <span class="token comment">// \u6CE8\u610F</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>\u56E0\u4E3A\u6211\u4EEC\u521D\u59CB\u5316 right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length
\u6240\u4EE5\u51B3\u5B9A\u4E86\u6211\u4EEC\u7684\u300C\u641C\u7D22\u533A\u95F4\u300D\u662F <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
\u6240\u4EE5\u51B3\u5B9A\u4E86 <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>
\u540C\u65F6\u4E5F\u51B3\u5B9A\u4E86 left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span> \u548C right <span class="token operator">=</span> mid

\u56E0\u4E3A\u6211\u4EEC\u9700\u627E\u5230 target \u7684\u6700\u5DE6\u4FA7\u7D22\u5F15
\u6240\u4EE5\u5F53 nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target \u65F6\u4E0D\u8981\u7ACB\u5373\u8FD4\u56DE
\u800C\u8981\u6536\u7D27\u53F3\u4FA7\u8FB9\u754C\u4EE5\u9501\u5B9A\u5DE6\u4FA7\u8FB9\u754C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u7B97\u6CD5\u80FD\u591F\u641C\u7D22\u5DE6\u4FA7\u8FB9\u754C</strong>\u7684\u539F\u56E0\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>
        right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u627E\u5230 target \u65F6\u4E0D\u8981\u7ACB\u5373\u8FD4\u56DE\uFF0C\u800C\u662F\u7F29\u5C0F\u300C\u641C\u7D22\u533A\u95F4\u300D\u7684\u4E0A\u754C <code>right</code>\uFF0C\u5728\u533A\u95F4 <code>[left, mid)</code> \u4E2D\u7EE7\u7EED\u641C\u7D22\uFF0C\u5373\u4E0D\u65AD\u5411\u5DE6\u6536\u7F29\uFF0C\u8FBE\u5230\u9501\u5B9A\u5DE6\u4FA7\u8FB9\u754C\u7684\u76EE\u7684\u3002</p><h4 id="\u627E\u53F3\u8FB9\u754C" tabindex="-1"><a class="header-anchor" href="#\u627E\u53F3\u8FB9\u754C" aria-hidden="true">#</a> \u627E\u53F3\u8FB9\u754C</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">right_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u6CE8\u610F</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u6CE8\u610F</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>\u56E0\u4E3A\u6211\u4EEC\u521D\u59CB\u5316 right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length
\u6240\u4EE5\u51B3\u5B9A\u4E86\u6211\u4EEC\u7684\u300C\u641C\u7D22\u533A\u95F4\u300D\u662F <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
\u6240\u4EE5\u51B3\u5B9A\u4E86 <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>
\u540C\u65F6\u4E5F\u51B3\u5B9A\u4E86 left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span> \u548C right <span class="token operator">=</span> mid

\u56E0\u4E3A\u6211\u4EEC\u9700\u627E\u5230 target \u7684\u6700\u53F3\u4FA7\u7D22\u5F15
\u6240\u4EE5\u5F53 nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target \u65F6\u4E0D\u8981\u7ACB\u5373\u8FD4\u56DE
\u800C\u8981\u6536\u7D27\u5DE6\u4FA7\u8FB9\u754C\u4EE5\u9501\u5B9A\u53F3\u4FA7\u8FB9\u754C

\u53C8\u56E0\u4E3A\u6536\u7D27\u5DE6\u4FA7\u8FB9\u754C\u65F6\u5FC5\u987B left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
\u6240\u4EE5\u6700\u540E\u65E0\u8BBA\u8FD4\u56DE left \u8FD8\u662F right\uFF0C\u5FC5\u987B\u51CF\u4E00
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u7EDF\u4E00\u6846\u67B6" tabindex="-1"><a class="header-anchor" href="#\u7EDF\u4E00\u6846\u67B6" aria-hidden="true">#</a> \u7EDF\u4E00\u6846\u67B6</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5DE6\u53F3\u90FD\u95ED</span>
<span class="token keyword">int</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u76F4\u63A5\u8FD4\u56DE</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u76F4\u63A5\u8FD4\u56DE</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u522B\u8FD4\u56DE\uFF0C\u9501\u5B9A\u5DE6\u4FA7\u8FB9\u754C</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6700\u540E\u8981\u68C0\u67E5 left \u8D8A\u754C\u7684\u60C5\u51B5</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">right_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u522B\u8FD4\u56DE\uFF0C\u9501\u5B9A\u53F3\u4FA7\u8FB9\u754C</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6700\u540E\u8981\u68C0\u67E5 right \u8D8A\u754C\u7684\u60C5\u51B5</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u5206\u67E5\u627E-704" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u5206\u67E5\u627E-704" aria-hidden="true">#</a> \u4E8C\u5206\u67E5\u627E\uFF08704\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u6700\u597D\u6700\u5148\u5224\u65AD==\u60C5\u51B5</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u627E\u7B2C\u4E00\u4E2A\u9519\u8BEF-278" tabindex="-1"><a class="header-anchor" href="#\u627E\u7B2C\u4E00\u4E2A\u9519\u8BEF-278" aria-hidden="true">#</a> \u627E\u7B2C\u4E00\u4E2A\u9519\u8BEF(278)</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u627E\u63D2\u5165\u4F4D\u7F6E-35" tabindex="-1"><a class="header-anchor" href="#\u627E\u63D2\u5165\u4F4D\u7F6E-35" aria-hidden="true">#</a> \u627E\u63D2\u5165\u4F4D\u7F6E\uFF0835\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//z</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E24\u6570\u4E4B\u548C-\u6709\u5E8F-167" tabindex="-1"><a class="header-anchor" href="#\u4E24\u6570\u4E4B\u548C-\u6709\u5E8F-167" aria-hidden="true">#</a> \u4E24\u6570\u4E4B\u548C|\u6709\u5E8F\uFF08167\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u67E5\u627E</span>
<span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> low<span class="token operator">+</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            high <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> numbersSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    <span class="token keyword">int</span> <span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numbersSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>numbersSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token operator">-</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>numbersSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token operator">-</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> numbersSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token operator">=</span>numbersSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E-34" tabindex="-1"><a class="header-anchor" href="#\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E-34" aria-hidden="true">#</a> \u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\uFF0834\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u67E5\u627E\u5DE6\u53F3\u8FB9\u754C</span>
<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span>numsSize<span class="token operator">||</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">right_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u9700\u8981\u8FD4\u56DE\u7684\u6570\u7EC4\u5FC5\u987B\u7528\u52A8\u6001\u7533\u8BF7</span>
    ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">left_bound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">right_bound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4-33" tabindex="-1"><a class="header-anchor" href="#\u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4-33" aria-hidden="true">#</a> \u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\uFF0833\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5E26\u60AC\u5D16\u7684\u4E8C\u5206\u67E5\u627E</span>
<span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token operator">&amp;&amp;</span>target<span class="token operator">&gt;=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token operator">&amp;&amp;</span>target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u641C\u7D22\u4E8C\u7EF4\u77E9\u9635-74" tabindex="-1"><a class="header-anchor" href="#\u641C\u7D22\u4E8C\u7EF4\u77E9\u9635-74" aria-hidden="true">#</a> \u641C\u7D22\u4E8C\u7EF4\u77E9\u9635\uFF0874\uFF09</h3><p>\u4E8C\u7EF4\u6570\u7EC4\u7684\u7684\u884C\u6570 <code>m</code> \u548C\u5217\u6570 <code>n</code>\uFF0C\u4E8C\u7EF4\u6570\u7EC4\u7684\u5750\u6807 <code>(i, j)</code> \u53EF\u4EE5\u6620\u5C04\u6210\u4E00\u7EF4\u7684 <code>index = i * n + j</code>\uFF1B\u53CD\u8FC7\u6765\u4E5F\u53EF\u4EE5\u901A\u8FC7\u4E00\u7EF4 <code>index</code> \u53CD\u89E3\u51FA\u4E8C\u7EF4\u5750\u6807 <code>i = index / n, j = index % n</code>\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6CD51\uFF0C\u4E8C\u7EF4\u8F6C\u4E00\u7EF4</span>
bool <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> n<span class="token operator">*</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> mid<span class="token operator">/</span>m<span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> mid<span class="token operator">%</span>m<span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">searchMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> matrixSize<span class="token punctuation">;</span><span class="token comment">//\u884C\u6570</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u5217\u6570</span>
    <span class="token keyword">return</span> <span class="token function">bi_search</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6CD52\uFF0C\u526F\u5BF9\u89D2\u7EBF\u641C\u7D22</span>
bool <span class="token function">searchMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> row <span class="token operator">=</span> matrixSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token operator">*</span>matrixColSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>row<span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u641C\u7D22\u4E8C\u7EF4\u77E9\u9635-ii-240" tabindex="-1"><a class="header-anchor" href="#\u641C\u7D22\u4E8C\u7EF4\u77E9\u9635-ii-240" aria-hidden="true">#</a> \u641C\u7D22\u4E8C\u7EF4\u77E9\u9635 II\uFF08240\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6BCF\u884C\u8FDB\u884C\u4E8C\u5206\u641C\u7D22\uFF0Cn*logn</span>
bool <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">searchMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> matrixSize<span class="token punctuation">;</span><span class="token comment">//\u884C\u6570</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u5217\u6570</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bi_search</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>target<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u672C\u89E3\u6CD5\u975E\u5E38\u5177\u6709\u542F\u53D1\u6027\uFF1Az\u578B\u641C\u7D22</span>
<span class="token comment">//\u5C1D\u8BD5\u5BFB\u627E\u6392\u597D\u961F\u7684\u6570\u7EC4</span>
bool <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u6A2A\u884C\u548C\u7AD6\u5217\u5F62\u6210\u4E00\u4E2A\u6392\u5E8F\uFF0C\u62D0\u5F2F\u5904\u8FDB\u884C\u4E8C\u5206\u5224\u65AD</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>y<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span> x<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span> y<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">searchMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> matrixSize<span class="token punctuation">;</span><span class="token comment">//\u884C\u6570</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u5217\u6570</span>
    <span class="token keyword">return</span> <span class="token function">bi_search</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>bool <span class="token function">searchMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>matrixSize<span class="token operator">&amp;&amp;</span>y<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>y<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C-153" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C-153" aria-hidden="true">#</a> \u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C\uFF08153\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">=</span>mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">bi_search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token comment">//\u548C\u4E0A\u9762\u533A\u522B</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">=</span>mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u548C\u4E0A\u9762\u533A\u522B</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">bi_search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C-ii-154" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C-ii-154" aria-hidden="true">#</a> \u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C II\uFF08154\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u4E5F\u662F\u5173\u952E</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//\u5173\u952E\u5728\u8FD9</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">bi_search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5BFB\u627E\u5CF0\u503C-162" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u5CF0\u503C-162" aria-hidden="true">#</a> \u5BFB\u627E\u5CF0\u503C\uFF08162\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">//\u9632\u6B62mid+1\u8D8A\u754C</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">bi_search</span><span class="token punctuation">(</span> nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token comment">//\u548C\u4E0A\u9762\u533A\u522B</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">//\u548C\u4E0A\u9762\u533A\u522B</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&gt;=</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u548C\u4E0A\u9762\u533A\u522B</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">bi_search</span><span class="token punctuation">(</span> nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4-ii-81" tabindex="-1"><a class="header-anchor" href="#\u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4-ii-81" aria-hidden="true">#</a> \u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4 II\uFF0881\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>bool <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//\u5904\u7406\u5DE6\u534A\u90E8\u5206</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token operator">&amp;&amp;</span>target<span class="token operator">&gt;=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token comment">//\u5904\u7406\u53F3\u534A\u90E8\u5206</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token operator">&amp;&amp;</span>target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="x-\u7684\u5E73\u65B9\u6839-69" tabindex="-1"><a class="header-anchor" href="#x-\u7684\u5E73\u65B9\u6839-69" aria-hidden="true">#</a> x \u7684\u5E73\u65B9\u6839 \uFF0869\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>mid <span class="token operator">*</span> mid <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570-222" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570-222" aria-hidden="true">#</a> \u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570\uFF08222\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u66B4\u529B\u9012\u5F52</span>
<span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//\u975E\u7A7A\u6811\u7684\u7ED3\u70B9\u6570\u4E3A \u5DE6\u5B50\u6811\u4E2A\u6570 + \u53F3\u5B50\u6811\u4E2A\u6570 + 1\uFF1B</span>
    <span class="token keyword">return</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u66B4\u529B\u9012\u5F52\u4F18\u5316\u7248</span>
<span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u7279\u5904</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> l <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> r <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">int</span> hl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        hl<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        r <span class="token operator">=</span> r<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        hr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5982\u679C\u5DE6\u53F3\u4FA7\u8BA1\u7B97\u7684\u9AD8\u5EA6\u76F8\u540C\uFF0C\u5219\u662F\u4E00\u68F5\u6EE1\u4E8C\u53C9\u6811</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hl <span class="token operator">==</span> hr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hl<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5982\u679C\u5DE6\u53F3\u4FA7\u7684\u9AD8\u5EA6\u4E0D\u540C\uFF0C\u5219\u6309\u7167\u666E\u901A\u4E8C\u53C9\u6811\u7684\u903B\u8F91\u8BA1\u7B97</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E8C\u5206\u6CD5\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//     1            h = 0</span>
<span class="token comment">//    / \\
//   2   3          h = 1</span>
<span class="token comment">//  / \\  /</span>
<span class="token comment">// 4  5 6           h = 2</span>
<span class="token comment">// \u73B0\u5728\u8FD9\u4E2A\u6811\u4E2D\u7684\u503C\u90FD\u662F\u8282\u70B9\u7684\u7F16\u53F7\uFF0C\u6700\u5E95\u4E0B\u7684\u4E00\u5C42\u7684\u7F16\u53F7\u662F[2^h \uFF0C2^h - 1]\uFF0C\u73B0\u5728h = 2\uFF0C\u4E5F\u5C31\u662F4, 5, 6, 7\u3002</span>
<span class="token comment">// 4, 5, 6, 7\u5BF9\u5E94\u4E8C\u8FDB\u5236\u5206\u522B\u4E3A 100 101 110 111 \u4E0D\u770B\u6700\u5DE6\u8FB9\u76841\uFF0C\u4ECE\u7B2C\u4E8C\u4F4D\u5F00\u59CB\uFF0C0\u8868\u793A\u5411\u5DE6\uFF0C1\u8868\u793A\u5411\u53F3\uFF0C\u6B63\u597D\u53EF\u4EE5\u8868\u793A\u8FD9\u4E2A\u8282\u70B9\u76F8\u5BF9\u4E8E\u6839\u8282\u70B9\u7684\u4F4D\u7F6E\u3002</span>
<span class="token comment">// \u6BD4\u59824\u7684 00 \u5C31\u8868\u793A\u4ECE\u6839\u8282\u70B9 \u5411\u5DE6 \u518D\u5411\u5DE6\u30026\u7684 10 \u5C31\u8868\u793A\u4ECE\u6839\u8282\u70B9 \u5411\u53F3 \u518D\u5411\u5DE6</span>
<span class="token comment">//\u7C7B\u4F3C\u54C8\u592B\u66FC\u7F16\u7801</span>
<span class="token comment">// \u90A3\u4E48\u60F3\u8BBF\u95EE\u6700\u540E\u4E00\u5C42\u7684\u8282\u70B9\u5C31\u53EF\u4EE5\u4ECE\u8282\u70B9\u7684\u7F16\u53F7\u7684\u4E8C\u8FDB\u5236\u5165\u624B\u3002\u4ECE\u7B2C\u4E8C\u4F4D\u5F00\u59CB\u7684\u4E8C\u8FDB\u5236\u4F4D\u8868\u793A\u4E86\u6700\u540E\u4E00\u5C42\u7684\u8282\u70B9\u76F8\u5BF9\u4E8E\u6839\u8282\u70B9\u7684\u4F4D\u7F6E\u3002</span>
<span class="token comment">// \u90A3\u4E48\u5C31\u9700\u8981\u4E00\u4E2Abits = 2^(h - 1) \u4E0A\u9762\u4F8B\u5B50\u4E2D\u7684bits\u5C31\u662F2\uFF0C\u5BF9\u5E94\u4E8C\u8FDB\u5236\u4E3A010\u3002\u8FD9\u6837\u5C31\u53EF\u4EE5\u4ECE\u7B2C\u4E8C\u4F4D\u5F00\u59CB\u5224\u65AD\u3002\uFF08\u6811\u4E09\u5C42\u9AD8\uFF0C\u9700\u8981\u5411\u5DE6\u6216\u5411\u53F3\u8D70\u4E24\u6B21\u624D\u80FD\u5230\u53F6\u5B50\uFF09</span>
<span class="token comment">// \u6BD4\u5982\u770B5\u8FD9\u4E2A\u8282\u70B9\u5B58\u4E0D\u5B58\u5728\uFF0C\u5148\u901A\u8FC7\u4F4D\u8FD0\u7B97\u627E\u5230\u7F16\u53F7\u4E3A5\u7684\u8282\u70B9\u76F8\u5BF9\u4E8E\u6839\u8282\u70B9\u7684\u4F4D\u7F6E\u3002010 &amp; 101 \u53D1\u73B0\u7B2C\u4E8C\u4F4D\u662F0\uFF0C\u8BF4\u660E\u4ECE\u6839\u8282\u70B9\u5F00\u59CB\uFF0C\u7B2C\u4E00\u6B65\u5411\u5DE6\u8D70\u3002</span>
<span class="token comment">// \u4E4B\u540E\u5C06bit\u53F3\u79FB\u4E00\u4F4D\uFF0C\u53D8\u6210001\u3002001 &amp; 101 \u53D1\u73B0\u7B2C\u4E09\u4F4D\u662F1\uFF0C\u90A3\u4E48\u7B2C\u4E8C\u6B65\u5411\u53F3\u8D70\u3002</span>
<span class="token comment">// \u6700\u540Ebit\u4E3A0\uFF0C\u8BF4\u660E\u5DF2\u7ECF\u627E\u5230\u7F16\u53F7\u4E3A5\u7684\u8FD9\u4E2A\u8282\u70B9\u76F8\u5BF9\u4E8E\u6839\u8282\u70B9\u7684\u4F4D\u7F6E\uFF0C\u770B\u8FD9\u4E2A\u8282\u70B9\u662F\u4E0D\u662F\u7A7A\uFF0C\u4E0D\u662F\u8BF4\u660E\u5B58\u5728\uFF0Cexist\u8FD4\u56DE\u771F</span>
<span class="token comment">// \u7F16\u53F7\u4E3A5\u7684\u8282\u70B9\u5B58\u5728\uFF0C\u8BF4\u660E\u603B\u8282\u70B9\u6570\u91CF\u4E00\u5B9A\u5927\u4E8E\u7B49\u4E8E5\u3002\u6240\u4EE5\u4E8C\u5206\u90A3\u91CClow = mid</span>

<span class="token comment">// \u518D\u6BD4\u5982\u770B7\u5B58\u4E0D\u5B58\u5728\uFF0C010 &amp; 111 \u7B2C\u4E8C\u4F4D\u4E3A1\uFF0C\u7B2C\u4E00\u90E8\u4ECE\u6839\u8282\u70B9\u5411\u53F3\uFF1B001 &amp; 111 \u7B2C\u4E09\u4F4D\u4E5F\u4E3A1\uFF0C\u7B2C\u4E8C\u6B65\u7EE7\u7EED\u5411\u53F3\u3002</span>
<span class="token comment">// \u7136\u540E\u5224\u65AD\u5F53\u524D\u8282\u70B9\u662F\u4E0D\u662Fnull\uFF0C\u53D1\u73B0\u662Fnull\uFF0Cexist\u8FD4\u56DE\u5047\u3002</span>
<span class="token comment">// \u7F16\u53F7\u4E3A7\u7684\u8282\u70B9\u4E0D\u5B58\u5728\uFF0C\u8BF4\u660E\u603B\u8282\u70B9\u6570\u91CF\u4E00\u5B9A\u5C0F\u4E8E7\u3002\u6240\u4EE5high = mid - 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>bool <span class="token function">exists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> bits <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5E95\u5C42\u7684\u8282\u70B9\u6570\uFF1A\u4F8B\u5982level = 2,\u4E8C\u8FDB\u5236100,\u4E0E101\u3001110\u3001111</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>bits<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bits<span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bits<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u4E00\u4F4D\u4E00\u4F4D\u5224\u65AD\u662F0\uFF0C\u662F1;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">//\u627E\u6700\u5927\u9AD8\u5EA6</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        level<span class="token operator">++</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>level<span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//\u627E\u5DE6\u8FB9\u754C</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//+1\u7684\u539F\u56E0\u662Fleft = mid \u6CA1\u6709\u52A01</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">exists</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>level<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5BF9\u6BD4</span>
bool <span class="token function">exists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> bits <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5E95\u5C42\u7684\u8282\u70B9\u6570\uFF1A\u4F8B\u5982level = 2,\u4E8C\u8FDB\u5236100,\u4E0E101\u3001110\u3001111</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>bits<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bits<span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bits<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u4E00\u4F4D\u4E00\u4F4D\u5224\u65AD\u662F0\uFF0C\u662F1;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">//\u627E\u6700\u5927\u9AD8\u5EA6</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        level<span class="token operator">++</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>level<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>level<span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//\u627E\u53F3\u8FB9\u754C</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">exists</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>level<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6807\u51C6\u627E\u53F3\u8FB9\u754C</span>
bool <span class="token function">exists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> bits <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5E95\u5C42\u7684\u8282\u70B9\u6570\uFF1A\u4F8B\u5982level = 2,\u4E8C\u8FDB\u5236100,\u4E0E101\u3001110\u3001111</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>bits<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bits<span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bits<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u4E00\u4F4D\u4E00\u4F4D\u5224\u65AD\u662F0\uFF0C\u662F1;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">//\u627E\u6700\u5927\u9AD8\u5EA6</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        level<span class="token operator">++</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>level<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>level<span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//\u627E\u53F3\u8FB9\u754C</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">exists</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>level<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="h-\u6307\u6570-ii-275" tabindex="-1"><a class="header-anchor" href="#h-\u6307\u6570-ii-275" aria-hidden="true">#</a> H \u6307\u6570 II\uFF08275\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bi_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> citations<span class="token punctuation">,</span> <span class="token keyword">int</span> citationsSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> citationsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
      
        <span class="token keyword">if</span><span class="token punctuation">(</span>citations<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>citationsSize<span class="token operator">-</span>mid<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> citationsSize<span class="token operator">-</span>left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">hIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> citations<span class="token punctuation">,</span> <span class="token keyword">int</span> citationsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">bi_search</span><span class="token punctuation">(</span>citations<span class="token punctuation">,</span>citationsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> citations<span class="token punctuation">,</span> <span class="token keyword">int</span> citationsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> citationsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>citations<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>citationsSize<span class="token operator">-</span>mid<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>  citationsSize<span class="token operator">-</span>left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5BFB\u627E\u91CD\u590D\u6570-287" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u91CD\u590D\u6570-287" aria-hidden="true">#</a> \u5BFB\u627E\u91CD\u590D\u6570\uFF08287\uFF09</h3><p>\u6B64\u6CD5\u4E0D\u597D\u7406\u89E3\uFF0C\u5F15\u5165\u5982\u4E0B\uFF1A</p>`,105),va=n("p",null,[s("\u6211\u4EEC\u5B9A\u4E49$ \\textit{cnt}[i] $\u8868\u793A "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"nums")]),n("annotation",{encoding:"application/x-tex"},"\\textit{nums}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"nums")])])])]),s(" \u6570\u7EC4\u4E2D\u5C0F\u4E8E\u7B49\u4E8E i \u7684\u6570\u6709\u591A\u5C11\u4E2A\uFF0C\u5047\u8BBE\u6211\u4EEC\u91CD\u590D\u7684\u6570\u662F "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"target")]),n("annotation",{encoding:"application/x-tex"},"\\textit{target}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8095em","vertical-align":"-0.1944em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"target")])])])]),s("\uFF0C\u90A3\u4E48$ [1,\\textit{target}-1]$\u91CC\u7684\u6240\u6709\u6570\u6EE1\u8DB3 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"cnt"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mo",null,"\u2264"),n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"\\textit{cnt}[i]\\le i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"cnt")]),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"\u2264"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s("\uFF0C$[target,n] $\u91CC\u7684\u6240\u6709\u6570\u6EE1\u8DB3 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"cnt"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mo",null,">"),n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"\\textit{cnt}[i]>i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"cnt")]),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s("\uFF0C\u5177\u6709\u5355\u8C03\u6027\u3002")],-1),ba=o('<table><thead><tr><th style="text-align:center;">nums</th><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th></tr></thead><tbody><tr><td style="text-align:center;">cnt</td><td style="text-align:center;">1</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td></tr></tbody></table>',1),ya=n("p",null,[s("\u5982\u679C\u77E5\u9053 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"cnt"),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"\\textit{cnt}[]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"cnt")]),n("span",{class:"mopen"},"["),n("span",{class:"mclose"},"]")])])]),s(" \u6570\u7EC4\u968F\u6570\u5B57$ i$\u9010\u6E10\u589E\u5927\u5177\u6709\u5355\u8C03\u6027\uFF08\u5373 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"target")]),n("annotation",{encoding:"application/x-tex"},"\\textit{target}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8095em","vertical-align":"-0.1944em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"target")])])])]),s(" \u524D "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"cnt"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mo",null,"\u2264"),n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"\\textit{cnt}[i]\\le i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"cnt")]),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"\u2264"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s(" \uFF0C"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",{mathvariant:"italic"},"target")]),n("annotation",{encoding:"application/x-tex"},"\\textit{target}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8095em","vertical-align":"-0.1944em"}}),n("span",{class:"mord text"},[n("span",{class:"mord textit"},"target")])])])]),s(" \u540E$ \\textit{cnt}[i]>i$\uFF09\uFF0C\u90A3\u4E48\u6211\u4EEC\u5C31\u53EF\u4EE5\u76F4\u63A5\u5229\u7528\u4E8C\u5206\u67E5\u627E\u6765\u627E\u5230\u91CD\u590D\u7684\u6570\u3002")],-1),wa=o(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u6CD5</span>
<span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">// mid  = (left + right)&gt;&gt;1;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// for (int i = 0; i &lt; numsSize; ++i) {</span>
        <span class="token comment">//     int tmp = nums[i] &lt;= mid;</span>
        <span class="token comment">//     cnt += tmp;</span>
        <span class="token comment">// }</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0B\u9762\u8FD9\u4E2A\u65B9\u6CD5\u53BB\u770B\u5B98\u89E3\uFF1A\u601D\u8DEF\u548C\u7B97\u6CD5</p><p>Floyd \u5224\u5708\u7B97\u6CD5</p><p><img src="https://pic.leetcode-cn.com/999e055b41e499d9ac704abada4a1b8e6697374fdfedc17d06b0e8aa10a8f8f6-287.png" alt=""></p><p>\u4ECE\u7406\u8BBA\u4E0A\u8BB2\uFF0C\u6570\u7EC4\u4E2D\u5982\u679C\u6709\u91CD\u590D\u7684\u6570\uFF0C\u90A3\u4E48\u5C31\u4F1A\u4EA7\u751F\u591A\u5BF9\u4E00\u7684\u6620\u5C04\uFF0C\u8FD9\u6837\uFF0C\u5F62\u6210\u7684\u94FE\u8868\u5C31\u4E00\u5B9A\u4F1A\u6709\u73AF\u8DEF\u4E86\u3002</p><ol><li>\u6570\u7EC4\u4E2D\u6709\u4E00\u4E2A\u91CD\u590D\u7684\u6574\u6570 &lt;==&gt; \u94FE\u8868\u4E2D\u5B58\u5728\u73AF</li><li>\u6570\u7EC4\u4E2D\u7684\u91CD\u590D\u6574\u6570 &lt;==&gt; \u627E\u5230\u94FE\u8868\u7684\u73AF\u5165\u53E3\uFF08\u627E\u5230\u54EA\u4E2A\u6570\u5B57\u6709\u4E24\u4E2A\u6620\u5C04\uFF09</li></ol><p>low = fast \u65F6\uFF0C\u5FEB\u6162\u6307\u9488\u76F8\u9047\uFF0Clow \u8D70\u8FC7\u7684\u8DDD\u79BB\u662F\u521D\u59CB\u70B9\uFF080\uFF09\u5230\u73AF\u72B6\u5F00\u59CB\u7684\u70B9 \uFF08x\uFF09 \u52A0\u4E0A \u73AF\u72B6\u5F00\u59CB\u7684\u70B9\uFF08x\uFF09 \u5230\u76F8\u9047\u70B9\uFF08y\uFF09 \u8FD9\u6BB5\u8DDD\u79BB\uFF0C\u800Cfast\u8D70\u8FC7\u7684\u8DDD\u79BB\u662F \u521D\u59CB\u70B9\uFF080\uFF09\u5230\u73AF\u72B6\u5F00\u59CB\u7684\u70B9\uFF08x\uFF09\uFF0C\u70B9\uFF08x\uFF09 \u5230\u70B9\uFF08y\uFF09\uFF0C\u70B9\uFF08y\uFF09\u5230\u70B9\uFF08x\uFF09\uFF0C\u70B9\uFF08x\uFF09\u5230\u70B9\uFF08y\uFF09\u3002</p><p>\u53C8\u56E0\u4E3Afast\u8D70\u8FC7\u7684\u8DDD\u79BB\u662Flow\u7684\u4E24\u500D\uFF0C\u8BBE0\u5230x\u957F\u5EA6\u4E3Aa\uFF0Cx\u5230y\u957F\u5EA6\u4E3Ab,\u5219\u67092*\uFF08a+b\uFF09 = a+ b+ (y\u5230x\u7684\u8DDD\u79BB) + b\uFF0C\u5219y\u5230x\u7684\u8DDD\u79BB\u5C31\u7B49\u4E8E0\u5230x\u7684\u8DDD\u79BB\u3002\u6240\u4EE5\u5F53\u65B0\u7684\u4E24\u4E2A\u6307\u9488 \u4E00\u4E2A\u4ECE0\u51FA\u53D1\uFF0C\u4E00\u4E2A\u4ECE\u76F8\u9047\u70B9y\u51FA\u53D1\u65F6\uFF0C\u4ED6\u4EEC\u8D70\u5230\u7684\u76F8\u540C\u7684\u503C\u5C31\u662F\u73AF\u72B6\u5F00\u59CB\u7684\u70B9\uFF0C\u5373x\u70B9\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//Floyd \u5224\u5708\u7B97\u6CD5</span>
<span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> fast <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u8D70\u4E00\u6B65</span>
    fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u5D4C\u5957\u5C31\u76F8\u5F53\u4E8E\u8D70\u4E24\u6B65</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>
        fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> pre1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pre2 <span class="token operator">=</span> slow<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>pre1 <span class="token operator">!=</span> pre2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        pre1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>pre1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        pre2 <span class="token operator">=</span> nums<span class="token punctuation">[</span>pre2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//hash\u6CD5</span>
<span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53CC\u6307\u9488\u3001\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u53CC\u6307\u9488\u3001\u6392\u5E8F" aria-hidden="true">#</a> \u53CC\u6307\u9488\u3001\u6392\u5E8F</h2><h3 id="\u76F4\u63A5\u63D2\u5165\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u76F4\u63A5\u63D2\u5165\u6392\u5E8F" aria-hidden="true">#</a> \u76F4\u63A5\u63D2\u5165\u6392\u5E8F</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//\u4ECE1\u5F00\u59CB</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            temp<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>temp<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
            cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5FEB\u901F\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5FEB\u901F\u6392\u5E8F" aria-hidden="true">#</a> \u5FEB\u901F\u6392\u5E8F</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
    i<span class="token operator">=</span>left<span class="token punctuation">;</span>
    j<span class="token operator">=</span>right<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>temp<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>temp<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            t <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u8BA1\u6570\u6392\u5E8F-\u7279\u6B8A\u6876\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u8BA1\u6570\u6392\u5E8F-\u7279\u6B8A\u6876\u6392\u5E8F" aria-hidden="true">#</a> \u8BA1\u6570\u6392\u5E8F\uFF08\u7279\u6B8A\u6876\u6392\u5E8F\uFF09</h3><p>\u8BA1\u6570\u6392\u5E8F\u672C\u8D28\u4E0A\u662F\u4E00\u79CD\u7279\u6B8A\u7684\u6876\u6392\u5E8F\uFF0C\u5F53\u6876\u7684\u4E2A\u6570\u6700\u5927\u7684\u65F6\u5019\uFF0C\u5C31\u662F\u8BA1\u6570\u6392\u5E8F\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> book<span class="token punctuation">[</span>max_val<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        book<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6709\u5E8F\u6570\u7EC4\u7684\u5E73\u65B9-977" tabindex="-1"><a class="header-anchor" href="#\u6709\u5E8F\u6570\u7EC4\u7684\u5E73\u65B9-977" aria-hidden="true">#</a> \u6709\u5E8F\u6570\u7EC4\u7684\u5E73\u65B9\uFF08977\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u76F4\u63A5\u63D2\u5165\u6392\u5E8F</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//\u5982\u679C\u5C0F\u4E86\u5C31\u5F97\u5F80\u540E\u79FB</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>temp<span class="token operator">&lt;</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//\u5C06\u6570\u7EC4\u5F80\u540E\u79FB</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token comment">//\u5927\u4E8E\u7B49\u4E8E\u5C31\u4E0D\u7528\u79FB</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E8C\u5206\u63D2\u5165\u6392\u5E8F</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        right <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token comment">//\u5F97\u5230\u63D2\u5165\u4F4D\u7F6E</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;=</span>ans<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;</span>right<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//\u6570\u7EC4\u5411\u540E\u79FB</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9009\u62E9\u63D2\u5165\u6392\u5E8F</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> min<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>   
        min <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//\u6B64\u5904\u8BB0\u5F55\u7684\u662F\u4F4D\u7F6E</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//\u627E\u5230\u6700\u5C0F\u503C\u4F4D\u7F6E</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token operator">&gt;</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                min <span class="token operator">=</span> j<span class="token punctuation">;</span>   
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token comment">//\u4EA4\u6362\u4F4D\u7F6E</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>ans<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5192\u6CE1\u6392\u5E8F</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> min<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">int</span> temp<span class="token operator">=</span>ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5E26\u5224\u65AD\u6761\u4EF6\u7684\u5192\u6CE1</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> min<span class="token punctuation">;</span>
    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> end<span class="token punctuation">;</span>
    <span class="token keyword">int</span> last <span class="token operator">=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">while</span><span class="token punctuation">(</span>numsSize<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        end <span class="token operator">=</span> last<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>end<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token keyword">int</span> temp<span class="token operator">=</span>ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				ans<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>
                last <span class="token operator">=</span> j<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5FAA\u73AF\u6B21\u6570\u4F18\u5316</strong>\uFF1A\u5F53\u5192\u6CE1\u6392\u5E8F\u8FDB\u884C\u5916\u5C42\u5FAA\u73AF\u65F6\uFF0C<strong>\u5185\u5C42\u5FAA\u73AF\u4E2D</strong>\u4EA4\u6362\u503C\u8BED\u53E5<strong>\u4E0D\u4F1A</strong>\u518D\u6267\u884C\uFF08\u5185\u5C42\u5FAA\u73AFif\u8BED\u53E5\u6C38\u8FDC\u4E3Afalse\uFF09\uFF0C\u6B64\u65F6\u6211\u4EEC\u8BA4\u4E3A\u6392\u5E8F\u5DF2\u7ECF\u5B8C\u6210\uFF0C\u53EF\u4EE5\u9000\u51FA<strong>\u5185\u5916\u5C42</strong>\u5FAA\u73AF\u3002</p><p><strong>\u5224\u65AD\u6B21\u6570\u4F18\u5316</strong>\uFF1A\u5192\u6CE1\u6392\u5E8F\u5728\u8FDB\u884C<strong>\u5185\u5C42\u5FAA\u73AF</strong>\u65F6\uFF0C\u5FAA\u73AF\u6B21\u6570<strong>\u6C38\u8FDC</strong>\u662F<strong>\u9012\u51CF</strong>\u7684\u3002\u5219<strong>\u4E0B\u4E00\u6B21\u5185\u5C42\u5FAA\u73AF</strong>\u7684\u6B21\u6570\u5C0F\u4E8E<strong>\u4E0A\u4E00\u6B21\u5FAA\u73AF</strong>\u7684\u6B21\u6570\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5FEB\u901F\u6392\u5E8F</span>
<span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F\u6B64\u5904\u7684\u9009\u62E9\uFF0C\u5982\u679C\u9009left\uFF0C\u5219\u8981\u5148\u52A8\u8FDC\u7AEF</span>
    i <span class="token operator">=</span> left<span class="token punctuation">;</span>
    j <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span><span class="token comment">//\u4E0E\u4E0B\u9762\u4E24\u4E2A\u5FAA\u73AF\u6709\u5173</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>tmp<span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>tmp<span class="token operator">&gt;=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">quick_sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5FEB\u6392\u53E6\u4E00\u79CD\u4E0D\u662F\u4EA4\u6362</span>
<span class="token keyword">int</span> <span class="token function">Pattion</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> temp<span class="token operator">=</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span>pivoty<span class="token operator">=</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token operator">&gt;=</span>pivoty<span class="token operator">&amp;&amp;</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span> high<span class="token operator">--</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivoty<span class="token operator">&amp;&amp;</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span> low<span class="token operator">++</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>
	<span class="token keyword">return</span> low<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> p<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
		p<span class="token operator">=</span><span class="token function">Pattion</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token operator">*</span>returnSize<span class="token operator">=</span>n<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u6CE8\u610F</p><p>\u6807\u5FD7\u4F4D\u8BBE\u7F6E\u597D\u4EE5\u540E\u4E00\u5B9A\u8981\u5148\u52A8\u79BB\u6807\u5FD7\u4F4D\u8FDC\u7684\u6307\u9488\uFF0C\u5426\u5219\u7B97\u6CD5\u5C31\u4E71\u4E86\u3002</p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5F52\u5E76\u6392\u5E8F while\u7528\u7684\u591A</span>
<span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
	
	<span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>low<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">int</span> i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>temp<span class="token operator">=</span>low<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			a<span class="token punctuation">[</span>temp<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> a<span class="token punctuation">[</span>temp<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> a<span class="token punctuation">[</span>temp<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span> a<span class="token punctuation">[</span>temp<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	 
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> mid<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">==</span>high<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token keyword">else</span><span class="token punctuation">{</span>
		mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token function">Merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">Merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">MergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token operator">*</span>returnSize<span class="token operator">=</span>n<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">Merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5F52\u5E76\u6392\u5E8F for\u7528\u7684\u591A</span>
<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left_low <span class="token operator">=</span> low<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left_high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> right_low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right_high <span class="token operator">=</span> high<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>left_low<span class="token operator">&lt;=</span>left_high<span class="token operator">&amp;&amp;</span>right_low<span class="token operator">&lt;=</span>right_high<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left_low<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>right_low<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left_low<span class="token punctuation">]</span><span class="token punctuation">;</span>
            left_low<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right_low<span class="token punctuation">]</span><span class="token punctuation">;</span>
            right_low<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left_low<span class="token operator">&lt;=</span>left_high<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> left_low<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>left_high<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right_low<span class="token operator">&lt;=</span>right_high<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> right_low<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>right_high<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>low<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//low+i;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mid <span class="token operator">=</span> low<span class="token operator">+</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">merge_sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7B80\u6D01\u4E00\u70B9\u5F52\u5E76</span>
<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left_low <span class="token operator">=</span> low<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left_high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> right_low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right_high <span class="token operator">=</span> high<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left_low<span class="token operator">&lt;=</span>left_high<span class="token operator">&amp;&amp;</span>right_low<span class="token operator">&lt;=</span>right_high<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left_low<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>right_low<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left_low<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right_low<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left_low<span class="token operator">&lt;=</span>left_high<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>left_low<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>right_low<span class="token operator">&lt;=</span>right_high<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>right_low<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>low<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//low+i;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mid <span class="token operator">=</span> low<span class="token operator">+</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">merge_sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\u2014\u2014\u611F\u89C9\u7C7B\u4F3C\u5F52\u5E76\uFF0C\u53EA\u4E0D\u8FC7\u662F\u4ECE\u4E2D\u95F4\u5F80\u4E24\u8FB9\u8D70\uFF0C\u5F52\u5E76\u4F7F\u5E73\u884C\u8D70</span>
<span class="token comment">//977</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> signal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>numsSize<span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u521D\u59CB\u503C\u7684\u8BBE\u7F6E\u4F1A\u5F71\u54CD\u987A\u5E8F</span>
    <span class="token comment">//while(nums[signal++]&lt;0);//\u8FD9\u53E5\u8BDD\u4F1A\u5BFC\u81F4\u8D8A\u754C\u8BBF\u95EE\u6570\u7EC4</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> signal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>signal<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>signal<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>signal<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			j<span class="token operator">=</span>signal<span class="token punctuation">;</span>
			i<span class="token operator">=</span>signal<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> 
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">)</span><span class="token comment">//i\u548Cj\u7684\u8D70\u5411\u4E0D\u540C\uFF0C\u6CE8\u610F</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>tmp<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>tmp<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>tmp<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span>tmp<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u53CC\u6307\u9488\u6846\u67B6" tabindex="-1"><a class="header-anchor" href="#\u53CC\u6307\u9488\u6846\u67B6" aria-hidden="true">#</a> \u53CC\u6307\u9488\u6846\u67B6</h3><p>\u53CC\u6307\u9488\uFF1A\u2460\u4E00\u5FEB\u4E00\u6162 \u2461\u4E00\u5DE6\u4E00\u53F3</p><h3 id="\u8F6E\u8F6C\u6570\u7EC4-189" tabindex="-1"><a class="header-anchor" href="#\u8F6E\u8F6C\u6570\u7EC4-189" aria-hidden="true">#</a> \u8F6E\u8F6C\u6570\u7EC4\uFF08189\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5148\u6574\u4F53\u7FFB\u8F6C\uFF0C\u518D\u5206\u522B\u7FFB\u8F6C</span>
<span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    k <span class="token operator">%=</span> numsSize<span class="token punctuation">;</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>k<span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u79FB\u52A8\u96F6-283" tabindex="-1"><a class="header-anchor" href="#\u79FB\u52A8\u96F6-283" aria-hidden="true">#</a> \u79FB\u52A8\u96F6\uFF08283\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u91CE\u8DEF\u5B50\u4E0D\u63A8\u8350</span>
<span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tail<span class="token operator">=</span>numsSize<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>tail<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>tail<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            tail<span class="token operator">--</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\u63A8\u8350</span>
<span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E24\u6570\u4E4B\u548C-\u6709\u5E8F-167-1" tabindex="-1"><a class="header-anchor" href="#\u4E24\u6570\u4E4B\u548C-\u6709\u5E8F-167-1" aria-hidden="true">#</a> \u4E24\u6570\u4E4B\u548C|\u6709\u5E8F\uFF08167\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> numbersSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token operator">=</span>numbersSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u53CD\u8F6C\u5B57\u7B26\u4E32-344" tabindex="-1"><a class="header-anchor" href="#\u53CD\u8F6C\u5B57\u7B26\u4E32-344" aria-hidden="true">#</a> \u53CD\u8F6C\u5B57\u7B26\u4E32\uFF08344\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E00\u5DE6\u4E00\u53F3</span>
<span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> sSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    j<span class="token operator">=</span>sSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> temp<span class="token punctuation">;</span>
        temp <span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD-iii-557" tabindex="-1"><a class="header-anchor" href="#\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD-iii-557" aria-hidden="true">#</a> \u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD III\uFF08557\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E00\u5FEB\u4E00\u6162</span>
<span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> p1<span class="token punctuation">,</span> <span class="token keyword">int</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        p1<span class="token operator">++</span><span class="token punctuation">;</span>
        p2<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tail<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>tail<span class="token operator">&lt;</span>len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tail<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>head<span class="token punctuation">,</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tail<span class="token operator">++</span><span class="token punctuation">;</span>
            head <span class="token operator">=</span> tail<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token comment">//\u56E0\u4E3A\u7ED3\u5C3E\u6CA1\u6709\u7A7A\u683C\u6240\u4EE5\u8FD8\u9700\u8981\u4E0B\u9762\u8F6C\u5316</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>head<span class="token punctuation">,</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u94FE\u8868\u4E2D\u95F4\u8282\u70B9-876" tabindex="-1"><a class="header-anchor" href="#\u94FE\u8868\u4E2D\u95F4\u8282\u70B9-876" aria-hidden="true">#</a> \u94FE\u8868\u4E2D\u95F4\u8282\u70B9\uFF08876\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E00\u5FEB\u4E00\u6162</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>slow<span class="token operator">=</span>head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>fast<span class="token operator">=</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>fast<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u76F8\u4EA4\u94FE\u8868-160" tabindex="-1"><a class="header-anchor" href="#\u76F8\u4EA4\u94FE\u8868-160" aria-hidden="true">#</a> \u76F8\u4EA4\u94FE\u8868\uFF08160\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headA<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>headA <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> headB <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>pA <span class="token operator">=</span> headA<span class="token punctuation">,</span> <span class="token operator">*</span>pB <span class="token operator">=</span> headB<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pA <span class="token operator">!=</span> pB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pA <span class="token operator">=</span> pA <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> headB <span class="token operator">:</span> pA<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        pB <span class="token operator">=</span> pB <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> headA <span class="token operator">:</span> pB<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pA<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9-19" tabindex="-1"><a class="header-anchor" href="#\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9-19" aria-hidden="true">#</a> \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C N \u4E2A\u7ED3\u70B9\uFF0819\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\uFF1A\u89E3\u51B3\u5220\u9664\u5934\u7ED3\u70B9\uFF0C\u5728\u5934\u524D\u9762\u52A0\u4E2A\u8282\u70B9</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> del <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> slow <span class="token operator">=</span> dummy<span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    slow<span class="token operator">-&gt;</span>next <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token comment">//\u5934\u8282\u70B9\u91CA\u653E</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>slow<span class="token operator">-&gt;</span>next <span class="token operator">==</span> head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        del <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        head <span class="token operator">=</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> ans <span class="token operator">=</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20-83" tabindex="-1"><a class="header-anchor" href="#\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20-83" aria-hidden="true">#</a> \u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20\uFF0883\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7B80\u5355\u94FE\u8868\u5220\u9664</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val <span class="token operator">==</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20-ii-82" tabindex="-1"><a class="header-anchor" href="#\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20-ii-82" aria-hidden="true">#</a> \u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20 II\uFF0882\uFF09</h3><p>\u94FE\u8868\u7684\u9898\u901A\u5E38\u9700\u8981\u6CE8\u610F\u4E24\u70B9\uFF1A</p><ol><li>\u820D\u5F97\u7528\u53D8\u91CF\uFF0C\u5343\u4E07\u522B\u60F3\u7740\u8282\u7701\u53D8\u91CF\uFF0C\u5426\u5219\u5BB9\u6613\u88AB\u903B\u8F91\u7ED5\u6655</li><li>head \u6709\u53EF\u80FD\u9700\u8981\u6539\u52A8\u65F6\uFF0C\u5148\u589E\u52A0\u4E00\u4E2A \u5047head\uFF0C\u8FD4\u56DE\u7684\u65F6\u5019\u76F4\u63A5\u53D6 <code>\u5047head.next</code>\uFF0C\u8FD9\u6837\u5C31\u4E0D\u9700\u8981\u4E3A\u4FEE\u6539 head \u589E\u52A0\u4E00\u5927\u5806\u903B\u8F91\u4E86\u3002</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> left <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> right <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val<span class="token operator">==</span>right<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">-&gt;</span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val<span class="token operator">==</span>right<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> 
                right <span class="token operator">=</span> right<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            right <span class="token operator">=</span> right<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>right<span class="token punctuation">)</span> left<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">-&gt;</span>next <span class="token operator">=</span> right<span class="token punctuation">;</span>
            left <span class="token operator">=</span> left<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            right <span class="token operator">=</span> right<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E09\u6570\u4E4B\u548C-15" tabindex="-1"><a class="header-anchor" href="#\u4E09\u6570\u4E4B\u548C-15" aria-hidden="true">#</a> \u4E09\u6570\u4E4B\u548C\uFF0815\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> numsSize  <span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> numsSize <span class="token operator">*</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>
    <span class="token comment">//left\u6307\u9488\u76F8\u5F53\u4E8E\u9009\u7684\u7B2C\u4E00\u4E2A\u6570</span>
    <span class="token comment">//mid\u6307\u9488\u76F8\u5F53\u4E8E\u5728\u5269\u4E0B\u7684\u6570\u4E2D\u6307\u5411\u6700\u5DE6\u8FB9</span>
    <span class="token comment">//right\u6307\u9488\u76F8\u5F53\u4E8E\u5728\u5269\u4E0B\u7684\u6570\u4E2D\u6307\u5411\u6700\u53F3\u8FB9</span>
    <span class="token keyword">int</span> indexLeft   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> indexMiddle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> indexRight  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//\u5FEB\u6392\u8FC7\u540E\uFF0C\u4F7F\u7528\u4E09\u6307\u9488 \u904D\u5386</span>
    <span class="token comment">//\u5DE6\u8FB9\u904D\u5386\u5230\u5012\u6570\u7B2C\u4E09\u4F4D\u5373\u53EF</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>indexLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> indexLeft<span class="token operator">&lt;</span> numsSize <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> indexLeft<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexLeft<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">//\u56E0\u4E3A\u662F\u5FEB\u6392\u7684\u7ED3\u679C\uFF0C\u6240\u4EE5\u5982\u679C\u51FA\u73B0\u5927\u96F6\u7684</span>
            <span class="token comment">//\u540E\u9762\u7684\u503C\u90FD\u662F\u5927\u4E8E0\u7684</span>
            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u5982\u679C\u503C\u76F8\u540C \u5219\u4E0D\u9700\u8981\u904D\u5386</span>
        <span class="token comment">//\u53BB\u91CD\u53BB\u4E00\u8FB9\u5373\u53EF\uFF0C\u53E6\u4E00\u534A\u80AF\u5B9A\u4E0D\u4F1A\u91CD\u590D</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>indexLeft <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>indexLeft<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>indexLeft<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        indexMiddle <span class="token operator">=</span> indexLeft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        indexRight  <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//\u53CC\u6307\u904D\u5386 \u627E\u5230\u6240\u6709\u7684\u53EF\u80FD</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>indexMiddle <span class="token operator">&lt;</span> indexRight<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexLeft<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>indexMiddle<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>indexRight<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
                ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexLeft<span class="token punctuation">]</span><span class="token punctuation">;</span>
                ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexMiddle<span class="token punctuation">]</span><span class="token punctuation">;</span>
                ans<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexRight<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>returnSize <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">//\u8FC7\u6EE4\u76F8\u7B49\u7684\u503C</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>indexMiddle <span class="token operator">&lt;</span> indexRight <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>indexMiddle<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>indexMiddle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>indexMiddle <span class="token operator">&lt;</span> indexRight <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>indexRight<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>indexRight<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//\u5DE6\u8FB9\u9012\u51CF</span>
                indexRight<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//\u53F3\u8FB9\u9012\u589E</span>
                indexMiddle<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u56DB\u6570\u4E4B\u548C-18" tabindex="-1"><a class="header-anchor" href="#\u56DB\u6570\u4E4B\u548C-18" aria-hidden="true">#</a> \u56DB\u6570\u4E4B\u548C\uFF0818\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">fourSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span> returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//len-3</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//len-2</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//j&gt;i+1</span>
            <span class="token comment">//nums[j]+nums[i]\u6CE8\u610F</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token comment">//\u5B66\u4E60\u4EE5\u4E0B\u8FD9\u79CD\u5199\u6CD5</span>
                    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
                    ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
                    <span class="token comment">//\u8BB0\u5F97\u53BB\u91CD\uFF0C\u53EA\u53BB\u4E00\u8FB9\u5373\u53EF</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>sum<span class="token operator">&lt;</span>target<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>sum<span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    right<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6BD4\u8F83\u542B\u9000\u683C\u7684\u5B57\u7B26\u4E32-844" tabindex="-1"><a class="header-anchor" href="#\u6BD4\u8F83\u542B\u9000\u683C\u7684\u5B57\u7B26\u4E32-844" aria-hidden="true">#</a> \u6BD4\u8F83\u542B\u9000\u683C\u7684\u5B57\u7B26\u4E32\uFF08844\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6808</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">build_str</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//\u5224\u65AD\u662F\u5426\u4E3A\u7A7A\u6808</span>
        <span class="token punctuation">{</span>
            len<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">backspaceCompare</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">build_str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">build_str</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u76F8\u7B49\u8FD4\u56DE0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5012\u5E8F\u904D\u5386+\u53CC\u6307\u9488</span>
bool <span class="token function">backspaceCompare</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> skip_S<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> skip_T<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                skip_S<span class="token operator">++</span><span class="token punctuation">;</span>
                i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>skip_S<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                skip_S<span class="token operator">--</span><span class="token punctuation">;</span>
                i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
           <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                skip_T<span class="token operator">++</span><span class="token punctuation">;</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>skip_T<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                skip_T<span class="token operator">--</span><span class="token punctuation">;</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u76F8\u7B49\u540C\u65F6\u79FB\u52A8</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u533A\u95F4\u5217\u8868\u7684\u4EA4\u96C6-986" tabindex="-1"><a class="header-anchor" href="#\u533A\u95F4\u5217\u8868\u7684\u4EA4\u96C6-986" aria-hidden="true">#</a> \u533A\u95F4\u5217\u8868\u7684\u4EA4\u96C6\uFF08986\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">intervalIntersection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> firstList<span class="token punctuation">,</span> <span class="token keyword">int</span> firstListSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> firstListColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> secondList<span class="token punctuation">,</span> <span class="token keyword">int</span> secondListSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> secondListColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>firstListSize<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>secondListSize<span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a1 <span class="token operator">=</span> firstList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b1 <span class="token operator">=</span> firstList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a2 <span class="token operator">=</span> secondList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b2 <span class="token operator">=</span> secondList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token operator">&lt;</span>a2<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b2<span class="token operator">&lt;</span>a1<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> max_val <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> min_val <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> max_val<span class="token punctuation">;</span>
            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> min_val<span class="token punctuation">;</span>
            
            <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token operator">==</span>b2<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token operator">&lt;</span>b2<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u76DB\u6700\u591A\u6C34\u7684\u5BB9\u5668-11" tabindex="-1"><a class="header-anchor" href="#\u76DB\u6700\u591A\u6C34\u7684\u5BB9\u5668-11" aria-hidden="true">#</a> \u76DB\u6700\u591A\u6C34\u7684\u5BB9\u5668\uFF0811\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> heightSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token operator">=</span>heightSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u957F\u56DE\u6587\u5B50\u4E32-5" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u56DE\u6587\u5B50\u4E32-5" aria-hidden="true">#</a> \u6700\u957F\u56DE\u6587\u5B50\u4E32\uFF085\uFF09</h3><p>\u4E2D\u95F4\u5F80\u4E24\u8FB9\u627E</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\uFF0C\u5C31\u662F\u6709\u70B9\u6D6A\u8D39\u7A7A\u95F4</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token operator">=</span>j<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> res <span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        left<span class="token operator">--</span><span class="token punctuation">;</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>right<span class="token operator">-</span><span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
    res<span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> s1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> s2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        s1 <span class="token operator">=</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2 <span class="token operator">=</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">?</span>ans<span class="token operator">:</span>s1<span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">?</span>ans<span class="token operator">:</span>s2<span class="token punctuation">;</span>
        s1<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
        s2<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6ED1\u52A8\u7A97\u53E3" tabindex="-1"><a class="header-anchor" href="#\u6ED1\u52A8\u7A97\u53E3" aria-hidden="true">#</a> \u6ED1\u52A8\u7A97\u53E3</h2><div class="custom-container tip"><p class="custom-container-title">\u6211\u7684\u7406\u89E3</p><p>\u6ED1\u52A8\u7A97\u53E3\u548C\u53CC\u6307\u9488\u533A\u522B\u5C31\u662F\u4E24\u4E2A\u6307\u9488\u540C\u5411\u79FB\u52A8\u3002</p></div><h3 id="\u6846\u67B6-1" tabindex="-1"><a class="header-anchor" href="#\u6846\u67B6-1" aria-hidden="true">#</a> \u6846\u67B6</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u57FA\u672C\u601D\u60F3</span>
<span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u589E\u5927\u7A97\u53E3</span>
    window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u7F29\u5C0F\u7A97\u53E3</span>
        window<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* \u6ED1\u52A8\u7A97\u53E3\u7B97\u6CD5\u6846\u67B6 */</span>
<span class="token keyword">void</span> <span class="token function">slidingWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> need<span class="token punctuation">,</span> window<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">)</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// c \u662F\u5C06\u79FB\u5165\u7A97\u53E3\u7684\u5B57\u7B26</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u589E\u5927\u7A97\u53E3</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8FDB\u884C\u7A97\u53E3\u5185\u6570\u636E\u7684\u4E00\u7CFB\u5217\u66F4\u65B0</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token comment">/*** debug \u8F93\u51FA\u7684\u4F4D\u7F6E ***/</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;window: [%d, %d)\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/********************/</span>
        
        <span class="token comment">// \u5224\u65AD\u5DE6\u4FA7\u7A97\u53E3\u662F\u5426\u8981\u6536\u7F29</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d \u662F\u5C06\u79FB\u51FA\u7A97\u53E3\u7684\u5B57\u7B26</span>
            <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// \u7F29\u5C0F\u7A97\u53E3</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// \u8FDB\u884C\u7A97\u53E3\u5185\u6570\u636E\u7684\u4E00\u7CFB\u5217\u66F4\u65B0</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32-3" tabindex="-1"><a class="header-anchor" href="#\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32-3" aria-hidden="true">#</a> \u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32\uFF083\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7EAF\u6ED1\u52A8\u7A97\u53E3</span>
<span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> havesame<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            havesame<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>left<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>right<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    havesame<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>havesame<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                left<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        max <span class="token operator">=</span> max<span class="token operator">&lt;</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>max<span class="token punctuation">;</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//hash+\u6ED1\u52A8\u7A97\u53E3</span>
<span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>left<span class="token operator">&lt;</span>hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//\u91CD\u590D\u5C31left\u8DF3\u5230right+1</span>
        <span class="token punctuation">{</span>
            left <span class="token operator">=</span> hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u8BB0\u5F55\u6700\u540E\u51FA\u73B0\u7684\u4F4D\u7F6E</span>
        hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       
        max <span class="token operator">=</span> max<span class="token operator">&lt;</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>max<span class="token punctuation">;</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B57\u7B26\u4E32\u7684\u6392\u5217-567" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u7684\u6392\u5217-567" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u7684\u6392\u5217\uFF08567\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6ED1\u52A8\u7A97\u53E3(\u6BD4\u8F83hash\u8868\u5C31\u884C)</span>
bool <span class="token function">cmp_hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>dic1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>dic2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dic1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>dic2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u51FA\u73B0\u4E0D\u76F8\u7B49\u5143\u7D20\uFF0C\u8FD4\u56DE0.</span>
            <span class="token comment">//\u76F4\u63A5\u5224\u65AD\u4E0D\u7B49\u7684\u60C5\u51B5\uFF0C\u5982\u679C\u5224\u65AD\u7B49\u7684\u60C5\u51B5\u4F1A\u76F4\u63A5\u8FD4\u56DE\u51FA\u53BB</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">checkInclusion</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dic1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dic2<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dic1<span class="token punctuation">[</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dic2<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>len1<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cmp_hash</span><span class="token punctuation">(</span>dic1<span class="token punctuation">,</span>dic2<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                dic2<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u8FD8\u6709\u4E00\u79CD\u65B9\u6CD5\uFF1A\u6BD4\u8F83\u524D\u7F00\u548C\u5DEE\u503C\uFF0C\u76F8\u7B49\u540E\u6BD4\u8F83\u957F\u5EA6</p><h3 id="\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD-438" tabindex="-1"><a class="header-anchor" href="#\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD-438" aria-hidden="true">#</a> \u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD\uFF08438\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53EA\u80FD\u8BF4\u53CC\u6307\u9488</span>
<span class="token keyword">int</span> <span class="token function">cmp_dict</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> dict_S<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> dict_P<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dict_S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>dict_P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">slide_window</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> slen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> plen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dict_P <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>plen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dict_P<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>slen<span class="token operator">-</span><span class="token punctuation">(</span>plen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        right <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token operator">*</span> dict_S <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>plen<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dict_S<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cmp_dict</span><span class="token punctuation">(</span>dict_S<span class="token punctuation">,</span>dict_P<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span> returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">slide_window</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6ED1\u52A8\u7A97\u53E3</span>
<span class="token keyword">int</span> <span class="token function">cmp_dict</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> dict_S<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> dict_P<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dict_S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>dict_P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">slide_window</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> slen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> plen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dict_P <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> left<span class="token operator">+</span>plen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>plen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dict_P<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>slen<span class="token operator">-</span><span class="token punctuation">(</span>plen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token operator">*</span> dict_S <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>left<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dict_S<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cmp_dict</span><span class="token punctuation">(</span>dict_S<span class="token punctuation">,</span>dict_P<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">;</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span> returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">slide_window</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6ED1\u52A8\u7A97\u53E3\uFF1A\u4F18\u5316\u7533\u8BF7\u7684\u7A7A\u95F4\uFF0C\u91C7\u7528\u4E86\u961F\u5217</span>
<span class="token keyword">int</span> <span class="token function">cmp_dict</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> dict_S<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> dict_P<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dict_S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>dict_P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">slide_window</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> slen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> plen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dict_P <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dict_S <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>plen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dict_P<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dict_S<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>plen<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cmp_dict</span><span class="token punctuation">(</span>dict_S<span class="token punctuation">,</span>dict_P<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>
            dict_S<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span> returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">slide_window</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E58\u79EF\u5C0F\u4E8E-k-\u7684\u5B50\u6570\u7EC4-713" tabindex="-1"><a class="header-anchor" href="#\u4E58\u79EF\u5C0F\u4E8E-k-\u7684\u5B50\u6570\u7EC4-713" aria-hidden="true">#</a> \u4E58\u79EF\u5C0F\u4E8E K \u7684\u5B50\u6570\u7EC4\uFF08713\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6ED1\u52A8\u7A97\u53E3</span>
<span class="token keyword">int</span> <span class="token function">numSubarrayProductLessThanK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> multi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        multi <span class="token operator">*=</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>multi<span class="token operator">&gt;=</span>k<span class="token operator">&amp;&amp;</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            multi <span class="token operator">/=</span>nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u8FD9\u4E2A\u516C\u5F0F\u662F\u6700\u5173\u952E\u7684</span>
        ans <span class="token operator">+=</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4-209" tabindex="-1"><a class="header-anchor" href="#\u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4-209" aria-hidden="true">#</a> \u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4\uFF08209\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span>b<span class="token operator">:</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> min_ans <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>   
        sum <span class="token operator">+=</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;=</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            min_ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_ans<span class="token punctuation">,</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum <span class="token operator">-=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> min_ans<span class="token operator">==</span>INT_MAX<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>min_ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22-\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22-\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22" aria-hidden="true">#</a> \u5E7F\u5EA6\u4F18\u5148\u641C\u7D22 / \u6DF1\u5EA6\u4F18\u5148\u641C\u7D22</h2><h3 id="\u6846\u67B6-2" tabindex="-1"><a class="header-anchor" href="#\u6846\u67B6-2" aria-hidden="true">#</a> \u6846\u67B6</h3><p><strong>\u5728\u4E8C\u7EF4\u77E9\u9635\u4E2D\u641C\u7D22\uFF0C\u4EC0\u4E48\u65F6\u5019\u7528BFS\uFF0C\u4EC0\u4E48\u65F6\u5019\u7528DFS\uFF1F</strong></p><ol><li><p>\u5982\u679C\u53EA\u662F\u8981\u627E\u5230\u67D0\u4E00\u4E2A\u7ED3\u679C\u662F\u5426\u5B58\u5728\uFF0C\u90A3\u4E48DFS\u4F1A\u66F4\u9AD8\u6548\u3002\u56E0\u4E3ADFS\u4F1A\u9996\u5148\u628A\u4E00\u79CD\u53EF\u80FD\u7684\u60C5\u51B5\u5C1D\u8BD5\u5230\u5E95\uFF0C\u624D\u4F1A\u56DE\u6EAF\u53BB\u5C1D\u8BD5\u4E0B\u4E00\u79CD\u60C5\u51B5\uFF0C\u53EA\u8981\u627E\u5230\u4E00\u79CD\u60C5\u51B5\uFF0C\u5C31\u53EF\u4EE5\u8FD4\u56DE\u4E86\u3002\u4F46\u662FBFS\u5FC5\u987B\u6240\u6709\u53EF\u80FD\u7684\u60C5\u51B5\u540C\u65F6\u5C1D\u8BD5\uFF0C\u5728\u627E\u5230\u4E00\u79CD\u6EE1\u8DB3\u6761\u4EF6\u7684\u7ED3\u679C\u7684\u540C\u65F6\uFF0C\u4E5F\u5C1D\u8BD5\u4E86\u5F88\u591A\u4E0D\u5FC5\u8981\u7684\u8DEF\u5F84</p></li><li><p>\u5982\u679C\u662F\u8981\u627E\u6240\u6709\u53EF\u80FD\u7ED3\u679C\u4E2D\u6700\u77ED\u7684\uFF0C\u90A3\u4E48BFS\u56DE\u66F4\u9AD8\u6548\u3002\u56E0\u4E3ADFS\u662F\u4E00\u79CD\u4E00\u79CD\u7684\u5C1D\u8BD5\uFF0C\u5728\u628A\u6240\u6709\u53EF\u80FD\u60C5\u51B5\u5C1D\u8BD5\u5B8C\u4E4B\u524D\uFF0C\u65E0\u6CD5\u786E\u5B9A\u54EA\u4E2A\u662F\u6700\u77ED\uFF0C\u6240\u4EE5DFS\u5FC5\u987B\u628A\u6240\u6709\u60C5\u51B5\u90FD\u627E\u4E00\u904D\uFF0C\u624D\u80FD\u786E\u5B9A\u6700\u7EC8\u7B54\u6848\uFF08DFS\u7684\u4F18\u5316\u5C31\u662F\u526A\u679D\uFF0C\u4E0D\u526A\u679D\u5F88\u5BB9\u6613\u8D85\u65F6\uFF09\u3002\u800CBFS\u4ECE\u4E00\u5F00\u59CB\u5C31\u662F\u5C1D\u8BD5\u6240\u6709\u60C5\u51B5\uFF0C\u6240\u4EE5\u53EA\u8981\u627E\u5230\u7B2C\u4E00\u4E2A\u8FBE\u5230\u7684\u90A3\u4E2A\u70B9\uFF0C\u90A3\u5C31\u662F\u6700\u77ED\u7684\u8DEF\u5F84\uFF0C\u53EF\u4EE5\u76F4\u63A5\u8FD4\u56DE\u4E86\uFF0C\u5176\u4ED6\u60C5\u51B5\u90FD\u53EF\u4EE5\u7701\u7565\u4E86\uFF0C\u6240\u4EE5\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0CBFS\u66F4\u9AD8\u6548\u3002</p></li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//\u4E0D\u7B26\u5408\u8FB9\u754C\u6761\u4EF6</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//\u5FAA\u73AF\u7684\u662F\u5206\u53C9\u7684\u6570\u91CF</span>
    <span class="token punctuation">{</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//\u5224\u65AD\u662F\u5426\u6EE1\u8DB3\u641C\u7D22\u6761\u4EF6</span>
        <span class="token punctuation">{</span>
            <span class="token function">DFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>my<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//BFS \u5355\u8D77\u70B9</span>
<span class="token keyword">while</span> queue \u4E0D\u7A7A\uFF1A
    cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> \u8282\u70B9 in cur\u7684\u6240\u6709\u76F8\u90BB\u8282\u70B9\uFF1A
        <span class="token keyword">if</span> \u8BE5\u8282\u70B9\u6709\u6548\u4E14\u672A\u8BBF\u95EE\u8FC7\uFF1A
            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\u8BE5\u8282\u70B9<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u591A\u8D77\u70B9</span>
level <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> queue \u4E0D\u7A7A\uFF1A
    size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> \u8282\u70B9 in cur\u7684\u6240\u6709\u76F8\u90BB\u8282\u70B9\uFF1A
            <span class="token keyword">if</span> \u8BE5\u8282\u70B9\u6709\u6548\u4E14\u672A\u88AB\u8BBF\u95EE\u8FC7\uFF1A
                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\u8BE5\u8282\u70B9<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    level <span class="token operator">++</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u56FE\u50CF\u6E32\u67D3-733" tabindex="-1"><a class="header-anchor" href="#\u56FE\u50CF\u6E32\u67D3-733" aria-hidden="true">#</a> \u56FE\u50CF\u6E32\u67D3\uFF08733\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//floodfill\u6D2A\u6C34\u6DF9\u6CA1\u7B97\u6CD5</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">floodFill</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> image<span class="token punctuation">,</span> <span class="token keyword">int</span> imageSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> imageColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> sr<span class="token punctuation">,</span> <span class="token keyword">int</span> sc<span class="token punctuation">,</span> <span class="token keyword">int</span> newColor<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> imageSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> imageColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u8981\u52A0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8BB0\u5F55\u5F53\u524D\u989C\u8272</span>
    <span class="token keyword">int</span> currColor <span class="token operator">=</span> image<span class="token punctuation">[</span>sr<span class="token punctuation">]</span><span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>currColor<span class="token operator">==</span>newColor<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> image<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> que<span class="token punctuation">[</span>n<span class="token operator">*</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u961F\u5217</span>
    que<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> sr<span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> sc<span class="token punctuation">;</span>
    image<span class="token punctuation">[</span>sr<span class="token punctuation">]</span><span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">=</span> newColor<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u51FA\u961F\u5217</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> que<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> que<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> my <span class="token operator">=</span> y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mx<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>my<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>my<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>image<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span>currColor<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//\u5165\u961F\u5217</span>
                que<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> mx<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> my<span class="token punctuation">;</span>
                image<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span> <span class="token operator">=</span> newColor<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> image<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> image<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> newColor<span class="token punctuation">,</span><span class="token keyword">int</span> currColor<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>image<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>currColor<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        image<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> newColor<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>my <span class="token operator">=</span> y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mx<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>my<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>my<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>image<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span>currColor<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">DFS</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>my<span class="token punctuation">,</span>newColor<span class="token punctuation">,</span>currColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token comment">//floodfill\u6D2A\u6C34\u6DF9\u6CA1\u7B97\u6CD5</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">floodFill</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> image<span class="token punctuation">,</span> <span class="token keyword">int</span> imageSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> imageColSize<span class="token punctuation">,</span> <span class="token keyword">int</span> sr<span class="token punctuation">,</span> <span class="token keyword">int</span> sc<span class="token punctuation">,</span> <span class="token keyword">int</span> newColor<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> imageSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> imageColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>image<span class="token punctuation">[</span>sr<span class="token punctuation">]</span><span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token operator">!=</span>newColor<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> sr<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> newColor<span class="token punctuation">,</span>image<span class="token punctuation">[</span>sr<span class="token punctuation">]</span><span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> image<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5C9B\u5C7F\u7684\u6700\u5927\u9762\u79EF-695" tabindex="-1"><a class="header-anchor" href="#\u5C9B\u5C7F\u7684\u6700\u5927\u9762\u79EF-695" aria-hidden="true">#</a> \u5C9B\u5C7F\u7684\u6700\u5927\u9762\u79EF\uFF08695\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//BFS</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">note</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> sum<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">note</span> que<span class="token punctuation">[</span>n<span class="token operator">*</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>sum<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token comment">//BFS\u7EC8\u6B62\u6761\u4EF6:\u961F\u5217\u4E3A\u7A7A</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mx <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>my <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>mx<span class="token operator">&gt;=</span>n<span class="token operator">||</span>my<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>my<span class="token operator">&gt;=</span>m<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> mx<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> my<span class="token punctuation">;</span>
                right<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">(</span><span class="token operator">*</span>sum<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> gridSize<span class="token punctuation">;</span>
    m <span class="token operator">=</span> gridColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">BFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            max_sum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_sum<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max_sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u627E\u5230\u4E00\u4E2A\u5C9B\u3001\u6DF9\u6CA1</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>sum<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">&gt;=</span>n<span class="token operator">||</span>y<span class="token operator">&gt;=</span>m<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>sum <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>my <span class="token operator">=</span> y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mx<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>my<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>my<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">DFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>my<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> gridSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> gridColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_Area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token function">DFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                max_Area <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_Area<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max_Area<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5408\u5E76\u4E8C\u53C9\u6811-617" tabindex="-1"><a class="header-anchor" href="#\u5408\u5E76\u4E8C\u53C9\u6811-617" aria-hidden="true">#</a> \u5408\u5E76\u4E8C\u53C9\u6811\uFF08617\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1<span class="token punctuation">)</span><span class="token keyword">return</span> root2<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root2<span class="token punctuation">)</span><span class="token keyword">return</span> root1<span class="token punctuation">;</span>
    root1<span class="token operator">-&gt;</span>val <span class="token operator">+=</span> root2<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    root1<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> root2<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root1<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> root2<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//BFS \u4E09\u4E2A\u5E76\u884C\u961F\u5217</span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> t1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> merged <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    merged<span class="token operator">-&gt;</span>val <span class="token operator">=</span> t1<span class="token operator">-&gt;</span>val <span class="token operator">+</span> t2<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span> queue1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token operator">*</span> queue2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> qleft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> qright <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    q<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> merged<span class="token punctuation">;</span>
    queue1<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> t1<span class="token punctuation">;</span>
    queue2<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> t2<span class="token punctuation">;</span>
    qright<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>qleft <span class="token operator">&lt;</span> qright<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node <span class="token operator">=</span> q<span class="token punctuation">[</span>qleft<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>node1 <span class="token operator">=</span> queue1<span class="token punctuation">[</span>qleft<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>node2 <span class="token operator">=</span> queue2<span class="token punctuation">[</span>qleft<span class="token punctuation">]</span><span class="token punctuation">;</span>
        qleft<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>left1 <span class="token operator">=</span> node1<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>left2 <span class="token operator">=</span> node2<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right1 <span class="token operator">=</span> node1<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> <span class="token operator">*</span>right2 <span class="token operator">=</span> node2<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> left2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>left1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> left2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> left <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                left<span class="token operator">-&gt;</span>val <span class="token operator">=</span> left1<span class="token operator">-&gt;</span>val <span class="token operator">+</span> left2<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
                node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
                q<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>
                queue1<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> left1<span class="token punctuation">;</span>
                queue2<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> left2<span class="token punctuation">;</span>
                qright<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> left1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> left2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>right1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> right2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>right1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> right2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                right<span class="token operator">-&gt;</span>val <span class="token operator">=</span> right1<span class="token operator">-&gt;</span>val <span class="token operator">+</span> right2<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
                node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
                q<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>
                queue1<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> right1<span class="token punctuation">;</span>
                queue2<span class="token punctuation">[</span>qright<span class="token punctuation">]</span> <span class="token operator">=</span> right2<span class="token punctuation">;</span>
                qright<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> right1<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> right2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> merged<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488-116" tabindex="-1"><a class="header-anchor" href="#\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488-116" aria-hidden="true">#</a> \u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488\uFF08116\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u76F8\u5F53\u4E8E\u6811\u7684\u6DF1\u5EA6\u4F18\u5148\u904D\u5386</span>
<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>node1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>node2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>node1<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>node2<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>node1<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>node1<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>node2<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>node2<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>node1<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>node2<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//BFS</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span>
	<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> que<span class="token punctuation">[</span><span class="token number">4097</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> right<span class="token operator">-</span>left<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> node <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// \u8FDE\u63A5</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5165\u6808</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488-ii-117" tabindex="-1"><a class="header-anchor" href="#\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488-ii-117" aria-hidden="true">#</a> \u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488 II\uFF08117\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5C42\u5E8F\u904D\u5386\uFF08\u5E7F\u5EA6\uFF09\uFF08\u961F\u5217\uFF09</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>que<span class="token punctuation">[</span><span class="token number">6001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> right<span class="token operator">-</span>left<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> last<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>f <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> f<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            last <span class="token operator">=</span> f<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u8FD8\u662F\u5C42\u5E8F\u904D\u5386\u7684\u601D\u60F3</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> cur <span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> dummy <span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dummy<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> pre <span class="token operator">=</span>dummy<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
                pre <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                pre <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cur <span class="token operator">=</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        dummy<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u76F8\u540C\u7684\u6811-100" tabindex="-1"><a class="header-anchor" href="#\u76F8\u540C\u7684\u6811-100" aria-hidden="true">#</a> \u76F8\u540C\u7684\u6811\uFF08100\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS</span>
bool <span class="token function">cmp_tree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>q<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>q<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>val <span class="token operator">!=</span> q<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F\u8FD9\u91CC\u662F\uFF01=</span>
    <span class="token keyword">return</span> <span class="token function">cmp_tree</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>q<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token function">cmp_tree</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>q<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isSameTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmp_tree</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u53E6\u4E00\u68F5\u6811\u7684\u5B50\u6811-572" tabindex="-1"><a class="header-anchor" href="#\u53E6\u4E00\u68F5\u6811\u7684\u5B50\u6811-572" aria-hidden="true">#</a> \u53E6\u4E00\u68F5\u6811\u7684\u5B50\u6811\uFF08572\uFF09</h3><p>\u8FD8\u6709\u6811\u54C8\u5E0C\u3001\u4E32\u5339\u914D+\u5148\u5E8F\u7684\u65B9\u6CD5</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6DF1\u5EA6\u4F18\u5148</span>
bool <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> subRoot<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> subRoot<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>subRoot<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u6CE8\u610F\u8FD9\u91CC\u662F\uFF01=</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val<span class="token operator">!=</span>subRoot<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>subRoot<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token function">compare</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>subRoot<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">isSubtree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> subRoot<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u4E0E\u4E0A\u4E00\u9898\u76F8\u6BD4\u8FD9\u9898\u8FD8\u5F97\u904D\u5386\u6811\uFF0C\u6240\u4EE5\u6709\u4E0B\u9762\u7684\u4EE3\u7801</span>
    <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isSubtree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isSubtree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_01-\u77E9\u9635-542" tabindex="-1"><a class="header-anchor" href="#_01-\u77E9\u9635-542" aria-hidden="true">#</a> 01 \u77E9\u9635\uFF08542\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS </span>
<span class="token comment">//\u8FD9\u9898DFS\u6781\u9650\u4E86\uFF0C\u6548\u7387\u592A\u592A\u592A\u592A\u4F4E\uFF01\uFF01\uFF01</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> min<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">min_cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">set_min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    min <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> book<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">&gt;=</span>n<span class="token operator">||</span>y<span class="token operator">&gt;=</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">&gt;</span> min<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//\u526A\u679D</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        min <span class="token operator">=</span> <span class="token function">min_cmp</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mx <span class="token operator">=</span> x <span class="token operator">+</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> my <span class="token operator">=</span> y <span class="token operator">+</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mx<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>my<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>my<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">DFS</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span>mx<span class="token punctuation">,</span>my<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
            book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">updateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> matSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    n <span class="token operator">=</span> matSize<span class="token punctuation">;</span>
    m <span class="token operator">=</span> matColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u8981\u52A0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u52A8\u6001\u7533\u8BF7\u4E8C\u7EF4\u6570\u7EC4</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> book<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token function">set_min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">DFS</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>step<span class="token punctuation">,</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u591A\u8D77\u70B9\u7684bfs" tabindex="-1"><a class="header-anchor" href="#\u591A\u8D77\u70B9\u7684bfs" aria-hidden="true">#</a> \u591A\u8D77\u70B9\u7684BFS</h4><p>\u62BD\u8C61\u4E00\u4E0B\uFF0C\u628A\u591A\u4E2A\u8D77\u70B9\u60F3\u8C61\u6210\u4E00\u4E2A\u8D85\u7EA7\u8282\u70B9</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//BFS  \u591A\u8D77\u70B9\u7684BFS</span>
<span class="token keyword">struct</span> <span class="token class-name">note</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> mat<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">note</span> <span class="token operator">*</span>que<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> book<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    
    
    <span class="token keyword">int</span> step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>k<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token operator">=</span>right<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> step<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>mx<span class="token operator">&gt;=</span>n<span class="token operator">||</span>my<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>my<span class="token operator">&gt;=</span>m<span class="token operator">||</span>book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span>mx<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span>my<span class="token punctuation">;</span>
                right<span class="token operator">++</span><span class="token punctuation">;</span>
                book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//\u66F4\u65B0\u4E0B\u4E00\u5C42\u961F\u5934</span>
            <span class="token punctuation">{</span>
                size <span class="token operator">=</span> right<span class="token punctuation">;</span>
                step<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">updateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> matSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> matSize<span class="token punctuation">;</span>
    m <span class="token operator">=</span> matColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> book<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">note</span> que<span class="token punctuation">[</span>n<span class="token operator">*</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>
                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                k<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>n<span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> mat<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">BFS</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span>que<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B64\u9898\u7B2C\u4E09\u89E3\uFF1A</p><p>\u201C\u52A8\u6001\u89C4\u5212(Dynamic Programming)\u7B97\u6CD5\u7684\u6838\u5FC3\u601D\u60F3\u662F\uFF1A\u5C06\u5927\u95EE\u9898\u5212\u5206\u4E3A\u5C0F\u95EE\u9898\u8FDB\u884C\u89E3\u51B3,\u4ECE\u800C\u4E00\u6B65\u6B65\u83B7\u53D6\u6700\u4F18\u89E3\u7684\u5904\u7406\u7B97\u6CD5\u201D</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// DP</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Min</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span></span></span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">updateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> matrixSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> matrixColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> matrixSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>matrixSize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>matrixSize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u5C3D\u91CF\u4E0D\u8981\u4F7F\u7528\u4E0B\u9762\u8FD9\u4E2A\u51FD\u6570\u7ED9returnColums\u8D4B\u503C\uFF0C\u4F1A\u6EA2\u51FA</span>
    <span class="token comment">//memcpy(*returnColumnSizes, matrixColSize, matrixSize * sizeof(int));</span>
    <span class="token comment">//\u63A8\u8350\u4F7F\u7528\u4E0B\u9762\u8FD9\u4E2A</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> matrixSize<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrixSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>matrixColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrixColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5DE6 \u4E0A</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrixSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrixColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token comment">// \u53F3 \u4E0B</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> matrixSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> matrixColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>matrixSize<span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>matrixColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u8150\u70C2\u7684\u6A58\u5B50-994" tabindex="-1"><a class="header-anchor" href="#\u8150\u70C2\u7684\u6A58\u5B50-994" aria-hidden="true">#</a> \u8150\u70C2\u7684\u6A58\u5B50\uFF08994\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u591A\u6E90BFS</span>
<span class="token keyword">struct</span> <span class="token class-name">orange</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">orange</span> <span class="token operator">*</span>que<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> book<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>ans<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>
    <span class="token keyword">int</span> time<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u521D\u59CB\u65F6\u95F4\u4E3A-1</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment">//\u961F\u5217size</span>
    <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u4E3A\u4E86\u4E0B\u9762\u5224\u65AD\u662F\u5426\u8FD8\u6709\u597D\u6A58\u5B50</span>
    left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    right <span class="token operator">=</span> k<span class="token punctuation">;</span>
    size <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//\u611F\u67D3</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>mx<span class="token operator">&gt;=</span>n<span class="token operator">||</span>my<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>my<span class="token operator">&gt;=</span>m<span class="token operator">||</span>book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span>mx<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span>my<span class="token punctuation">;</span>
                right<span class="token operator">++</span><span class="token punctuation">;</span>
                book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">(</span><span class="token operator">*</span>count<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//\u597D\u6A58\u5B50-1</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//\u66F4\u65B0\u4E0B\u4E00\u5C42\u961F\u5934</span>
            <span class="token punctuation">{</span>
                size <span class="token operator">=</span> right<span class="token punctuation">;</span>
                time<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">*</span>count<span class="token punctuation">)</span><span class="token operator">==</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span> <span class="token operator">=</span> time<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">orangesRotting</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>count<span class="token punctuation">;</span>
    count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    n<span class="token operator">=</span>gridSize<span class="token punctuation">;</span>
    m<span class="token operator">=</span>gridColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">orange</span> que<span class="token punctuation">[</span>n<span class="token operator">*</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> book <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u5C06\u6240\u6709\u574F\u6A58\u5B50\u5165\u961F</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                que<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>
                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                k<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token comment">//\u5982\u679C\u672C\u6765\u6CA1\u6709\u597D\u6A58\u5B50\u76F4\u63A5\u8FD4\u56DE0</span>
    <span class="token function">BFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>que<span class="token punctuation">,</span>k<span class="token punctuation">,</span>book<span class="token punctuation">,</span><span class="token operator">&amp;</span>ans<span class="token punctuation">,</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5C9B\u5C7F\u6570\u91CF-200" tabindex="-1"><a class="header-anchor" href="#\u5C9B\u5C7F\u6570\u91CF-200" aria-hidden="true">#</a> \u5C9B\u5C7F\u6570\u91CF\uFF08200\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS </span>
<span class="token comment">//\u6DF9\u6CA1\u7B97\u6CD5</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> xsize<span class="token punctuation">,</span><span class="token keyword">int</span> ysize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">&gt;=</span>xsize<span class="token operator">||</span>y<span class="token operator">&gt;=</span>ysize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mx <span class="token operator">=</span> x <span class="token operator">+</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>xsize<span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;</span>ysize<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">DFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> mx<span class="token punctuation">,</span> my<span class="token punctuation">,</span>xsize<span class="token punctuation">,</span>ysize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>gridSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>gridColSize<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>   
                <span class="token function">DFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>gridSize<span class="token punctuation">,</span><span class="token operator">*</span>gridColSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                ans <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//BFS</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">note</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> xsize<span class="token punctuation">,</span><span class="token keyword">int</span> ysize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">note</span> que<span class="token punctuation">[</span>xsize<span class="token operator">*</span>ysize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mx <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>my <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   
            <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>mx<span class="token operator">&gt;=</span>xsize<span class="token operator">||</span>my<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>my<span class="token operator">&gt;=</span>ysize<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span><span class="token comment">//\u4E00\u5B9A\u4E0D\u8981\u5199\u6210\u53CC\u7B49\u4E8E\u53F7!!!!!!!</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> mx<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> my<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>gridSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>gridColSize<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>   
                <span class="token function">BFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>gridSize<span class="token punctuation">,</span><span class="token operator">*</span>gridColSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                ans <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7701\u4EFD\u6570\u91CF-547" tabindex="-1"><a class="header-anchor" href="#\u7701\u4EFD\u6570\u91CF-547" aria-hidden="true">#</a> \u7701\u4EFD\u6570\u91CF\uFF08547\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9886\u63A5\u77E9\u9635\u7684DFS</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> isConnected<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> visited<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//\u6CE8\u610F\u8FD9\u91CC\u7684visited[j]</span>
        <span class="token punctuation">{</span>
            visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">DFS</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>j<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> isConnected<span class="token punctuation">,</span> <span class="token keyword">int</span> isConnectedSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> isConnectedColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>visited <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>isConnectedSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>isConnectedSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>   
            <span class="token function">DFS</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>i<span class="token punctuation">,</span>isConnectedSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//BFS</span>
<span class="token keyword">int</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> isConnected<span class="token punctuation">,</span> <span class="token keyword">int</span> isConnectedSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> isConnectedColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>visited <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>isConnectedSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> que<span class="token punctuation">[</span>isConnectedSize<span class="token operator">*</span>isConnectedSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>isConnectedSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>   
            que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> j <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>isConnectedSize<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>visited<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u8FDB\u5236\u77E9\u9635\u4E2D\u7684\u6700\u77ED\u8DEF\u5F84-1091" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u8FDB\u5236\u77E9\u9635\u4E2D\u7684\u6700\u77ED\u8DEF\u5F84-1091" aria-hidden="true">#</a> \u4E8C\u8FDB\u5236\u77E9\u9635\u4E2D\u7684\u6700\u77ED\u8DEF\u5F84\uFF081091\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6DF9\u6CA1 \u65E0book</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">note</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> startx<span class="token punctuation">,</span> <span class="token keyword">int</span> starty<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> tracklen<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">note</span><span class="token operator">*</span> que <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">note</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    grid<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> startx<span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> starty<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">==</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>my<span class="token operator">==</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> tracklen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>mx<span class="token operator">&gt;=</span>n<span class="token operator">||</span>my<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>my<span class="token operator">&gt;=</span>n<span class="token operator">||</span>grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span>mx<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span>my<span class="token punctuation">;</span>
                right<span class="token operator">++</span><span class="token punctuation">;</span>
                grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//\u66F4\u65B0\u4E0B\u4E00\u5C42\u961F\u5934</span>
            <span class="token punctuation">{</span>
                tracklen<span class="token operator">++</span><span class="token punctuation">;</span>
                size <span class="token operator">=</span> right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">shortestPathBinaryMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">BFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>gridSize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//Book+\u4E0D\u6539\u53D8\u539F\u503C</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">note</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> startx<span class="token punctuation">,</span> <span class="token keyword">int</span> starty<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> tracklen<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">note</span><span class="token operator">*</span> que <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">note</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> book <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    book<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> startx<span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> starty<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u5C42\u5E8F\u51FA\u961F</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u51FA\u961F</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> que<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
            <span class="token comment">//\u5165\u961F</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
                <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">==</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>my<span class="token operator">==</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> tracklen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>mx<span class="token operator">&gt;=</span>n<span class="token operator">||</span>my<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>my<span class="token operator">&gt;=</span>n<span class="token operator">||</span>book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>grid<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span>mx<span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span>my<span class="token punctuation">;</span>
                right<span class="token operator">++</span><span class="token punctuation">;</span>
                book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//\u66F4\u65B0\u4E0B\u4E00\u5C42\u961F\u5934</span>
            <span class="token punctuation">{</span>
                tracklen<span class="token operator">++</span><span class="token punctuation">;</span>
                size <span class="token operator">=</span> right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">shortestPathBinaryMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> gridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> gridColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">BFS</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>gridSize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u88AB\u56F4\u7ED5\u7684\u533A\u57DF-130" tabindex="-1"><a class="header-anchor" href="#\u88AB\u56F4\u7ED5\u7684\u533A\u57DF-130" aria-hidden="true">#</a> \u88AB\u56F4\u7ED5\u7684\u533A\u57DF\uFF08130\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">&gt;=</span>n<span class="token operator">||</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">&gt;=</span>m<span class="token operator">||</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&gt;=</span>n<span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&gt;=</span>m<span class="token operator">&amp;&amp;</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> mx<span class="token punctuation">,</span> my<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> boardSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> boardColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> boardSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token operator">*</span>boardColSize<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;O&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;X&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6240\u6709\u53EF\u80FD\u7684\u8DEF\u5F84-797" tabindex="-1"><a class="header-anchor" href="#\u6240\u6709\u53EF\u80FD\u7684\u8DEF\u5F84-797" aria-hidden="true">#</a> \u6240\u6709\u53EF\u80FD\u7684\u8DEF\u5F84\uFF08797\uFF09</h3><p><strong>\u90BB\u63A5\u8868\uFF1A\u6DF1\u5EA6\u904D\u5386</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> stkSize<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> graphColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u5224\u65AD\u8FB9\u754C\uFF0C\u904D\u5386\u5230\u5C41\u80A1\u4E86</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u6211\u8BA4\u4E3A\u96BE\u70B9\u5728\u4E8E\u63A7\u5236\u8F93\u51FA</span>
        <span class="token comment">//\u5B9E\u5219\u5C31\u662F\u5185\u5B58\u64CD\u4F5C\u4E0D\u719F\u7EC3</span>
        res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">,</span> stack<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u63A7\u5236\u8F93\u51FA\u7ED3\u6784</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stkSize<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>graphColSize<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span><span class="token operator">=</span>graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">DFS</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span>res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span>n <span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">,</span>graphColSize <span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">allPathsSourceTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> graphSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> graphColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stack<span class="token punctuation">[</span>graphSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    stack<span class="token punctuation">[</span>stkSize<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">DFS</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span>res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>graphSize<span class="token punctuation">,</span>stkSize<span class="token punctuation">,</span>graphColSize<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u8DEF\u5F84\u603B\u548C-112" tabindex="-1"><a class="header-anchor" href="#\u8DEF\u5F84\u603B\u548C-112" aria-hidden="true">#</a> \u8DEF\u5F84\u603B\u548C\uFF08112\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS+\u56DE\u6EAF</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">2001</span></span></span>
bool <span class="token function">preRoot</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// printf(&quot;%d\\n&quot;,sum);</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>target<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>target<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">hasPathSum</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>targetSum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u8DEF\u5F84\u603B\u548C-ii-113" tabindex="-1"><a class="header-anchor" href="#\u8DEF\u5F84\u603B\u548C-ii-113" aria-hidden="true">#</a> \u8DEF\u5F84\u603B\u548C II\uFF08113\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DFS+\u56DE\u6EAF</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">2001</span></span></span>
<span class="token keyword">void</span> <span class="token function">preRoot</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stackSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span>root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    stack<span class="token punctuation">[</span>stackSize<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">,</span> stack<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>target<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>returnColumnSizes<span class="token punctuation">,</span>res<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>target<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>returnColumnSizes<span class="token punctuation">,</span>res<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stackSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>MAX_SIZE<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>target<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>returnColumnSizes<span class="token punctuation">,</span>res<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5E76\u67E5\u96C6" tabindex="-1"><a class="header-anchor" href="#\u5E76\u67E5\u96C6" aria-hidden="true">#</a> \u5E76\u67E5\u96C6</h2><ol><li><p>\u5E76\u67E5\u96C6\u662F\u4E00\u79CD\u6570\u636E\u7ED3\u6784</p></li><li><p>\u5E76\u67E5\u96C6\u8FD9\u4E09\u4E2A\u5B57\uFF0C\u4E00\u4E2A\u5B57\u4EE3\u8868\u4E00\u4E2A\u610F\u601D\u3002</p></li><li><p>\u5E76\uFF08Union\uFF09\uFF0C\u4EE3\u8868\u5408\u5E76</p></li><li><p>\u67E5\uFF08Find\uFF09\uFF0C\u4EE3\u8868\u67E5\u627E</p></li><li><p>\u96C6\uFF08Set\uFF09\uFF0C\u4EE3\u8868\u8FD9\u662F\u4E00\u4E2A\u4EE5\u5B57\u5178\u4E3A\u57FA\u7840\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u5B83\u7684\u57FA\u672C\u529F\u80FD\u662F\u5408\u5E76\u96C6\u5408\u4E2D\u7684\u5143\u7D20\uFF0C\u67E5\u627E\u96C6\u5408\u4E2D\u7684\u5143\u7D20</p></li><li><p>\u5E76\u67E5\u96C6\u7684\u5178\u578B\u5E94\u7528\u662F\u6709\u5173\u8FDE\u901A\u5206\u91CF\u7684\u95EE\u9898</p></li><li><p>\u5E76\u67E5\u96C6\u89E3\u51B3\u5355\u4E2A\u95EE\u9898\uFF08\u6DFB\u52A0\uFF0C\u5408\u5E76\uFF0C\u67E5\u627E\uFF09\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u90FD\u662FO(1)O(1)</p></li><li><p>\u56E0\u6B64\uFF0C\u5E76\u67E5\u96C6\u53EF\u4EE5\u5E94\u7528\u5230\u5728\u7EBF\u7B97\u6CD5\u4E2D</p></li></ol><h3 id="\u7701\u4EFD\u6570\u91CF-547-1" tabindex="-1"><a class="header-anchor" href="#\u7701\u4EFD\u6570\u91CF-547-1" aria-hidden="true">#</a> \u7701\u4EFD\u6570\u91CF\uFF08547\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5E76\u67E5\u96C6\u505A\u6CD5\uFF0C\u4E0A\u9762\u4E00\u8282\u6709\u6DF1\u5EA6\u3001\u5E7F\u5EA6</span>
<span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> parents<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>parents<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">!=</span>index<span class="token punctuation">)</span><span class="token comment">//\u8BF4\u660E\u4E0D\u662F\u521D\u59CB\u5316\u7684\u65F6\u5019\u7684\u6839</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u8DEF\u5F84\u538B\u7F29\uFF0C\u5982\u679C\u76F4\u63A5\u8FD4\u56DE\u5C31\u6CA1\u6709\u538B\u7F29</span>
        parents<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>parents<span class="token punctuation">,</span>parents<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u50CF\u8FD9\u53E5\u5C31\u6CA1\u6709\u538B\u7F29\u8DEF\u5F84</span>
        <span class="token comment">//return Find(parents,parents[index]);</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> parents<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> parents<span class="token punctuation">,</span><span class="token keyword">int</span> index_a<span class="token punctuation">,</span><span class="token keyword">int</span> index_b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u628Aa\u7684\u6839\u6362\u6210b\u7684\u6839\uFF0C\u5C31\u5B8C\u6210\u4E86\u5408\u5E76\uFF1B</span>
    parents<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span>parents<span class="token punctuation">,</span>index_a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>parents<span class="token punctuation">,</span>index_b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> isConnected<span class="token punctuation">,</span> <span class="token keyword">int</span> isConnectedSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> isConnectedColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> cities <span class="token operator">=</span> isConnectedSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> parents<span class="token punctuation">[</span>cities<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//\u8BA9\u81EA\u5DF1\u548C\u81EA\u5DF1\u8FDE\uFF0C\u521D\u59CB\u5316</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cities<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cities<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cities<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//\u65E0\u5411\u56FE\u904D\u5386\u4E0A\u4E09\u89D2\u5373\u53EF</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//\u4E24\u4E2A\u8282\u70B9\u6709\u8FB9\u5C31\u5E76\u8D77\u6765</span>
            <span class="token punctuation">{</span>
                <span class="token function">Union</span><span class="token punctuation">(</span>parents<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cities<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//\u7EDF\u8BA1\u6839\u7684\u6570\u76EE</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u88AB\u56F4\u7ED5\u7684\u533A\u57DF-130-1" tabindex="-1"><a class="header-anchor" href="#\u88AB\u56F4\u7ED5\u7684\u533A\u57DF-130-1" aria-hidden="true">#</a> \u88AB\u56F4\u7ED5\u7684\u533A\u57DF\uFF08130\uFF09</h3><p>\u5F53\u7ED9\u7684\u77E9\u9635\u4E0D\u662F\u90BB\u63A5\u77E9\u9635\u65F6\uFF0C\u53EF\u4EE5\u901A\u8FC7<code>x*n+y</code>\u8F6C\u5316</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5E76\u67E5\u96C6\uFF0C\u4E0A\u4E00\u8282DFS\u5E38\u89C4</span>
<span class="token keyword">int</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">*</span>n<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u627Ex\u70B9\u7684\u6839\u8282\u70B9\uFF0C\u540C\u65F6\u6536\u7F29\u6570\u7684\u9AD8\u5EA6\uFF0C\u5373\uFF0C\u5C06\u4E00\u4E2A\u6811\u7684\u6240\u6709\u8282\u70B9\u90FD\u76F4\u63A5\u6302\u5728\u6839\u8282\u70B9\u4E0A</span>
<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>parents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> parents<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5C06\u8282\u70B9 p \u548C\u8282\u70B9 q \u8FDE\u901A</span>
<span class="token keyword">void</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>parents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootP <span class="token operator">==</span> rootQ<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    
    parents<span class="token punctuation">[</span>rootQ<span class="token punctuation">]</span> <span class="token operator">=</span> rootP<span class="token punctuation">;</span> <span class="token comment">// \u4E24\u4E2A\u8FDE\u901A\u5206\u91CF\u5408\u5E76\u6210\u4E00\u4E2A\u8FDE\u901A\u5206\u91CF </span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5224\u65AD\u4E24\u4E2A\u70B9\u662F\u5426\u8FDE\u901A</span>
bool <span class="token function">isConnect</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>parents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rootP <span class="token operator">==</span> rootQ<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> boardSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> boardColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> parents<span class="token punctuation">[</span><span class="token number">40001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> boardSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> boardColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dummy <span class="token operator">=</span> m <span class="token operator">*</span> n<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> dummy<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">Union</span><span class="token punctuation">(</span>i <span class="token operator">*</span> n<span class="token punctuation">,</span> dummy<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">Union</span><span class="token punctuation">(</span>i <span class="token operator">*</span> n <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dummy<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">Union</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> dummy<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token function">Union</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> j<span class="token punctuation">,</span> dummy<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> 
                <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> ii <span class="token operator">=</span> i <span class="token operator">+</span> dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> jj <span class="token operator">=</span> j <span class="token operator">+</span> dir<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">[</span>jj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span> 
                    <span class="token punctuation">{</span>
                        <span class="token function">Union</span><span class="token punctuation">(</span><span class="token function">convert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">convert</span><span class="token punctuation">(</span>ii<span class="token punctuation">,</span>jj<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isConnect</span><span class="token punctuation">(</span><span class="token function">convert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> dummy<span class="token punctuation">,</span> parents<span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;X&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9012\u5F52\u3001\u56DE\u6EAF" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u3001\u56DE\u6EAF" aria-hidden="true">#</a> \u9012\u5F52\u3001\u56DE\u6EAF</h2><p>\u5176\u5B9E\u56DE\u6EAF\u7B97\u6CD5\u548C\u6211\u4EEC\u5E38\u8BF4\u7684 DFS \u7B97\u6CD5\u975E\u5E38\u7C7B\u4F3C\uFF0C\u672C\u8D28\u4E0A\u5C31\u662F\u4E00\u79CD\u66B4\u529B\u7A77\u4E3E\u7B97\u6CD5\u3002</p><p>\u56DE\u6EAF\u7B97\u6CD5\u548C DFS \u7B97\u6CD5\u7684\u7EC6\u5FAE\u5DEE\u522B\u662F\uFF1A<strong>\u56DE\u6EAF\u7B97\u6CD5\u662F\u5728\u904D\u5386\u300C\u6811\u679D\u300D\uFF0CDFS \u7B97\u6CD5\u662F\u5728\u904D\u5386\u300C\u8282\u70B9\u300D</strong></p><p>\u56DE\u6EAF\u662FDFS\u4E2D\u7684\u4E00\u79CD\uFF0C\u533A\u522B\u5C31\u662FDFS\u5728\u8FDB\u884C\u8D70\u7684\u65F6\u5019\u4F1A\u4E3B\u52A8\u6807\u8BB0\u6240\u8D70\u8FC7\u7684\u7ED3\u70B9\uFF0C\u5E76\u4E14\u4F1A\u4FDD\u7559\u5B8C\u6574\u7684\u6811\u7ED3\u6784\uFF0C\u4F46\u662F\u56DE\u6EAF\u4F1A\u5728\u4E0D\u6EE1\u8DB3\u8981\u6C42\u7684\u524D\u63D0\u4E0B\uFF0C\u8FD8\u539F\u5168\u5C40\u53D8\u91CF\uFF0C\u56DE\u6EAF\u4E00\u822C\u4F1A\u6709\u4E00\u4E2A\u5168\u5C40\u53D8\u91CF\u3002</p><p>\u76F4\u63A5\u4E0A\u56DE\u6EAF\u7B97\u6CD5\u6846\u67B6\uFF0C\u89E3\u51B3\u4E00\u4E2A\u56DE\u6EAF\u95EE\u9898\uFF0C\u5B9E\u9645\u4E0A\u5C31\u662F\u4E00\u4E2A\u51B3\u7B56\u6811\u7684\u904D\u5386\u8FC7\u7A0B\uFF0C\u7AD9\u5728\u56DE\u6EAF\u6811\u7684\u4E00\u4E2A\u8282\u70B9\u4E0A\uFF0C\u4F60\u53EA\u9700\u8981\u601D\u8003 3 \u4E2A\u95EE\u9898\uFF1A</p><ol><li>\u8DEF\u5F84\uFF1A\u4E5F\u5C31\u662F\u5DF2\u7ECF\u505A\u51FA\u7684\u9009\u62E9\u3002</li><li>\u9009\u62E9\u5217\u8868\uFF1A\u4E5F\u5C31\u662F\u4F60\u5F53\u524D\u53EF\u4EE5\u505A\u7684\u9009\u62E9\u3002</li><li>\u7ED3\u675F\u6761\u4EF6\uFF1A\u4E5F\u5C31\u662F\u5230\u8FBE\u51B3\u7B56\u6811\u5E95\u5C42\uFF0C\u65E0\u6CD5\u518D\u505A\u9009\u62E9\u7684\u6761\u4EF6\u3002</li></ol><h3 id="\u6846\u67B6-3" tabindex="-1"><a class="header-anchor" href="#\u6846\u67B6-3" aria-hidden="true">#</a> \u6846\u67B6</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
def <span class="token function">backtrack</span><span class="token punctuation">(</span>\u8DEF\u5F84<span class="token punctuation">,</span> \u9009\u62E9\u5217\u8868<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">if</span> \u6EE1\u8DB3\u7ED3\u675F\u6761\u4EF6<span class="token operator">:</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\u8DEF\u5F84<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    
    <span class="token keyword">for</span> \u9009\u62E9 in \u9009\u62E9\u5217\u8868<span class="token operator">:</span>
        # \u505A\u9009\u62E9
        \u5C06\u8BE5\u9009\u62E9\u4ECE\u9009\u62E9\u5217\u8868\u79FB\u9664
        \u8DEF\u5F84<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\u9009\u62E9<span class="token punctuation">)</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>\u8DEF\u5F84<span class="token punctuation">,</span> \u9009\u62E9\u5217\u8868<span class="token punctuation">)</span>
        # \u64A4\u9500\u9009\u62E9
        \u8DEF\u5F84<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>\u9009\u62E9<span class="token punctuation">)</span>
        \u5C06\u8BE5\u9009\u62E9\u518D\u52A0\u5165\u9009\u62E9\u5217\u8868

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5176\u6838\u5FC3\u5C31\u662F for \u5FAA\u73AF\u91CC\u9762\u7684\u9012\u5F52\uFF0C\u5728\u9012\u5F52\u8C03\u7528\u4E4B\u524D\u300C\u505A\u9009\u62E9\u300D\uFF0C\u5728\u9012\u5F52\u8C03\u7528\u4E4B\u540E\u300C\u64A4\u9500\u9009\u62E9\u300D</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>\u53C2\u6570<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>\u7EC8\u6B62\u6761\u4EF6<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        \u5B58\u653E\u7ED3\u679C<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>\u9009\u62E9\uFF1A\u672C\u5C42\u96C6\u5408\u4E2D\u5143\u7D20\uFF08\u6811\u4E2D\u8282\u70B9\u5B69\u5B50\u7684\u6570\u91CF\u5C31\u662F\u96C6\u5408\u7684\u5927\u5C0F\uFF09<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        \u5904\u7406\u8282\u70B9<span class="token punctuation">;</span>
        <span class="token function">backtracking</span><span class="token punctuation">(</span>\u8DEF\u5F84\uFF0C\u9009\u62E9\u5217\u8868<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u9012\u5F52</span>
        \u56DE\u6EAF\uFF0C\u64A4\u9500\u5904\u7406\u7ED3\u679C
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5168\u6392\u5217-46" tabindex="-1"><a class="header-anchor" href="#\u5168\u6392\u5217-46" aria-hidden="true">#</a> \u5168\u6392\u5217\uFF0846\uFF09</h3><p><code>n</code> \u4E2A\u4E0D\u91CD\u590D\u7684\u6570\uFF0C\u5168\u6392\u5217\u5171\u6709 <code>n!</code> \u4E2A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5E26book\u8BB0\u5F55\u56DE\u6EAF</span>
<span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> path<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> book<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span>ans<span class="token punctuation">,</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token operator">==</span>m<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u8FD9\u91CC\u591A\u6B64\u4E00\u4E3E\u662F\u4E3A\u4E86\u6DF1\u62F7\u8D1D\uFF0C\u5426\u5219\u5C31\u662F\u6D45\u62F7\u8D1D</span>
        <span class="token keyword">int</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u6CE8\u610Fmemcpy\u7684\u5927\u5C0Fsizeof(type) * size</span>
        ans<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">;</span>
        <span class="token comment">//\u4E5F\u53EF\u4EE5\u8FD9\u6837\u5199</span>
        <span class="token comment">//ans[size] = malloc(sizeof(int) * m);</span>
        <span class="token comment">//memcpy(ans[size++], path, sizeof(int) * m); </span>
        <span class="token comment">//\u6CE8\u610Fmemcpy\u7684\u5927\u5C0Fsizeof(type) * size</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            path<span class="token punctuation">[</span>depth<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>path<span class="token punctuation">,</span>m<span class="token punctuation">,</span>book<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u8BBE\u7F6E\u8FD4\u56DE\u4E8C\u7EF4\u6570\u7EC4\u5927\u5C0F</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> numsSize<span class="token punctuation">;</span><span class="token comment">//\u5217</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        n <span class="token operator">=</span> n<span class="token operator">*</span>i<span class="token punctuation">;</span><span class="token comment">//\u884C</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> path<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>m<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> book <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>path<span class="token punctuation">,</span>m<span class="token punctuation">,</span>book<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4EA4\u6362\u7684\u601D\u60F3\u975E\u5E38\u5DE7\u5999\uFF0C\u95ED\u5F00\u4E86\u89E6\u53D1\u8FB9\u754C\u6761\u4EF6</span>
<span class="token comment">//\u5982\u679C\u5C06\uFF0890\uFF09\u9898\u9B54\u6539\u5219\u4F53\u4F1A\u66F4\u6DF1\uFF0C\u5982\u4E0B\u4E00\u79CD\u65B9\u6CD5</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> indexA<span class="token punctuation">,</span><span class="token keyword">int</span> indexB<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp    <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">prem</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnNums<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>offset <span class="token operator">==</span> numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        returnNums<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u56DE\u6EAF\u7B97\u6CD5\u7684\u6838\u5FC3</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> offset<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//i=offset</span>
        <span class="token punctuation">{</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i \u548C offset \u4EA4\u6362</span>
            <span class="token function">prem</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>returnNums<span class="token punctuation">,</span>offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i \u548C offset \u4EA4\u6362</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        n <span class="token operator">=</span> n<span class="token operator">*</span>i<span class="token punctuation">;</span><span class="token comment">//\u884C</span>
    <span class="token punctuation">}</span>
    size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>returnNums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token function">prem</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>returnNums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> returnNums<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//(90)\u9B54\u6539\u7248</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> indexA<span class="token punctuation">,</span><span class="token keyword">int</span> indexB<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp    <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stkSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u4E5F\u53EF\u4EE5\u4E0D\u7528\u5199\u4E0B\u9762\u8FD9\u4E2A\u7EC8\u6B62\u6761\u4EF6</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stkSize<span class="token operator">==</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stkSize<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i \u548C start \u4EA4\u6362</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u9B54\u6539\u7684\u6B64\u5904start+1,\u800C\u4E0D\u662F\u539F\u6765\u7684i+1,\u6CA1\u6709\u526A\u679D</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i \u548C start \u4EA4\u6362</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">721</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">721</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">721</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868-21" tabindex="-1"><a class="header-anchor" href="#\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868-21" aria-hidden="true">#</a> \u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868\uFF0821\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> list1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> list2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>list2<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token operator">-&gt;</span>val<span class="token operator">&lt;</span>list2<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        list1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        list2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list2<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u62C9\u94FE\u6CD5</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> list1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> list2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dummy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l1 <span class="token operator">=</span> list1<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l2 <span class="token operator">=</span> list2<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>l2<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//\u6CE8\u610F\u8FD9\u91CC\u662F\u8282\u70B9\u4E0D\u7B49\u4E8ENULL</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-&gt;</span>val<span class="token operator">&lt;</span>l2<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>
            l1 <span class="token operator">=</span> l1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> 
        <span class="token punctuation">{</span>
            p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>
            l2 <span class="token operator">=</span> l2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//\u6CE8\u610F\u8FD9\u91CC\u662F\u8282\u70B9\u4E0D\u7B49\u4E8ENULL</span>
    <span class="token punctuation">{</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//\u6CE8\u610F\u8FD9\u91CC\u662F\u8282\u70B9\u4E0D\u7B49\u4E8ENULL</span>
    <span class="token punctuation">{</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u53CD\u8F6C\u94FE\u8868-206" tabindex="-1"><a class="header-anchor" href="#\u53CD\u8F6C\u94FE\u8868-206" aria-hidden="true">#</a> \u53CD\u8F6C\u94FE\u8868\uFF08206\uFF09</h3><p>\u503C\u5F97\u4E00\u63D0\u7684\u662F\uFF0C\u9012\u5F52\u64CD\u4F5C\u94FE\u8868\u5E76\u4E0D\u9AD8\u6548\u3002\u548C\u8FED\u4EE3\u89E3\u6CD5\u76F8\u6BD4\uFF0C\u867D\u7136\u65F6\u95F4\u590D\u6742\u5EA6\u90FD\u662F O(N)\uFF0C\u4F46\u662F\u8FED\u4EE3\u89E3\u6CD5\u7684\u7A7A\u95F4\u590D\u6742\u5EA6\u662F O(1)\uFF0C\u800C\u9012\u5F52\u89E3\u6CD5\u9700\u8981\u5806\u6808\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6\u662F O(N)\u3002\u6240\u4EE5\u9012\u5F52\u64CD\u4F5C\u94FE\u8868\u53EF\u4EE5\u4F5C\u4E3A\u5BF9\u9012\u5F52\u7B97\u6CD5\u7684\u7EC3\u4E60\u6216\u8005\u62FF\u53BB\u548C\u5C0F\u4F19\u4F34\u88C5\u903C\uFF0C\u4F46\u662F\u8003\u8651\u6548\u7387\u7684\u8BDD\u8FD8\u662F\u4F7F\u7528\u8FED\u4EE3\u7B97\u6CD5\u66F4\u597D\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488\u3001\u611F\u89C9\u66F4\u50CF\u6ED1\u52A8\u7A97\u53E3</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> right <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> next <span class="token operator">=</span> right<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//\u5148\u628A\u53F3\u8FB9\u7684\u4FDD\u5B58\u4EE5\u4E0B</span>
        right<span class="token operator">-&gt;</span>next <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token comment">//\u6539\u53D8\u65B9\u5411</span>
        left <span class="token operator">=</span> right<span class="token punctuation">;</span><span class="token comment">//left++</span>
        right <span class="token operator">=</span> next<span class="token punctuation">;</span><span class="token comment">//right++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7EC4\u5408-77" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408-77" aria-hidden="true">#</a> \u7EC4\u5408\uFF0877\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u56DE\u6EAF+\u526A\u679D</span>
<span class="token keyword">int</span><span class="token operator">*</span> temp<span class="token punctuation">;</span>
<span class="token keyword">int</span> tempSize<span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans<span class="token punctuation">;</span>
<span class="token keyword">int</span> ansSize<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u526A\u679D\uFF1Atemp \u957F\u5EA6\u52A0\u4E0A\u533A\u95F4 [cur, n] \u7684\u957F\u5EA6\u5C0F\u4E8E k\uFF0C\u4E0D\u53EF\u80FD\u6784\u9020\u51FA\u957F\u5EA6\u4E3A k \u7684 temp</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tempSize <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8BB0\u5F55\u5408\u6CD5\u7684\u7B54\u6848</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tempSize <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">[</span>ansSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8003\u8651\u9009\u62E9\u5F53\u524D\u4F4D\u7F6E</span>
    temp<span class="token punctuation">[</span>tempSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u662F\u5728\u5F80\u6DF1\u4E86\u8D70</span>
    tempSize<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8003\u8651\u4E0D\u9009\u62E9\u5F53\u524D\u4F4D\u7F6E</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u662F\u5728\u5E73\u884C\u8D70</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tempSize <span class="token operator">=</span> ansSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> ansSize<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> ansSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ansSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u975E\u9012\u5F52\uFF08\u5B57\u5178\u5E8F\u6CD5\uFF09\u5B9E\u73B0\u7EC4\u5408\u578B\u679A\u4E3E(\u4E8C\u8FDB\u5236\u679A\u4E3E)\u540E\u671F\u770B</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tempSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ansSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// \u521D\u59CB\u5316</span>
    <span class="token comment">// \u5C06 temp \u4E2D [0, k - 1] \u6BCF\u4E2A\u4F4D\u7F6E i \u8BBE\u7F6E\u4E3A i + 1\uFF0C\u5373 [0, k - 1] \u5B58 [1, k]</span>
    <span class="token comment">// \u672B\u5C3E\u52A0\u4E00\u4F4D n + 1 \u4F5C\u4E3A\u54E8\u5175</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token punctuation">[</span>ansSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5BFB\u627E\u7B2C\u4E00\u4E2A temp[j] + 1 != temp[j + 1] \u7684\u4F4D\u7F6E t</span>
        <span class="token comment">// \u6211\u4EEC\u9700\u8981\u628A [0, t - 1] \u533A\u95F4\u5185\u7684\u6BCF\u4E2A\u4F4D\u7F6E\u91CD\u7F6E\u6210 [1, t]</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> temp<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// j \u662F\u7B2C\u4E00\u4E2A temp[j] + 1 != temp[j + 1] \u7684\u4F4D\u7F6E</span>
        <span class="token operator">++</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> ansSize<span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> ansSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ansSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B57\u6BCD\u5927\u5C0F\u5199\u5168\u6392\u5217-784" tabindex="-1"><a class="header-anchor" href="#\u5B57\u6BCD\u5927\u5C0F\u5199\u5168\u6392\u5217-784" aria-hidden="true">#</a> \u5B57\u6BCD\u5927\u5C0F\u5199\u5168\u6392\u5217\uFF08784\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u975E\u9012\u5F52+\u904D\u5386</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">letterCasePermutation</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> k<span class="token operator">=</span>size<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                res<span class="token punctuation">[</span>k<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>k <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    res<span class="token punctuation">[</span>k<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    res<span class="token punctuation">[</span>k<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                size<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span> returnSize <span class="token operator">=</span>size<span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52\u56DE\u6EAF</span>
<span class="token keyword">char</span> <span class="token function">changeletter</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>temp<span class="token operator">&gt;=</span><span class="token char">&#39;a&#39;</span><span class="token operator">&amp;&amp;</span>temp<span class="token operator">&lt;=</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token operator">?</span>temp<span class="token operator">-</span><span class="token number">32</span><span class="token operator">:</span>temp<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>res<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//i=index</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">changeletter</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>res<span class="token punctuation">,</span>len<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">changeletter</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">letterCasePermutation</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>res<span class="token punctuation">,</span>len<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span> returnSize <span class="token operator">=</span>size<span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B50\u96C6-78" tabindex="-1"><a class="header-anchor" href="#\u5B50\u96C6-78" aria-hidden="true">#</a> \u5B50\u96C6\uFF0878\uFF09</h3><p>\u8FD9\u9898\u76F4\u63A5\u770B\u6846\u67B6</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9012\u5F52\u52A0\u56DE\u6EAF</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stkSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    
    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stkSize<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4E5F\u53EF\u4EE5\u4E0D\u7528\u5199\u4E0B\u9762\u8FD9\u4E2A\u7EC8\u6B62\u6761\u4EF6</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">==</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u7533\u8BF72^numsSize \u8FD9\u4E48\u5927\u7684\u7A7A\u95F4</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B50\u96C6-ii-90" tabindex="-1"><a class="header-anchor" href="#\u5B50\u96C6-ii-90" aria-hidden="true">#</a> \u5B50\u96C6 II\uFF0890\uFF09</h3><p>\u540C\u4E00\u5C42\u4E0D\u53D6\u76F8\u540C\u5143\u7D20\u5373\u53EF\u5B8C\u6210\u526A\u679D</p><p>\u8FD8\u6709\u4E00\u79CD\u53BB\u91CD\uFF0CBFS+hash</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6392\u5E8F+\u6BD4\u8F83\u76F8\u90BB</span>
<span class="token comment">//DFS</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stkSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    
    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stkSize<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4E5F\u53EF\u4EE5\u4E0D\u7528\u5199\u4E0B\u9762\u8FD9\u4E2A\u7EC8\u6B62\u6761\u4EF6</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">==</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u6BD4\u4E0A\u4E00\u9898\u52A0\u4E86\u4E2A\u53BB\u91CD\uFF0C\u8FD9\u91CC\u662F\u56E0\u4E3A\u4E0D\u7528\u56DE\u5934\u6240\u4EE5\u53EF\u4EE5\u8FD9\u6837\u5199</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>numsSize<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u7533\u8BF72^numsSize \u8FD9\u4E48\u5927\u7684\u7A7A\u95F4</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4E0E\u4E0A\u4E00\u9898\u52A0\u4E86\u4E2A\u6392\u5E8F</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5168\u6392\u5217-ii-47" tabindex="-1"><a class="header-anchor" href="#\u5168\u6392\u5217-ii-47" aria-hidden="true">#</a> \u5168\u6392\u5217 II\uFF0847\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6765\u7528\u5B50\u51FD\u6570isHaveSame\u53BB\u91CD\uFF0C\u901A\u8FC7\u53CC\u6307\u9488\u53BB\u5224\u65AD\u662F\u5426\u51FA\u73B0\u4E86\u91CD\u590D\u7684\u503C</span>
bool <span class="token function">isHaveSame</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> indexleft<span class="token punctuation">,</span><span class="token keyword">int</span> indexRight<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>indexleft <span class="token operator">&lt;</span> indexRight<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexleft<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>indexRight<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span> 
        indexRight<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> indexA<span class="token punctuation">,</span><span class="token keyword">int</span> indexB<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp    <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">==</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHaveSame</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">40320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">40320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0D\u7528<code>while(i&lt;numsSize-1&amp;&amp;nums[i]==nums[i+1])i++;</code>\u7684\u539F\u56E0\u5982\u4E0B\uFF1A\u7528swap\u867D\u7136\u8282\u7701\u4E86\u4E00\u4E9B\u53C2\u6570\u3002\u4F46\u662F\u8FD9\u4E00\u9898\u5C31\u89E3\u51B3\u4E0D\u4E86\uFF0C\u6709\u91CD\u590D\u5143\u7D20\u7684\u8981\u6392\u5E8F\u526A\u679D\uFF0C\u4F46swap\u4F1A\u6253\u4E71\u987A\u5E8F\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6765\u7528\u5B50\u51FD\u6570isHaveSame\u53BB\u91CD\uFF0C\u901A\u8FC7\u53CC\u6307\u9488\u53BB\u5224\u65AD\u662F\u5426\u51FA\u73B0\u4E86\u91CD\u590D\u7684\u503C</span>
bool <span class="token function">isHaveSame</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> indexleft<span class="token punctuation">,</span><span class="token keyword">int</span> indexRight<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>indexleft <span class="token operator">&lt;</span> indexRight<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexleft<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>indexRight<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span> 
        indexRight<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> indexA<span class="token punctuation">,</span><span class="token keyword">int</span> indexB<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp    <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexA<span class="token punctuation">]</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">[</span>indexB<span class="token punctuation">]</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">==</span>numsSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u95EE\u9898\u51FA\u73B0\u5728\u4F60\u53EF\u4EE5\u5224\u65AD\u540E\u9762\u6709\u6CA1\u6709\u76F8\u540C\u503C\uFF0C\u5374\u65E0\u6CD5\u5224\u65AD\u5DF2\u7ECF\u8D70\u8FC7\u7684\uFF0C\u6839\u672C\u539F\u56E0\u662F\u987A\u5E8F\u53D8\u4E86\u4E0D\u662F\u76F8\u90BB\u5173\u7CFB\u4E86</span>
        <span class="token comment">// while(i&lt;numsSize-1&amp;&amp;nums[i]==nums[i+1])i++;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isHaveSame</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">40320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">40320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//visited+\u56DE\u6EAF</span>
<span class="token keyword">int</span><span class="token operator">*</span> visited<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> ansSize<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> numSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>ansSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> numSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>ansSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stack<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> numSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        stack<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numSize<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> ansSize<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    visited <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">*</span>returnSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7EC4\u5408\u603B\u548C-39" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408\u603B\u548C-39" aria-hidden="true">#</a> \u7EC4\u5408\u603B\u548C\uFF0839\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6392\u5E8F+\u56DE\u6EAF</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> sum<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stkSize<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stkSize<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        sum<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum<span class="token operator">-=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span>i<span class="token punctuation">,</span>res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u53EF\u4EE5\u91CD\u590D\u9009\u7684\u5173\u952E\u70B9\u5728i\uFF0C\u800C\u4E0D\u80FD\u662Fi+1</span>
        sum<span class="token operator">-=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> candidatesSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span>candidatesSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// if(candidatesSize==1)</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> candidatesSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span>  returnColumnSizes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4E0D\u6392\u5E8F\u76F4\u63A5\u56DE\u6EAF</span>
<span class="token keyword">int</span> sum<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stkSize<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stkSize<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        sum<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span>i<span class="token punctuation">,</span>res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum<span class="token operator">-=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> candidatesSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> candidatesSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span>  returnColumnSizes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7EC4\u5408\u603B\u548C-ii-40" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408\u603B\u548C-ii-40" aria-hidden="true">#</a> \u7EC4\u5408\u603B\u548C II\uFF0840\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6392\u5E8F\u53BB\u91CD</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> sum<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stkSize<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span>target<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>stkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stkSize<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
            stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            sum<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum<span class="token operator">-=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> candidatesSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>candidatesSize<span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span>candidatesSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> candidatesSize<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span>  returnColumnSizes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7535\u8BDD\u53F7\u7801\u7684\u5B57\u6BCD\u7EC4\u5408-17" tabindex="-1"><a class="header-anchor" href="#\u7535\u8BDD\u53F7\u7801\u7684\u5B57\u6BCD\u7EC4\u5408-17" aria-hidden="true">#</a> \u7535\u8BDD\u53F7\u7801\u7684\u5B57\u6BCD\u7EC4\u5408\uFF0817\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5B57\u7B26\u4E32\u56DE\u6EAF</span>
<span class="token keyword">char</span> <span class="token operator">*</span>word<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;def&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ghi&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jkl&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mno&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;pqrs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;tuv&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;wxyz&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> digits<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> stksize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stksize <span class="token operator">==</span> len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>stksize<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>stksize<span class="token punctuation">]</span> <span class="token operator">=</span> word<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>stksize<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>len<span class="token punctuation">,</span>stksize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> digits<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>digits<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//\u5982\u679C\u4E0D\u7528calloc,\u5C31\u5FC5\u987B\u518D\u5199memset</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span>returnSize<span class="token punctuation">,</span>res<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>len<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u62EC\u53F7\u751F\u6210-22" tabindex="-1"><a class="header-anchor" href="#\u62EC\u53F7\u751F\u6210-22" aria-hidden="true">#</a> \u62EC\u53F7\u751F\u6210\uFF0822\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u56DE\u6EAF</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stkSize<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>left<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>right<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>n<span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>n<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1430</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u548C\u4E0A\u9762\u533A\u522B\u5728left\u3001right\u521D\u59CB\u503C</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> stack<span class="token punctuation">,</span><span class="token keyword">int</span> stkSize<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stkSize<span class="token operator">==</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>n<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>left<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token punctuation">[</span>stkSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>n<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1430</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> stkSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>stack<span class="token punctuation">,</span>stkSize<span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5355\u8BCD\u641C\u7D22-79" tabindex="-1"><a class="header-anchor" href="#\u5355\u8BCD\u641C\u7D22-79" aria-hidden="true">#</a> \u5355\u8BCD\u641C\u7D22\uFF0879\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//visited+\u56DE\u6EAF</span>
<span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
bool <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> board<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> visited<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span>word<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">==</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mx <span class="token operator">=</span> x<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> my <span class="token operator">=</span> y<span class="token operator">+</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mx<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>my<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>my<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>visited<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bool res <span class="token operator">=</span>  <span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>word<span class="token punctuation">,</span>len<span class="token punctuation">,</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>mx<span class="token punctuation">,</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span>true<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> boardSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> boardColSize<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> visited <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>boardSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>boardSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>boardColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>boardSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>boardColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>boardSize<span class="token punctuation">,</span>boardColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>word<span class="token punctuation">,</span>len<span class="token punctuation">,</span>step<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u52A8\u6001\u89C4\u5212" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u89C4\u5212" aria-hidden="true">#</a> \u52A8\u6001\u89C4\u5212</h2><p><strong>\u660E\u786E base case -&gt; \u660E\u786E\u300C\u72B6\u6001\u300D\uFF08\u4E00\u822C\u6307n\uFF09-&gt; \u660E\u786E\u300C\u9009\u62E9\u300D -&gt; \u5B9A\u4E49 <code>dp</code> \u6570\u7EC4/\u51FD\u6570\u7684\u542B\u4E49</strong>\u3002</p><p><strong>\u96F6\u94B1\u7684\u4F8B\u5B50\uFF08322\uFF09\uFF1A</strong></p><p><strong>1\u3001\u786E\u5B9A base case</strong>\uFF0C\u8FD9\u4E2A\u5F88\u7B80\u5355\uFF0C\u663E\u7136\u76EE\u6807\u91D1\u989D <code>amount</code> \u4E3A 0 \u65F6\u7B97\u6CD5\u8FD4\u56DE 0\uFF0C\u56E0\u4E3A\u4E0D\u9700\u8981\u4EFB\u4F55\u786C\u5E01\u5C31\u5DF2\u7ECF\u51D1\u51FA\u76EE\u6807\u91D1\u989D\u4E86\u3002</p><p><strong>2\u3001\u786E\u5B9A\u300C\u72B6\u6001\u300D\uFF0C\u4E5F\u5C31\u662F\u539F\u95EE\u9898\u548C\u5B50\u95EE\u9898\u4E2D\u4F1A\u53D8\u5316\u7684\u53D8\u91CF</strong>\u3002\u7531\u4E8E\u786C\u5E01\u6570\u91CF\u65E0\u9650\uFF0C\u786C\u5E01\u7684\u9762\u989D\u4E5F\u662F\u9898\u76EE\u7ED9\u5B9A\u7684\uFF0C\u53EA\u6709\u76EE\u6807\u91D1\u989D\u4F1A\u4E0D\u65AD\u5730\u5411 base case \u9760\u8FD1\uFF0C\u6240\u4EE5\u552F\u4E00\u7684\u300C\u72B6\u6001\u300D\u5C31\u662F\u76EE\u6807\u91D1\u989D <code>amount</code>\u3002</p><p><strong>3\u3001\u786E\u5B9A\u300C\u9009\u62E9\u300D\uFF0C\u4E5F\u5C31\u662F\u5BFC\u81F4\u300C\u72B6\u6001\u300D\u4EA7\u751F\u53D8\u5316\u7684\u884C\u4E3A</strong>\u3002\u76EE\u6807\u91D1\u989D\u4E3A\u4EC0\u4E48\u53D8\u5316\u5462\uFF0C\u56E0\u4E3A\u4F60\u5728\u9009\u62E9\u786C\u5E01\uFF0C\u4F60\u6BCF\u9009\u62E9\u4E00\u679A\u786C\u5E01\uFF0C\u5C31\u76F8\u5F53\u4E8E\u51CF\u5C11\u4E86\u76EE\u6807\u91D1\u989D\u3002\u6240\u4EE5\u8BF4\u6240\u6709\u786C\u5E01\u7684\u9762\u503C\uFF0C\u5C31\u662F\u4F60\u7684\u300C\u9009\u62E9\u300D\u3002</p><p><strong>4\u3001\u660E\u786E <code>dp</code> \u51FD\u6570/\u6570\u7EC4\u7684\u5B9A\u4E49</strong>\u3002\u6211\u4EEC\u8FD9\u91CC\u8BB2\u7684\u662F\u81EA\u9876\u5411\u4E0B\u7684\u89E3\u6CD5\uFF0C\u6240\u4EE5\u4F1A\u6709\u4E00\u4E2A\u9012\u5F52\u7684 <code>dp</code> \u51FD\u6570\uFF0C\u4E00\u822C\u6765\u8BF4\u51FD\u6570\u7684\u53C2\u6570\u5C31\u662F\u72B6\u6001\u8F6C\u79FB\u4E2D\u4F1A\u53D8\u5316\u7684\u91CF\uFF0C\u4E5F\u5C31\u662F\u4E0A\u9762\u8BF4\u5230\u7684\u300C\u72B6\u6001\u300D\uFF1B\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u5C31\u662F\u9898\u76EE\u8981\u6C42\u6211\u4EEC\u8BA1\u7B97\u7684\u91CF\u3002\u5C31\u672C\u9898\u6765\u8BF4\uFF0C\u72B6\u6001\u53EA\u6709\u4E00\u4E2A\uFF0C\u5373\u300C\u76EE\u6807\u91D1\u989D\u300D\uFF0C\u9898\u76EE\u8981\u6C42\u6211\u4EEC\u8BA1\u7B97\u51D1\u51FA\u76EE\u6807\u91D1\u989D\u6240\u9700\u7684\u6700\u5C11\u786C\u5E01\u6570\u91CF\u3002</p><p><strong>\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u8FD9\u6837\u5B9A\u4E49 <code>dp</code> \u51FD\u6570\uFF1A<code>dp(n)</code> \u8868\u793A\uFF0C\u8F93\u5165\u4E00\u4E2A\u76EE\u6807\u91D1\u989D <code>n</code>\uFF0C\u8FD4\u56DE\u51D1\u51FA\u76EE\u6807\u91D1\u989D <code>n</code> \u6240\u9700\u7684\u6700\u5C11\u786C\u5E01\u6570\u91CF</strong>\u3002</p><h3 id="\u6846\u67B6-4" tabindex="-1"><a class="header-anchor" href="#\u6846\u67B6-4" aria-hidden="true">#</a> \u6846\u67B6</h3><p>\u81EA\u5E95\u5411\u4E0A\u7684\u4F18\u52BF\u662F\u2460\u53EF\u4EE5\u89C4\u907F\u8FB9\u754C\u95EE\u9898\uFF0C\u2461\u51FA\u53E3dp[0]\u5C31\u662F\u6700\u7EC8\u7B54\u6848\u3002</p><h3 id="\u722C\u697C\u68AF-70" tabindex="-1"><a class="header-anchor" href="#\u722C\u697C\u68AF-70" aria-hidden="true">#</a> \u722C\u697C\u68AF\uFF0870\uFF09</h3><p><strong>\u8FD8\u6709\u4E00\u79CD\u77E9\u9635\u5FEB\u901F\u5E42\u89E3\u6CD5</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5E26\u5907\u5FD8\u5F55\u7684DP+\u81EA\u5B9A\u5411\u4E0B\uFF08\u9012\u5F52\uFF09</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> dp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//base case</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u5E95\u5411\u4E0A\uFF08\u904D\u5386\uFF09</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>
    l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        l<span class="token operator">=</span>r<span class="token punctuation">;</span>
        r<span class="token operator">=</span>ans<span class="token punctuation">;</span>
        ans <span class="token operator">=</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6253\u5BB6\u52AB\u820D-198" tabindex="-1"><a class="header-anchor" href="#\u6253\u5BB6\u52AB\u820D-198" aria-hidden="true">#</a> \u6253\u5BB6\u52AB\u820D\uFF08198\uFF09</h3><p>\u8FB9\u754C\u6761\u4EF6\uFF1A dp[0]:\u53EA\u6709\u4E00\u95F4\u5C4B\u5B50\uFF0C\u5C31\u5077\u8BE5\u5C4B\u5B50 <code>dp[0]=nums[0];</code> dp[1]\uFF1A\u6709\u4E24\u95F4\u5C4B\u5B50,\u5077\u4E24\u95F4\u5C4B\u5B50\u4E2D\u94B1\u6570\u8F83\u591A\u7684\u5C4B\u5B50 <code>dp[1]=fmax(dp[0],dp[1]);</code></p><p>\u6559\u5B66\u4EE3\u7801\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>numsSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
         dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fmax</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7406\u89E3\u4E0B\u9762\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u9876\u5411\u4E0B dp[0]\u662F\u7B54\u6848</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> dp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&gt;=</span>numsSize<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u521D\u59CB\u5316\u4E3A-1</span>
    <span class="token keyword">return</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u5E95\u5411\u4E0A\uFF08\u904D\u5386\uFF09 dp[numSize]\u662F\u7B54\u6848</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp_i_1<span class="token punctuation">,</span>dp_i_2<span class="token punctuation">,</span>dp_i<span class="token punctuation">;</span>
    dp_i_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    dp_i_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    dp_i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp_i <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp_i_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u8FD9\u91CC\u5176\u5B9E\u662F\u5728\u628Adp_i_1,dp_i_2\u540C\u65F6\u5411\u540E\u79FB</span>
        dp_i_2<span class="token operator">=</span>dp_i_1<span class="token punctuation">;</span><span class="token comment">//\u4FDD\u5B58\u4E0A\u6B21\u4E0D\u5077\u7684\u6700\u5927\u91D1\u989D</span>
        dp_i_1<span class="token operator">=</span>dp_i<span class="token punctuation">;</span><span class="token comment">//\u4FDD\u5B58\u4E0A\u4E00\u8F6E\u904D\u5386\u6700\u5927\u91D1\u989D   </span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp_i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E09\u89D2\u5F62\u6700\u5C0F\u8DEF\u5F84\u548C-120" tabindex="-1"><a class="header-anchor" href="#\u4E09\u89D2\u5F62\u6700\u5C0F\u8DEF\u5F84\u548C-120" aria-hidden="true">#</a> \u4E09\u89D2\u5F62\u6700\u5C0F\u8DEF\u5F84\u548C\uFF08120\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u9876\u5411\u4E0B</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">tracksum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> triangle<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> triangleSize<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> dp<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> triangleColSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span>triangleSize<span class="token operator">||</span>y<span class="token operator">&gt;=</span>triangleColSize<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">666</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">tracksum</span><span class="token punctuation">(</span>triangle<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>triangleSize<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>triangleColSize<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">tracksum</span><span class="token punctuation">(</span>triangle<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>triangleSize<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>triangleColSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>triangle<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">minimumTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> triangle<span class="token punctuation">,</span> <span class="token keyword">int</span> triangleSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> triangleColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> dp<span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>triangleSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>triangleSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>triangleSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u7ED9dp\u8D4B\u521D\u59CB\u503C-666</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>triangleSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>triangleSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">666</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">tracksum</span><span class="token punctuation">(</span>triangle<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>triangleSize<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>triangleColSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u4E0B\u5411\u4E0A</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">tracksum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> triangle<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> dp<span class="token punctuation">,</span><span class="token keyword">int</span> triangleSize<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> triangleColSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// int dp[triangleSize+1][triangleSize+1];</span>
    <span class="token comment">// memset(dp,0,sizeof(dp));</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    i<span class="token operator">=</span>triangleSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> triangleSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>triangleColSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">minimumTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> triangle<span class="token punctuation">,</span> <span class="token keyword">int</span> triangleSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> triangleColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u51FD\u6570\u4F20\u6570\u7EC4\u6700\u597D\u8FD8\u662F\u52A8\u6001\u6570\u7EC4\u5427</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> dp <span class="token operator">=</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>triangleSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>triangleSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>triangleSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">tracksum</span><span class="token punctuation">(</span>triangle<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>triangleSize<span class="token punctuation">,</span>triangleColSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6253\u5BB6\u52AB\u820D-ii-213" tabindex="-1"><a class="header-anchor" href="#\u6253\u5BB6\u52AB\u820D-ii-213" aria-hidden="true">#</a> \u6253\u5BB6\u52AB\u820D II\uFF08213\uFF09</h3><p>\u5EFA\u8BAE\u770B\u6253\u5BB6\u52AB\u820D\u57FA\u7840\u7248\u672C</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u9876\u5411\u4E0B \u6253\u5BB6\u52AB\u820D\u6539</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> dp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">&gt;=</span>numsSize<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u521D\u59CB\u5316\u4E3A-1</span>
    <span class="token keyword">int</span> steal_0 <span class="token operator">=</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u521D\u59CB\u5316\u4E3A-1</span>
    <span class="token keyword">int</span> steal_1 <span class="token operator">=</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>steal_0<span class="token punctuation">,</span>steal_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u81EA\u5E95\u5411\u4E0A\uFF08\u904D\u5386\uFF09\u6253\u5BB6\u52AB\u820D\u6539</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp_i_1<span class="token punctuation">,</span>dp_i_2<span class="token punctuation">,</span>dp_i<span class="token punctuation">;</span>
    dp_i_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    dp_i_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    dp_i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp_i <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp_i_1<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp_i_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp_i_2<span class="token operator">=</span>dp_i_1<span class="token punctuation">;</span><span class="token comment">//\u4FDD\u5B58\u4E0A\u6B21\u4E0D\u5077\u7684\u6700\u5927\u91D1\u989D</span>
        dp_i_1<span class="token operator">=</span>dp_i<span class="token punctuation">;</span><span class="token comment">//\u4FDD\u5B58\u4E0A\u4E00\u8F6E\u904D\u5386\u6700\u5927\u91D1\u989D   </span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp_i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> steal_0 <span class="token operator">=</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> steal_1 <span class="token operator">=</span> <span class="token function">stealmoney</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>numsSize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>steal_0<span class="token punctuation">,</span>steal_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u8DF3\u8DC3\u6E38\u620F-55" tabindex="-1"><a class="header-anchor" href="#\u8DF3\u8DC3\u6E38\u620F-55" aria-hidden="true">#</a> \u8DF3\u8DC3\u6E38\u620F\uFF0855\uFF09</h3><p><img src="https://pic.leetcode-cn.com/1654428955-NEKwgV-C5E8DEA7-6EE9-4AC5-8875-CDDCDF22309D_1_201_a.jpeg" alt=""></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u8D2A\u5FC3</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> cover <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cover<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cover <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">,</span>cover<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cover <span class="token operator">&gt;=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>bool <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//\u8BF4\u660Edp[i]\u53EF\u8FBE</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//\u8BF4\u660E\u4E0D\u53EF\u8FBE</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u8DF3\u8DC3\u6E38\u620F-ii-45" tabindex="-1"><a class="header-anchor" href="#\u8DF3\u8DC3\u6E38\u620F-ii-45" aria-hidden="true">#</a> \u8DF3\u8DC3\u6E38\u620F II\uFF0845\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u8D2A\u5FC3</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> farthest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> jumps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        farthest <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> farthest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u53EF\u4EE5\u8DF3\u5230\u7684\u6700\u8FDC\u8DDD\u79BB</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            jumps<span class="token operator">++</span><span class="token punctuation">;</span>
            end <span class="token operator">=</span> farthest<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> jumps<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DP</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span>b<span class="token operator">:</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//dp[0]\u53EF\u8FBE</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E0D\u540C\u8DEF\u5F84-62" tabindex="-1"><a class="header-anchor" href="#\u4E0D\u540C\u8DEF\u5F84-62" aria-hidden="true">#</a> \u4E0D\u540C\u8DEF\u5F84\uFF0862\uFF09</h3><p>\u7406\u89E3\u4E3A\u6768\u8F89\u4E09\u89D2\u5F62</p><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>int uniquePaths(int m, int n){
    int dp[m][n];
    for(int i=0;i&lt;m;i++)
    {
        for(int j=0;j&lt;n;j++)
        {
            if(i==0||j==0)
            {
                dp[i][j] = 1;
            }
            else dp[i][j] = dp[i-1][j]+dp[i][j-1];
        }
    }
    return dp[m-1][n-1];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u957F\u56DE\u6587\u5B50\u4E32-5-1" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u56DE\u6587\u5B50\u4E32-5-1" aria-hidden="true">#</a> \u6700\u957F\u56DE\u6587\u5B50\u4E32\uFF085\uFF09</h3><p>\u6536\u83B7\uFF1Astrcpy\u3001strncpy</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//DP \u4E0A\u9762\u8FD8\u6709\u53CC\u6307\u9488</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> beginIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">/* \u5F53\u662F\u56DE\u6587\u4E32\u7684\u65F6\u5019\u8BB0\u5F55\u6700\u5927\u957F\u5EA6\u548C\u66F4\u65B0\u8D77\u59CB\u4F4D\u7F6E */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                maxLen <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                beginIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">char</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>maxLen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>beginIndex<span class="token operator">+</span>maxLen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>s<span class="token operator">+</span>beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// strncpy(res,s+beginIndex,maxLen);</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7B49\u5DEE\u6570\u5217\u5212\u5206-413" tabindex="-1"><a class="header-anchor" href="#\u7B49\u5DEE\u6570\u5217\u5212\u5206-413" aria-hidden="true">#</a> \u7B49\u5DEE\u6570\u5217\u5212\u5206\uFF08413\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">numberOfArithmeticSlices</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>numsSize<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span><span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            sum <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u89E3\u7801\u65B9\u6CD5-91" tabindex="-1"><a class="header-anchor" href="#\u89E3\u7801\u65B9\u6CD5-91" aria-hidden="true">#</a> \u89E3\u7801\u65B9\u6CD5\uFF0891\uFF09</h3><p>dp[i]\u521D\u503C\u4E3A00\uFF0C\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\u4E3A\uFF1A</p>`,250),fa=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"d"),n("mi",null,"p"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mo",null,"+"),n("mo",null,"="),n("mrow",null,[n("mo",{fence:"true"},"{"),n("mtable",{rowspacing:"0.36em",columnalign:"left left",columnspacing:"1em"},[n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mi",null,"d"),n("mi",null,"p"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",null,"+"),n("mn",null,"1"),n("mo",{stretchy:"false"},"]")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mtext",null,"\xA0\u5982\u679C\xA0"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mtext",null,"\u662F\u6709\u6548\u7F16\u7801")])])])]),n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mi",null,"d"),n("mi",null,"p"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",null,"+"),n("mn",null,"2"),n("mo",{stretchy:"false"},"]")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mtext",null,"\xA0\u5982\u679C\xA0"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",null,"+"),n("mn",null,"1"),n("mo",{stretchy:"false"},"]"),n("mtext",null,"\u662F\u6709\u6548\u7F16\u7801")])])])])])]),n("mrow")]),n("annotation",{encoding:"application/x-tex"},"dp[i] += \\begin{cases} dp[i + 1] & \\text{ \u5982\u679C } s[i]\u662F\u6709\u6548\u7F16\u7801 \\\\ dp[i + 2] & \\text{ \u5982\u679C } s[i]s[i+1]\u662F\u6709\u6548\u7F16\u7801 \\end{cases}{} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"]"),n("span",{class:"mord"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"3em","vertical-align":"-1.25em"}}),n("span",{class:"minner"},[n("span",{class:"mopen delimcenter",style:{top:"0em"}},[n("span",{class:"delimsizing size4"},"{")]),n("span",{class:"mord"},[n("span",{class:"mtable"},[n("span",{class:"col-align-l"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.69em"}},[n("span",{style:{top:"-3.69em"}},[n("span",{class:"pstrut",style:{height:"3.008em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},"]")])]),n("span",{style:{top:"-2.25em"}},[n("span",{class:"pstrut",style:{height:"3.008em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mclose"},"]")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.19em"}},[n("span")])])])]),n("span",{class:"arraycolsep",style:{width:"1em"}}),n("span",{class:"col-align-l"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.69em"}},[n("span",{style:{top:"-3.69em"}},[n("span",{class:"pstrut",style:{height:"3.008em"}}),n("span",{class:"mord"},[n("span",{class:"mord text"},[n("span",{class:"mord"},"\xA0"),n("span",{class:"mord cjk_fallback"},"\u5982\u679C"),n("span",{class:"mord"},"\xA0")]),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"]"),n("span",{class:"mord cjk_fallback"},"\u662F\u6709\u6548\u7F16\u7801")])]),n("span",{style:{top:"-2.25em"}},[n("span",{class:"pstrut",style:{height:"3.008em"}}),n("span",{class:"mord"},[n("span",{class:"mord text"},[n("span",{class:"mord"},"\xA0"),n("span",{class:"mord cjk_fallback"},"\u5982\u679C"),n("span",{class:"mord"},"\xA0")]),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"]"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},"]"),n("span",{class:"mord cjk_fallback"},"\u662F\u6709\u6548\u7F16\u7801")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.19em"}},[n("span")])])])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"})])])])])],-1),ha=o(`<p>\u4E0A\u8FF0\u65B9\u7A0B\u610F\u601D\u4E3A\uFF1A</p><ul><li>\u5982\u679C\u5F53\u524D\u5B57\u7B26s[i]s[i]\u662F\u6709\u6548\u7F16\u7801\uFF0C\u201C\u4ECEs[i]s[i]\u5230\u5B57\u7B26\u4E32\u672B\u5C3E\u201D\u7684\u5B57\u7B26\u4E32\u5C31\u80FD\u89E3\u7801\u4E3A\uFF1A\u201Cs[i] + s[i + 1]\u5230\u672B\u5C3Es[i]+s[i+1]\u5230\u672B\u5C3E\u201D</li><li>\u5982\u679C\u5F53\u524D\u5B57\u7B26\u53CA\u5176\u4E0B\u4E00\u4E2A\u5B57\u7B26s[i]s[i+1]s[i]s[i+1]\u662F\u6709\u6548\u7F16\u7801\uFF0C\u201C\u4ECEs[i]s[i]\u5230\u5B57\u7B26\u4E32\u672B\u5C3E\u201D\u7684\u5B57\u7B26\u4E32\u5C31\u80FD\u89E3\u7801\u4E3A\uFF1A\u201Cs[i]s[i+1] + s[i + 2]\u5230\u672B\u5C3Es[i]s[i+1]+s[i+2]\u5230\u672B\u5C3E\u201D \u6700\u7EC8dp[0]dp[0]\u5373\u4E3A\u7B54\u6848\uFF08\u4ECE\u4E0B\u680700\u5230\u672B\u5C3E\u7684\u5B57\u7B26\u4E32 \u7684\u89E3\u7801\u65B9\u5F0F\uFF09</li><li>\u76F8\u4F3C\uFF1A\u5251\u6307 Offer 10- II. \u9752\u86D9\u8DF3\u53F0\u9636\u95EE\u9898</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;0&#39;</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5355\u8BCD\u62C6\u5206-139" tabindex="-1"><a class="header-anchor" href="#\u5355\u8BCD\u62C6\u5206-139" aria-hidden="true">#</a> \u5355\u8BCD\u62C6\u5206\uFF08139\uFF09</h3><p>\u8FD9\u9898\u8FD8\u80FD\u7528\u56DE\u6EAF\uFF0C\u53D8\u6210\u5B57\u5178\u7684\u5168\u6392\u5217\uFF08\u53EF\u91CD\u590D\uFF09</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
bool <span class="token function">wordBreak</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> wordDict<span class="token punctuation">,</span> <span class="token keyword">int</span> wordDictSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> s_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>s_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>wordDictSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> w_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>wordDict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">-</span>w_len<span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;====%d\\n&quot;</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;++++%d\\n&quot;</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>s<span class="token operator">+</span>k<span class="token punctuation">,</span>wordDict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>w_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//dp[k]\u662F\u5728\u68C0\u6D4B\u4E0A\u4E2A\u5355\u8BCDdp\u662F\u5426\u4E3A1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>s_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217-300" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217-300" aria-hidden="true">#</a> \u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\uFF08300\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp \u6CE8\u610F\u662F\u6700\u957F\u5B50\u5E8F\u5217</span>
<span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> max_length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        max_length <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>max_length<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max_length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570-673" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570-673" aria-hidden="true">#</a> \u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570\uFF08673\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">findNumberOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> paths <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u81F3\u5C11\u957F\u5EA6\u4E3A1,\u81F3\u5C11\u4E00\u79CD\u8DEF\u5F84</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//\u5F53\u6211\u4EEC\u73B0\u5728\u7684\u957F\u5EA6\u6BD4\u539F\u6765\u957F\u5EA6+1\u5C0F\u7684\u65F6\u5019 \u66FF\u6362\u5F53\u524D\u957F\u5EA6 \u5E76\u8BB0\u5F55\u5F53\u524D\u957F\u5EA6\u6709\u51E0\u79CD\u8DEF\u5F84</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                    paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> paths<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//\u5F53\u91CD\u590D\u51FA\u73B0\u5F53\u524D\u957F\u5EA6\u65F6 \u6211\u4EEC\u53EA\u9700\u8981\u5F80\u4E0A\u9762\u53E0\u52A0\u8DEF\u5F84\u6570\u5373\u53EF</span>
                <span class="token punctuation">{</span>
                    paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>paths<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>max_length<span class="token punctuation">)</span><span class="token comment">//\u5F53\u5927\u4E8E\u76EE\u524D\u73B0\u6709\u6700\u5927\u81EA\u5E8F\u5217\u4E2A\u6570\u65F6 \u66FF\u6362\u5E76\u4E14\u8BB0\u5F55</span>
        <span class="token punctuation">{</span>
            max_length <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>max_length<span class="token punctuation">)</span><span class="token comment">//\u5F53\u91CD\u590D\u51FA\u73B0\u6700\u5927\u6700\u5927\u81EA\u5E8F\u5217\u957F\u5EA6\u65F6 \u53E0\u52A0\u957F\u5EA6\u5373\u53EF</span>
        <span class="token punctuation">{</span>
            ret <span class="token operator">+=</span> paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u957F\u516C\u5171\u5B50\u5E8F\u5217-1143" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u516C\u5171\u5B50\u5E8F\u5217-1143" aria-hidden="true">#</a> \u6700\u957F\u516C\u5171\u5B50\u5E8F\u5217\uFF081143\uFF09</h3><p><img src="https://pic.leetcode-cn.com/1617411822-KhEKGw-image.png" alt=""></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> text1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> text2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len_1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len_2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>len_1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len_2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len_1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len_2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>text1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len_1<span class="token punctuation">]</span><span class="token punctuation">[</span>len_2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E24\u4E2A\u5B57\u7B26\u4E32\u7684\u5220\u9664\u64CD\u4F5C-583" tabindex="-1"><a class="header-anchor" href="#\u4E24\u4E2A\u5B57\u7B26\u4E32\u7684\u5220\u9664\u64CD\u4F5C-583" aria-hidden="true">#</a> \u4E24\u4E2A\u5B57\u7B26\u4E32\u7684\u5220\u9664\u64CD\u4F5C\uFF08583\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5C06\u95EE\u9898\u8F6C\u5316\u4E3A\u6C42\u6700\u957F\u516C\u5171\u5B50\u5E8F\u5217\uFF0C\u7136\u540E\u4F5C\u5DEE\u5373\u53EF</span>
<span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> text1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> text2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len_1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len_2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>len_1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len_2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len_1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len_2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>text1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len_1<span class="token punctuation">]</span><span class="token punctuation">[</span>len_2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> word1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len_1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len_2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_subseq <span class="token operator">=</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>word1<span class="token punctuation">,</span> word2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> len_1<span class="token operator">-</span>max_subseq<span class="token operator">+</span>len_2<span class="token operator">-</span>max_subseq<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dp[i][j]</code> \u4EE3\u8868 <code>word1</code> \u5230<code>i</code>\u4F4D\u7F6E\u8F6C\u6362\u6210 <code>word2</code> \u5230<code>j</code>\u4F4D\u7F6E\u9700\u8981\u6700\u5C11\u6B65\u6570\uFF0C\u6240\u4EE5\uFF0C</p><p>\u5F53 <code>word1[i] == word2[j]</code>\uFF0C<code>dp[i][j] = dp[i-1][j-1]</code>\uFF1B</p><p>\u5F53 <code>word1[i] != word2[j]</code>\uFF0C<code>dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1</code></p><p>\u5176\u4E2D\uFF0C<code>dp[i-1][j-1]</code>\u8868\u793A\u66FF\u6362\u64CD\u4F5C\uFF0C<code>dp[i-1][j]</code> \u8868\u793A\u5220\u9664\u64CD\u4F5C\uFF0C<code>dp[i][j-1]</code>\u8868\u793A\u63D2\u5165\u64CD\u4F5C\u3002</p><p>\u6CE8\u610F\uFF0C\u9488\u5BF9\u7B2C\u4E00\u884C\uFF0C\u7B2C\u4E00\u5217\u8981\u5355\u72EC\u8003\u8651\uFF0C\u6211\u4EEC\u5F15\u5165\u4E0B\u56FE\u6240\u793A\uFF1A</p><p><img src="https://pic.leetcode-cn.com/76574ab7ff2877d63b80a2d4f8496fab3c441065552edc562f62d5809e75e97e-Snipaste_2019-05-29_15-28-02.png" alt=""></p><p>\u7B2C\u4E00\u884C\uFF0C\u662F <code>word1</code> \u4E3A\u7A7A\u53D8\u6210 <code>word2</code> \u6700\u5C11\u6B65\u6570\uFF0C\u5C31\u662F\u63D2\u5165\u64CD\u4F5C</p><p>\u7B2C\u4E00\u5217\uFF0C\u662F <code>word2</code> \u4E3A\u7A7A\uFF0C\u9700\u8981\u7684\u6700\u5C11\u6B65\u6570\uFF0C\u5C31\u662F\u5220\u9664\u64CD\u4F5C</p><p>\u5BF9\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\u7684\u7406\u89E3\uFF1A</p><ol><li>\u5F53<code>word1[i]==word2[j]</code>\u65F6\uFF0C\u7531\u4E8E\u904D\u5386\u5230\u4E86<code>i</code>\u548C<code>j</code>\uFF0C\u8BF4\u660E<code>word1</code>\u7684<code>0~i-1</code>\u548C<code>word2</code>\u7684<code>0~j-1</code>\u7684\u5339\u914D\u7ED3\u679C\u5DF2\u7ECF\u751F\u6210,\u7531\u4E8E\u5F53\u524D\u4E24\u4E2A\u5B57\u7B26\u76F8\u540C\uFF0C\u56E0\u6B64\u65E0\u9700\u505A\u4EFB\u4F55\u64CD\u4F5C,<code>dp[i][j]=dp[i-1][j-1]</code></li><li>\u5F53<code>word1[i]!=word2[j]</code>\u65F6\uFF0C\u53EF\u4EE5\u8FDB\u884C\u7684\u64CD\u4F5C\u67093\u4E2A\uFF1A <ol><li>\u66FF\u6362\u64CD\u4F5C\uFF1A\u53EF\u80FD<code>word1</code>\u7684<code>0~i-1</code>\u4F4D\u7F6E\u4E0E<code>word2</code>\u7684<code>0~j-1</code>\u4F4D\u7F6E\u7684\u5B57\u7B26\u90FD\u76F8\u540C\uFF0C\u53EA\u662F\u5F53\u524D\u4F4D\u7F6E\u7684\u5B57\u7B26\u4E0D\u5339\u914D\uFF0C\u8FDB\u884C\u66FF\u6362\u64CD\u4F5C\u540E\u4E24\u8005\u53D8\u5F97\u76F8\u540C\uFF0C\u6240\u4EE5\u6B64\u65F6<code>dp[i][j]=dp[i-1][j-1]+1</code>(\u8FD9\u4E2A\u52A01\u4EE3\u8868\u6267\u884C\u66FF\u6362\u64CD\u4F5C)</li><li>\u5220\u9664\u64CD\u4F5C\uFF1A\u82E5\u6B64\u65F6<code>word1</code>\u7684<code>0~i-1</code>\u4F4D\u7F6E\u4E0E<code>word2</code>\u7684<code>0~j</code>\u4F4D\u7F6E\u5DF2\u7ECF\u5339\u914D\u4E86\uFF0C\u6B64\u65F6\u591A\u51FA\u4E86<code>word1</code>\u7684i\u4F4D\u7F6E\u5B57\u7B26\uFF0C\u5E94\u628A\u5B83\u5220\u9664\u6389\uFF0C\u624D\u80FD\u4F7F\u6B64\u65F6<code>word1</code>\u7684<code>0~i</code>(\u8FD9\u4E2Ai\u662F\u6267\u884C\u4E86\u5220\u9664\u64CD\u4F5C\u540E\u65B0\u7684i)\u548C<code>word2</code>\u7684<code>0~j</code>\u4F4D\u7F6E\u5339\u914D\uFF0C\u56E0\u6B64\u6B64\u65F6<code>dp[i][j]=dp[i-1][j]+1</code>(\u8FD9\u4E2A\u52A01\u4EE3\u8868\u6267\u884C\u5220\u9664\u64CD\u4F5C)</li><li>\u63D2\u5165\u64CD\u4F5C\uFF1A\u82E5\u6B64\u65F6<code>word1</code>\u7684<code>0~i</code>\u4F4D\u7F6E\u53EA\u662F\u548C<code>word2</code>\u7684<code>0~j-1</code>\u4F4D\u7F6E\u5339\u914D\uFF0C\u6B64\u65F6\u53EA\u9700\u8981\u5728\u539F\u6765\u7684<code>i</code>\u4F4D\u7F6E\u540E\u9762\u63D2\u5165\u4E00\u4E2A\u548C<code>word2</code>\u7684j\u4F4D\u7F6E\u76F8\u540C\u7684\u5B57\u7B26\u4F7F\u5F97\u6B64\u65F6\u7684<code>word1</code>\u7684<code>0~i</code>(\u8FD9\u4E2A<code>i</code>\u662F\u6267\u884C\u4E86\u63D2\u5165\u64CD\u4F5C\u540E\u65B0\u7684<code>i</code>)\u548C<code>word2</code>\u7684<code>0~j</code>\u5339\u914D\u5F97\u4E0A\uFF0C\u6240\u4EE5\u6B64\u65F6<code>dp[i][j]=dp[i][j-1]+1</code>(\u8FD9\u4E2A\u52A01\u4EE3\u8868\u6267\u884C\u63D2\u5165\u64CD\u4F5C)</li><li>\u7531\u4E8E\u9898\u76EE\u6240\u8981\u6C42\u7684\u662F\u8981\u6700\u5C11\u7684\u64CD\u4F5C\u6570\uFF1A\u6240\u4EE5\u5F53<code>word1[i] != word2[j]</code>\u65F6\uFF0C\u9700\u8981\u5728\u8FD9\u4E09\u4E2A\u64CD\u4F5C\u4E2D\u9009\u53D6\u4E00\u4E2A\u6700\u5C0F\u7684\u503C\u8D4B\u683C\u5F53\u524D\u7684<code>dp[i][j]</code></li></ol></li><li>\u603B\u7ED3\uFF1A\u72B6\u6001\u65B9\u7A0B\u4E3A\uFF1A</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>
      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">else</span><span class="token operator">:</span>
       <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4EE3\u7801\u4E2D<code>word1.charAt(i-1)==word2.charAt(j-1)</code>\u7684\u539F\u56E0\u662F\uFF1A\u521D\u59CB\u5316<code>DP Table</code>\u65F6<code>dp[i][0]</code>\u548C<code>dp[0][j]</code>\u5DF2\u7ECF\u586B\u5199\u5B8C\u6210,\u6240\u4EE5\u63A5\u4E0B\u6765\u586B\u8868\u9700\u8981\u4ECE1\u5F00\u59CB\uFF0C\u4F46\u662F\u5B57\u7B26\u7684\u6BD4\u8F83\u9700\u8981\u4ECE0\u5F00\u59CB\uFF0C\u56E0\u6B64\u624D\u8FD9\u6837\u5B50\u5199\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> word1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len_1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len_2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>len_1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len_2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u521D\u59CB\u5316\u7B2C\u4E00\u884C\u3001\u7B2C\u4E00\u5217</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len_1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len_2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len_1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len_2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>word2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">fmin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len_1<span class="token punctuation">]</span><span class="token punctuation">[</span>len_2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u96F6\u94B1\u5151\u6362-322" tabindex="-1"><a class="header-anchor" href="#\u96F6\u94B1\u5151\u6362-322" aria-hidden="true">#</a> \u96F6\u94B1\u5151\u6362\uFF08322\uFF09</h3><p><strong>0-1\u80CC\u5305</strong>\uFF1A\u5982\u679C\u9650\u5B9A\u6BCF\u4EF6\u7269\u54C1\u6700\u591A\u53EA\u80FD\u9009\u53D61\u6B21\uFF08\u53730\u62161\u6B21\uFF09\uFF0C\u5219\u95EE\u9898\u79F0\u4E3A<code>0-1\u80CC\u5305\u95EE\u9898</code>\u3002</p><p><strong>\u5B8C\u5168\u80CC\u5305</strong>\uFF1A\u5982\u679C\u6BCF\u4EF6\u7269\u54C1\u6700\u591A\u53EF\u4EE5\u9009\u53D6\u65E0\u9650\u6B21\uFF0C\u5219\u95EE\u9898\u79F0\u4E3A<code>\u5B8C\u5168\u80CC\u5305\u95EE\u9898</code>\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> coinsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>coinsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>INT_MAX<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token operator">==</span>INT_MAX<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6574\u6570\u62C6\u5206-343" tabindex="-1"><a class="header-anchor" href="#\u6574\u6570\u62C6\u5206-343" aria-hidden="true">#</a> \u6574\u6570\u62C6\u5206\uFF08343\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_multi<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        max_multi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u6BD4\u8F83\uFF1A1. j*(i-j)\u5206\u6210\u4E24\u4E2A</span>
            <span class="token comment">//2. j*dp[i-j]\u7EE7\u7EED\u5F80\u4E0B\u5206</span>
            max_multi <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>max_multi<span class="token punctuation">,</span><span class="token function">fmax</span><span class="token punctuation">(</span>j<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max_multi<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6CD52\uFF1A</p>`,35),ga=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"d"),n("mi",null,"p"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mo",null,"="),n("mi",null,"m"),n("mi",null,"a"),n("mi",null,"x"),n("mo",{stretchy:"false"},"("),n("mn",null,"2"),n("mo",null,"\xD7"),n("mo",{stretchy:"false"},"("),n("mi",null,"i"),n("mo",null,"\u2212"),n("mn",null,"2"),n("mo",{stretchy:"false"},")"),n("mo",{separator:"true"},","),n("mn",null,"2"),n("mo",null,"\xD7"),n("mi",null,"d"),n("mi",null,"p"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",null,"\u2212"),n("mn",null,"2"),n("mo",{stretchy:"false"},"]"),n("mo",{separator:"true"},","),n("mn",null,"3"),n("mo",null,"\xD7"),n("mo",{stretchy:"false"},"("),n("mi",null,"i"),n("mo",null,"\u2212"),n("mn",null,"3"),n("mo",{stretchy:"false"},")"),n("mo",{separator:"true"},","),n("mn",null,"3"),n("mo",null,"\xD7"),n("mi",null,"d"),n("mi",null,"p"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",null,"\u2212"),n("mn",null,"3"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"dp[i]=max(2\xD7(i\u22122),2\xD7dp[i\u22122],3\xD7(i\u22123),3\xD7dp[i\u22123]) ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ma"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\xD7"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mclose"},")"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\xD7"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mclose"},"]"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\xD7"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mclose"},")"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\xD7"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mclose"},"])")])])])])],-1),xa=o(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u6570\u5B66+dp</span>
<span class="token keyword">int</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u4E00\u5C42\u5FAA\u73AF</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fmax</span><span class="token punctuation">(</span><span class="token function">fmax</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fmax</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u5927\u5B50\u6570\u7EC4\u548C-53" tabindex="-1"><a class="header-anchor" href="#\u6700\u5927\u5B50\u6570\u7EC4\u548C-53" aria-hidden="true">#</a> \u6700\u5927\u5B50\u6570\u7EC4\u548C\uFF0853\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> maxsubsum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> maxsubsum<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>pre<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        maxsubsum <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>maxsubsum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maxsubsum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F4D\u8FD0\u7B97" tabindex="-1"><a class="header-anchor" href="#\u4F4D\u8FD0\u7B97" aria-hidden="true">#</a> \u4F4D\u8FD0\u7B97</h2><h3 id="\u57FA\u672C\u64CD\u4F5C" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u64CD\u4F5C" aria-hidden="true">#</a> \u57FA\u672C\u64CD\u4F5C</h3><p>&amp;\uFF1A\u67090\u4E3A0\uFF0C\u51681\u4E3A1</p><p>|\uFF1A\u67091\u4E3A1\uFF0C\u51680\u52190</p><p>^\uFF1A\u76F8\u540C\u4E3A0\uFF0C\u4E0D\u540C\u4E3A1</p><h4 id="ascii-\u64CD\u4F5C" tabindex="-1"><a class="header-anchor" href="#ascii-\u64CD\u4F5C" aria-hidden="true">#</a> ASCII \u64CD\u4F5C</h4><p><strong>\u5207\u5C0F\u5199</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
<span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5207\u5927\u5199</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span> <span class="token operator">&amp;</span> <span class="token char">&#39;_&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span>
<span class="token punctuation">(</span><span class="token char">&#39;B&#39;</span> <span class="token operator">&amp;</span> <span class="token char">&#39;_&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5927\u5C0F\u5199\u4E92\u6362</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token punctuation">(</span><span class="token char">&#39;d&#39;</span> <span class="token operator">^</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span>
<span class="token punctuation">(</span><span class="token char">&#39;D&#39;</span> <span class="token operator">^</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">&#39;d&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5224\u65AD\u4E24\u4E2A\u6570\u662F\u5426\u5F02\u53F7</strong></p><p>\u8FD9\u4E2A\u6280\u5DE7\u8FD8\u662F\u5F88\u5B9E\u7528\u7684\uFF0C\u5229\u7528\u7684\u662F\u8865\u7801\u7F16\u7801\u7684\u7B26\u53F7\u4F4D\u3002\u5982\u679C\u4E0D\u7528\u4F4D\u8FD0\u7B97\u6765\u5224\u65AD\u662F\u5426\u5F02\u53F7\uFF0C\u9700\u8981\u4F7F\u7528 if else \u5206\u652F\uFF0C\u8FD8\u633A\u9EBB\u70E6\u7684\u3002\u8BFB\u8005\u53EF\u80FD\u60F3\u5229\u7528\u4E58\u79EF\u6216\u8005\u5546\u6765\u5224\u65AD\u4E24\u4E2A\u6570\u662F\u5426\u5F02\u53F7\uFF0C\u4F46\u662F\u8FD9\u79CD\u5904\u7406\u65B9\u5F0F\u53EF\u80FD\u9020\u6210\u6EA2\u51FA\uFF0C\u4ECE\u800C\u51FA\u73B0\u9519\u8BEF\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
boolean f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
boolean f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4E0D\u7528\u4E34\u65F6\u53D8\u91CF\u4EA4\u6362\u4E24\u4E2A\u6570</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
a <span class="token operator">^=</span> b<span class="token punctuation">;</span>
b <span class="token operator">^=</span> a<span class="token punctuation">;</span>
a <span class="token operator">^=</span> b<span class="token punctuation">;</span>
<span class="token comment">// \u73B0\u5728 a = 2, b = 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u52A0\u4E00</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
n <span class="token operator">=</span> <span class="token operator">-</span><span class="token operator">~</span>n<span class="token punctuation">;</span>
<span class="token comment">// \u73B0\u5728 n = 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u51CF\u4E00</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
n <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">-</span>n<span class="token punctuation">;</span>
<span class="token comment">// \u73B0\u5728 n = 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="n-n-1-\u7684\u8FD0\u7528" tabindex="-1"><a class="header-anchor" href="#n-n-1-\u7684\u8FD0\u7528" aria-hidden="true">#</a> <code>n &amp; (n-1)</code> \u7684\u8FD0\u7528</h4><p><strong><code>n &amp; (n-1)</code> \u8FD9\u4E2A\u64CD\u4F5C\u662F\u7B97\u6CD5\u4E2D\u5E38\u89C1\u7684\uFF0C\u4F5C\u7528\u662F\u6D88\u9664\u6570\u5B57 <code>n</code> \u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E2D\u7684\u6700\u540E\u4E00\u4E2A 1</strong>\u3002</p><h4 id="a-a-0-\u7684\u8FD0\u7528" tabindex="-1"><a class="header-anchor" href="#a-a-0-\u7684\u8FD0\u7528" aria-hidden="true">#</a> <code>a ^ a = 0</code> \u7684\u8FD0\u7528</h4><p>\u4E00\u4E2A\u6570\u548C\u5B83\u672C\u8EAB\u505A\u5F02\u6216\u8FD0\u7B97\u7ED3\u679C\u4E3A 0\uFF0C\u5373 <code>a ^ a = 0</code>\uFF1B\u4E00\u4E2A\u6570\u548C 0 \u505A\u5F02\u6216\u8FD0\u7B97\u7684\u7ED3\u679C\u4E3A\u5B83\u672C\u8EAB\uFF0C\u5373 <code>a ^ 0 = a</code>\u3002</p><h4 id="\u5F02\u62161\u7684\u8FD0\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F02\u62161\u7684\u8FD0\u7528" aria-hidden="true">#</a> \u5F02\u62161\u7684\u8FD0\u7528</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>\u6267\u884C\u5B8C\u6210\uFF0C\u8017\u65F6\uFF1A<span class="token number">0</span> ms
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> 
<span class="token number">0</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">11</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u662F\u4E00\u4E2A<code>\u5076\u6570^1</code>,\u90A3\u4E48\u7B54\u6848\u662F<code>\u5076\u6570+1</code>.\u5982\u679C\u662F\u4E00\u4E2A<code>\u5947\u6570^1</code>,\u90A3\u4E48\u7B54\u6848\u662F<code>\u5947\u6570-1</code></p><h3 id="_2-\u7684\u5E42-231" tabindex="-1"><a class="header-anchor" href="#_2-\u7684\u5E42-231" aria-hidden="true">#</a> 2 \u7684\u5E42\uFF08231\uFF09</h3><p>2\u7684\u5E42\u53EA\u6709\u4E00\u4E2A1</p><p><code>n = 1000</code></p><p><code>n-1 = 0111</code></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//(n &amp; (n - 1))</span>
bool <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token comment">//\u8BB0\u5F97\u52A0\u62EC\u53F7(n &amp; (n - 1))</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>n &amp; (-n)</code></p><p>\u5176\u4E2D -n \u662F n \u7684\u76F8\u53CD\u6570\uFF0C\u662F\u4E00\u4E2A\u8D1F\u6570\u3002\u8BE5\u4F4D\u8FD0\u7B97\u6280\u5DE7\u53EF\u4EE5\u76F4\u63A5\u83B7\u53D6 n \u4E8C\u8FDB\u5236\u8868\u793A\u7684\u6700\u4F4E\u4F4D\u7684 1\u3002</p><p>\u7531\u4E8E\u8D1F\u6570\u662F\u6309\u7167\u8865\u7801\u89C4\u5219\u5728\u8BA1\u7B97\u673A\u4E2D\u5B58\u50A8\u7684\uFF0C-n \u7684\u4E8C\u8FDB\u5236\u8868\u793A\u4E3A n \u7684\u4E8C\u8FDB\u5236\u8868\u793A\u7684\u6BCF\u4E00\u4F4D\u53D6\u53CD\u518D\u52A0\u4E0A 1</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//(n &amp; (-n))</span>
bool <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token comment">//\u8BB0\u5F97\u52A0\u62EC\u53F7(n &amp; (n - 1))</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4F4D1\u7684\u4E2A\u6570-191" tabindex="-1"><a class="header-anchor" href="#\u4F4D1\u7684\u4E2A\u6570-191" aria-hidden="true">#</a> \u4F4D1\u7684\u4E2A\u6570\uFF08191\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//(n&amp;(n-1))</span>
<span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        n<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u9010\u4F4D\u5224\u65AD</span>
<span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        count <span class="token operator">+=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(n &amp; 1)\u5728\u9010\u4F4D\u5224\u65AD\u662F\u5426\u4E3A1</span>
        n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u98A0\u5012\u4E8C\u8FDB\u5236\u4F4D-190" tabindex="-1"><a class="header-anchor" href="#\u98A0\u5012\u4E8C\u8FDB\u5236\u4F4D-190" aria-hidden="true">#</a> \u98A0\u5012\u4E8C\u8FDB\u5236\u4F4D\uFF08190\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token class-name">uint32_t</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> rev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rev <span class="token operator">|=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//|\u52A0</span>
        n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">uint32_t</span> M1 <span class="token operator">=</span> <span class="token number">0x55555555</span><span class="token punctuation">;</span>  <span class="token comment">// 01010101010101010101010101010101</span>
<span class="token keyword">const</span> <span class="token class-name">uint32_t</span> M2 <span class="token operator">=</span> <span class="token number">0x33333333</span><span class="token punctuation">;</span>  <span class="token comment">// 00110011001100110011001100110011</span>
<span class="token keyword">const</span> <span class="token class-name">uint32_t</span> M4 <span class="token operator">=</span> <span class="token number">0x0f0f0f0f</span><span class="token punctuation">;</span>  <span class="token comment">// 00001111000011110000111100001111</span>
<span class="token keyword">const</span> <span class="token class-name">uint32_t</span> M8 <span class="token operator">=</span> <span class="token number">0x00ff00ff</span><span class="token punctuation">;</span>  <span class="token comment">// 00000000111111110000000011111111</span>

<span class="token class-name">uint32_t</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//n &gt;&gt; 1 &amp; M1\u76F8\u5F53\u4E8E\u53D6\u51FA\u6240\u6709\u5947\u6570\u4F4D\u5E76\u79FB\u5230\u5076\u6570\u4F4D\u7F6E</span>
    <span class="token comment">//(n &amp; M1) &lt;&lt; 1\u53D6\u51FA\u6240\u6709\u5076\u6570\u4F4D\u79FB\u5230\u57FA\u7840\u4F4D\u7F6E</span>
    n <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;</span> M1 <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> M1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//\u4E0B\u65B9\u540C\u7406</span>
    n <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">2</span> <span class="token operator">&amp;</span> M2 <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> M2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">4</span> <span class="token operator">&amp;</span> M4 <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> M4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> M8 <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> M8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">16</span> <span class="token operator">|</span> n <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57-136" tabindex="-1"><a class="header-anchor" href="#\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57-136" aria-hidden="true">#</a> \u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57\uFF08136\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res <span class="token operator">^=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E22\u5931\u7684\u6570\u5B57-268" tabindex="-1"><a class="header-anchor" href="#\u4E22\u5931\u7684\u6570\u5B57-268" aria-hidden="true">#</a> \u4E22\u5931\u7684\u6570\u5B57\uFF08268\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5F02\u6216\u7ED3\u5408\u5F8B</span>
<span class="token comment">//0^0^1^3^2^1^3^4^4 = 2</span>
<span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    res<span class="token operator">^=</span>numsSize<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        res <span class="token operator">^=</span>i<span class="token operator">^</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53E4\u6CD5\u70AE\u5236</span>
<span class="token keyword">int</span> <span class="token function">clc_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">clc_sum</span><span class="token punctuation">(</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sum <span class="token operator">-=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E24\u6570\u76F8\u9664-29" tabindex="-1"><a class="header-anchor" href="#\u4E24\u6570\u76F8\u9664-29" aria-hidden="true">#</a> \u4E24\u6570\u76F8\u9664\uFF0829\uFF09</h3><ol><li><p>\u8F6C\u6362\u4E3A\u7EDD\u5BF9\u503C\uFF0C\u8FDB\u884C\u52A0\u51CF\u64CD\u4F5C\uFF1B</p></li><li><p>\u9700\u7279\u6B8A\u5904\u7406\u4E24\u6570\u7684\u8FB9\u754C\u503C\uFF1B</p></li><li><p>\u88AB\u9664\u6570\u662FINT_MIN\u65F6\uFF0C\u9700\u5148\u6267\u884C\u4E00\u6B21\u52A0\u64CD\u4F5C\uFF0C\u907F\u514Dabs\u8F6C\u6362\u6EA2\u51FA\uFF1B</p></li><li><p>\u52A0\u51CF\u64CD\u4F5C\u6A21\u62DF\u9664\u6CD5\u65F6\uFF0C\u9700\u6307\u6570\u7EA7\u5FEB\u901F\u903C\u8FD1\uFF0C\u4EE5\u907F\u514D\u6267\u884C\u8D85\u65F6\uFF1B</p></li><li><p>\u6CE8\u610F\u903C\u8FD1\u81F3\u4E00\u534A\u7684\u6761\u4EF6\uFF0C\u540C\u65F6\u907F\u514D\u6574\u6570\u6EA2\u51FA\u95EE\u9898\u3002</p></li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dividend <span class="token operator">^</span> divisor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u4E24\u6570\u4EFB\u610F\u4E00\u4E2A\u4E3A\u8D1F\u6570</span>
        sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> INT_MIN<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u9664\u6570\u8FB9\u754C\u503C\u7279\u6B8A\u5904\u7406</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">==</span> INT_MIN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">==</span> INT_MIN<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u88AB\u9664\u6570\u8FB9\u754C\u503C\u7279\u6B8A\u5904\u7406</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dividend <span class="token operator">+=</span> <span class="token function">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5148\u6267\u884C\u4E00\u6B21\u52A0\u64CD\u4F5C\uFF0C\u907F\u514D\u4E0B\u9762abs\u8F6C\u6362\u6EA2\u51FA</span>
        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>dividend<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> s <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token comment">// \u9700\u6307\u6570\u7EA7\u5FEB\u901F\u903C\u8FD1\uFF0C\u4EE5\u907F\u514D\u6267\u884C\u8D85\u65F6</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u903C\u8FD1\u81F3\u4E00\u534A\uFF0C\u540C\u65F6\u907F\u514D\u6EA2\u51FA</span>
            s <span class="token operator">+=</span> s<span class="token punctuation">;</span>
            c <span class="token operator">+=</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cnt <span class="token operator">+=</span> c<span class="token punctuation">;</span>
        a <span class="token operator">-=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span>cnt <span class="token operator">:</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>\u5168\u90E8\u8F6C\u5316\u4E3A\u8D1F\u6570\u907F\u514D\u6EA2\u51FA\u95EE\u9898</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u65E0\u8111\u51CF</span>
<span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>INT_MIN<span class="token operator">&amp;&amp;</span>b<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8F6C\u4E3A\u8D1F\u6570\u8BA1\u7B97</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u53D6\u53CD\u52A0\u4E00</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        b <span class="token operator">=</span> <span class="token operator">~</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&gt;=</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        b<span class="token operator">=</span>c<span class="token punctuation">;</span>
        count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//0xc000 0000</span>
        <span class="token comment">//1100 0000 0000 0000 0000 0000 0000 0000\u5982\u679Cb\u7B49\u4E8E\u6B64\u503C\uFF0Cb+b\u5C06\u4F1A\u6EA2\u51FA</span>
        <span class="token comment">//b&gt;0xc0000000\u4E3A\u4E86b+b\u4E0D\u4F1A\u6EA2\u51FA</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span><span class="token number">0xc0000000</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">+</span>b<span class="token operator">&gt;</span>a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            b<span class="token operator">+=</span>b<span class="token punctuation">;</span>
            count<span class="token operator">+=</span>count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&gt;=</span>a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            a<span class="token operator">-=</span>b<span class="token punctuation">;</span>
            ans<span class="token operator">+=</span>count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">~</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6570\u5B57\u8303\u56F4\u6309\u4F4D\u4E0E-201" tabindex="-1"><a class="header-anchor" href="#\u6570\u5B57\u8303\u56F4\u6309\u4F4D\u4E0E-201" aria-hidden="true">#</a> \u6570\u5B57\u8303\u56F4\u6309\u4F4D\u4E0E\uFF08201\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rangeBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> shift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        left <span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
        right <span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
        shift<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token operator">&lt;&lt;</span>shift<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//Brian Kernighan</span>
<span class="token keyword">int</span> <span class="token function">rangeBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        right <span class="token operator">&amp;=</span><span class="token punctuation">(</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5176\u4ED6" tabindex="-1"><a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a> \u5176\u4ED6</h2><h3 id="\u6D17\u724C\u7B97\u6CD5\u6846\u67B6" tabindex="-1"><a class="header-anchor" href="#\u6D17\u724C\u7B97\u6CD5\u6846\u67B6" aria-hidden="true">#</a> \u6D17\u724C\u7B97\u6CD5\u6846\u67B6</h3><p><strong>\u5206\u6790\u6D17\u724C\u7B97\u6CD5\u6B63\u786E\u6027\u7684\u51C6\u5219\uFF1A\u4EA7\u751F\u7684\u7ED3\u679C\u5FC5\u987B\u6709 n! \u79CD\u53EF\u80FD\uFF0C\u5426\u5219\u5C31\u662F\u9519\u8BEF\u7684\u3002</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u5F97\u5230\u4E00\u4E2A\u5728\u95ED\u533A\u95F4 [min, max] \u5185\u7684\u968F\u673A\u6574\u6570</span>
<span class="token keyword">int</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u7B2C\u4E00\u79CD\u5199\u6CD5</span>
<span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/******** \u533A\u522B\u53EA\u6709\u8FD9\u4E24\u884C ********/</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u4ECE i \u5230\u6700\u540E\u968F\u673A\u9009\u4E00\u4E2A\u5143\u7D20</span>
        <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*************************/</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>rand<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u7B2C\u4E8C\u79CD\u5199\u6CD5</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u7B2C\u4E09\u79CD\u5199\u6CD5</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u7B2C\u56DB\u79CD\u5199\u6CD5</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8FD9\u79CD\u5199\u6CD5\u662F\u9519\u8BEF\u7684</strong>\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6BCF\u6B21\u90FD\u4ECE\u95ED\u533A\u95F4 [0, n-1]</span>
        <span class="token comment">// \u4E2D\u968F\u673A\u9009\u53D6\u5143\u7D20\u8FDB\u884C\u4EA4\u6362</span>
        <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>rand<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u56E0\u4E3A\u8FD9\u79CD\u5199\u6CD5\u5F97\u5230\u7684\u6240\u6709\u53EF\u80FD\u7ED3\u679C\u6709<code>n^n</code> \u79CD\uFF0C\u800C\u4E0D\u662F<code>n!</code>\u79CD\uFF0C\u800C\u4E14<code>n^n</code>\u4E00\u822C\u4E0D\u53EF\u80FD\u662F<code>n!</code>\u7684\u6574\u6570\u500D\u3002</p><h3 id="\u6253\u4E71\u6570\u7EC4-384" tabindex="-1"><a class="header-anchor" href="#\u6253\u4E71\u6570\u7EC4-384" aria-hidden="true">#</a> \u6253\u4E71\u6570\u7EC4\uFF08384\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> num<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> src<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numsSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Solution<span class="token punctuation">;</span>

Solution <span class="token operator">*</span>obj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

Solution<span class="token operator">*</span> <span class="token function">solutionCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    Solution <span class="token operator">*</span>obj <span class="token operator">=</span> <span class="token punctuation">(</span>Solution<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Solution<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>numsSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>num <span class="token operator">=</span> nums<span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>obj<span class="token operator">-&gt;</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">solutionReset</span><span class="token punctuation">(</span>Solution<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> retSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>retSize <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>numsSize<span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u6D17\u724C\u7B97\u6CD5</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">solutionShuffle</span><span class="token punctuation">(</span>Solution<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> retSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>retSize <span class="token operator">=</span> obj<span class="token operator">-&gt;</span>numsSize<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>obj<span class="token operator">-&gt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//\u6784\u9020\u968F\u673A\u6570</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>obj<span class="token operator">-&gt;</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>obj<span class="token operator">-&gt;</span>src<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token operator">-&gt;</span>src<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solutionFree</span><span class="token punctuation">(</span>Solution<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * Your Solution struct will be instantiated and called as such:
 * Solution* obj = solutionCreate(nums, numsSize);
 * int* param_1 = solutionReset(obj, retSize);
 
 * int* param_2 = solutionShuffle(obj, retSize);
 
 * solutionFree(obj);
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5FEB\u4E50\u6570-202" tabindex="-1"><a class="header-anchor" href="#\u5FEB\u4E50\u6570-202" aria-hidden="true">#</a> \u5FEB\u4E50\u6570\uFF08202\uFF09</h3><p>\u627E\u5FAA\u73AF\u7528\u5FEB\u6162\u6307\u9488</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u53CC\u6307\u9488</span>
<span class="token keyword">int</span> <span class="token function">bitSquareSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
        res <span class="token operator">+=</span>tmp<span class="token operator">*</span>tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">do</span>
    <span class="token punctuation">{</span>
        left <span class="token operator">=</span> <span class="token function">bitSquareSum</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        right <span class="token operator">=</span> <span class="token function">bitSquareSum</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        right <span class="token operator">=</span> <span class="token function">bitSquareSum</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">!=</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token comment">//return left==1;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u76F4\u7EBF\u4E0A\u6700\u591A\u7684\u70B9\u6570-149" tabindex="-1"><a class="header-anchor" href="#\u76F4\u7EBF\u4E0A\u6700\u591A\u7684\u70B9\u6570-149" aria-hidden="true">#</a> \u76F4\u7EBF\u4E0A\u6700\u591A\u7684\u70B9\u6570\uFF08149\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//hash</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">hashNode</span>
<span class="token punctuation">{</span>
    <span class="token keyword">float</span> <span class="token class-name">key_t</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    UT_hash_handle hh<span class="token punctuation">;</span>
<span class="token punctuation">}</span> hashNode<span class="token punctuation">;</span>

hashNode<span class="token operator">*</span> headnode<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">hashAddNode</span><span class="token punctuation">(</span><span class="token keyword">float</span> keyvalue<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    hashNode<span class="token operator">*</span> pstnode<span class="token punctuation">;</span>
    hashNode<span class="token operator">*</span> tmpnode<span class="token punctuation">;</span>
    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>headnode<span class="token punctuation">,</span><span class="token operator">&amp;</span>keyvalue<span class="token punctuation">,</span>pstnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u6DFB\u52A0\u4E4B\u524D\u5148\u67E5\u627E\uFF0C\u7ED3\u679C\u8FD4\u56DE\u5230pstnode</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pstnode<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tmpnode <span class="token operator">=</span> <span class="token punctuation">(</span>hashNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hashNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmpnode<span class="token operator">-&gt;</span><span class="token class-name">key_t</span> <span class="token operator">=</span> keyvalue<span class="token punctuation">;</span>
        tmpnode<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>headnode<span class="token punctuation">,</span><span class="token class-name">key_t</span><span class="token punctuation">,</span>tmpnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        pstnode<span class="token operator">-&gt;</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">findMaxNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> maxNum<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    hashNode<span class="token operator">*</span> pstnode<span class="token punctuation">;</span>
    hashNode<span class="token operator">*</span> tmp<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token operator">*</span>maxNum<span class="token punctuation">;</span>
    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span>headnode<span class="token punctuation">,</span>pstnode<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        max <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>pstnode<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HASH_DEL</span><span class="token punctuation">(</span>headnode<span class="token punctuation">,</span>pstnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>pstnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>maxNum <span class="token operator">=</span> max<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maxPoints</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> points<span class="token punctuation">,</span> <span class="token keyword">int</span> pointsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pointsColSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> maxNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> keyvalue<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pointsSize<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> pointsSize<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pointsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>maxNum<span class="token operator">&gt;</span>pointsSize<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>pointsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//x\u76F8\u540C</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>keyvalue <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
            <span class="token comment">//y\u76F8\u540C</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>keyvalue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">//\u7B97\u659C\u7387</span>
            <span class="token keyword">else</span> keyvalue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hashAddNode</span><span class="token punctuation">(</span>keyvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">findMaxNum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maxNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5BFB\u627E\u591A\u6570\u5143\u7D20-\u4E3B\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u591A\u6570\u5143\u7D20-\u4E3B\u5143\u7D20" aria-hidden="true">#</a> \u5BFB\u627E\u591A\u6570\u5143\u7D20\uFF08\u4E3B\u5143\u7D20\uFF09</h3><ul><li>\u5728\u539F\u5E8F\u5217\u4E2D\u53BB\u9664\u4E24\u4E2A\u4E0D\u540C\u7684\u5143\u7D20\u540E\uFF0C\u539F\u5E8F\u5217\u4E2D\u7684\u591A\u6570\u5143\u7D20\u5728\u65B0\u5E8F\u5217\u4E2D\u8FD8\u662F\u591A\u6570\u5143\u7D20\u3002</li><li>\u6211\u4EEC\u53EA\u9700\u8981\u5C06\u6570\u7EC4\u4E2D\u4E0D\u76F8\u540C\u7684\u5143\u7D20\u4E24\u4E24\u5254\u9664\uFF0C\u90A3\u4E48\u5269\u4E0B\u7684\u6570\u5C31\u81EA\u7136\u662F\u591A\u6570\u5143\u7D20\u3002</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">Candidate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>  
<span class="token punctuation">{</span><span class="token comment">//\u5BFB\u627EA[m...n]\u4E2D\u591A\u6570\u5143\u7D20\u5019\u9009\u8005</span>
     c<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
     count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">)</span>
           count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> 
           count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>n<span class="token punctuation">)</span>
       <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
       <span class="token keyword">return</span> <span class="token function">Candidate</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u5BF9A[j...n]\u5BFB\u627E\u591A\u6570\u5143\u7D20\u5019\u9009\u8005\u3002</span>
<span class="token punctuation">}</span>
bool <span class="token function">Majority</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> major<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    c <span class="token operator">=</span> <span class="token function">Candidate</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u8FD9\u91CC\u662F\u4E3A\u4E86\u68C0\u67E5\u662F\u5426\u4E3A\u591A\u6570</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">)</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">*</span>major <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">// major\u5373\u4E3A\u6240\u6C42</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> 
        <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//\u8FD4\u56DE0\u8868\u793A\u4E0D\u5B58\u5728\u591A\u6570\u5143\u7D20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5355\u5237" tabindex="-1"><a class="header-anchor" href="#\u5355\u5237" aria-hidden="true">#</a> \u5355\u5237</h2><h3 id="\u5BFB\u627E\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570-4" tabindex="-1"><a class="header-anchor" href="#\u5BFB\u627E\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570-4" aria-hidden="true">#</a> \u5BFB\u627E\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570\uFF084\uFF09</h3><p>\u5229\u7528\u4E2D\u4F4D\u6570\u7279\u70B9\uFF0Cij\u4E24\u4E2A\u6307\u9488\u5207\u6570\u7EC4\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums1Size<span class="token operator">&gt;</span>nums2Size<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> nums2Size<span class="token punctuation">,</span>nums1<span class="token punctuation">,</span>nums1Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> iMin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> iMax <span class="token operator">=</span> nums1Size<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>iMin<span class="token operator">&lt;=</span>iMax<span class="token punctuation">)</span><span class="token comment">//\u4E8C\u5206\u6CD5\u627Ei\uFF0C\u4E14j\u968F\u7740i\u53D8\u800C\u53D8</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> iMin<span class="token operator">+</span><span class="token punctuation">(</span>iMax<span class="token operator">-</span>iMin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>nums1Size<span class="token operator">+</span>nums2Size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>nums1Size<span class="token operator">&amp;&amp;</span>nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            iMin <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">!=</span>nums2Size<span class="token operator">&amp;&amp;</span>nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            iMax <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token comment">//\u6EE1\u8DB3\u6761\u4EF6</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//\u5904\u7406\u8FB9\u754C</span>
            <span class="token keyword">double</span> maxLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>maxLeft <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>maxLeft <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>maxLeft <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums1Size<span class="token operator">+</span>nums2Size<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> maxLeft<span class="token punctuation">;</span><span class="token punctuation">}</span>

            <span class="token keyword">int</span> minRight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>nums1Size<span class="token punctuation">)</span><span class="token punctuation">{</span>minRight <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>nums2Size<span class="token punctuation">)</span><span class="token punctuation">{</span>minRight <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>minRight <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>maxLeft<span class="token operator">+</span>minRight<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5DF2\u9A8C\u8BC1\uFF1A\u8FD9\u9053\u9898\u5982\u679C\u65F6\u95F4\u590D\u6742\u5EA6\u6CA1\u6709\u9650\u5B9A\u5728 O(log(m+n))\uFF0C\u6211\u4EEC\u53EF\u4EE5\u7528 O(m+n) \u7684\u7B97\u6CD5\u89E3\u51B3\uFF0C\u7528\u4E24\u4E2A\u6307\u9488\u5206\u522B\u6307\u5411\u4E24\u4E2A\u6570\u7EC4\uFF0C\u6BD4\u8F83\u6307\u9488\u4E0B\u7684\u5143\u7D20\u5927\u5C0F\uFF0C\u4E00\u5171\u79FB\u52A8\u6B21\u6570\u4E3A (m+n + 1)/2\uFF0C\u4FBF\u662F\u4E2D\u4F4D\u6570\u3002</p><p>\u9A8C\u8BC1\u7ED3\u679C\uFF1A\u8BE5\u65B9\u6CD5\u5982\u679C\u4E24\u4E2A\u6570\u7EC4\u4E2D\u6709\u4E00\u4E2A\u4E3A\u7A7A\uFF0C\u5C31\u65E0\u6CD5\u627E\u51FA\u4E2D\u4F4D\u6570\u3002\u524D\u63D0\u662F\u4E0D\u4F1A\u51FA\u73B0\u7A7A\u6570\u7EC4\u7684\u60C5\u51B5\u4E0B\u624D\u4F1A\u6709\u6548\u3002</p><h3 id="\u4E24\u6570\u4E4B\u548C-\u65E0\u5E8F-1" tabindex="-1"><a class="header-anchor" href="#\u4E24\u6570\u4E4B\u548C-\u65E0\u5E8F-1" aria-hidden="true">#</a> \u4E24\u6570\u4E4B\u548C|\u65E0\u5E8F\uFF081\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//O(n*n)</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
                res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
                <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> res<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u9700\u8981\u8BBE\u7F6E\u8F93\u51FA\u957F\u5EA6</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6392\u5E8F\u52A0\u53CC\u6307\u9488<code>O(n*logn)</code></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u89E3\u51B3\u6392\u5E8F\u540E\u7D22\u5F15\u4E71\u5E8F\u7684\u95EE\u9898</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">data</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span>
<span class="token punctuation">}</span>data<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token operator">-&gt;</span>val <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    data<span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">*</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u5FEB\u6392</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p2 <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> p2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">+</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>
            p1<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">+</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">&gt;</span> target<span class="token punctuation">)</span>
            p2<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u94FE\u8868\u52A0\u6CD5-2" tabindex="-1"><a class="header-anchor" href="#\u94FE\u8868\u52A0\u6CD5-2" aria-hidden="true">#</a> \u94FE\u8868\u52A0\u6CD5\uFF082\uFF09</h3><p>\u5148\u4EE5\u6700\u77ED\u7684\u4E3A\u6807\u51C6\u76F8\u52A0\uFF0C\u7136\u540E\u518D\u4E24\u4E2A\u957F\u77ED\u7684\u5DEE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">create_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//\u4EE3\u8868\u5206\u914D\u5806\u533A\u5931\u8D25</span>
    <span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u8282\u70B9\u521D\u59CB\u5316\u8D4B\u503C\u4E3A0</span>
    s<span class="token operator">-&gt;</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token comment">//\u8D4B\u503C\u4E3Aval</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token comment">//\u8FD4\u56DE\u6307\u9488</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">int</span> forward <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u8FDB\u4F4D\u6807\u5FD7</span>
    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> len1 <span class="token operator">&lt;</span> len2 <span class="token operator">?</span> len1 <span class="token operator">:</span> len2<span class="token punctuation">;</span><span class="token comment">//\u627E\u6700\u5C0F\u76F8\u52A0</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment">//\u76F8\u52A0</span>
    <span class="token punctuation">{</span>
        num <span class="token operator">=</span> l1<span class="token operator">-&gt;</span>val <span class="token operator">+</span> l2<span class="token operator">-&gt;</span>val <span class="token operator">+</span> forward<span class="token punctuation">;</span>
        l1 <span class="token operator">=</span> l1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        l2 <span class="token operator">=</span> l2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            num <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            forward <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            head <span class="token operator">=</span> <span class="token function">create_node</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u521B\u5EFA\u8282\u70B9</span>
            s <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">create_node</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            s <span class="token operator">=</span> s<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u4E0B\u9762\u5728\u5904\u7406\u76F8\u52A0\u5B8C\u6700\u9AD8\u4F4D\u7684\u8FDB\u4F4D</span>
    len <span class="token operator">=</span> len1 <span class="token operator">&gt;</span> len2 <span class="token operator">?</span> len1 <span class="token operator">-</span> len2 <span class="token operator">:</span> len2 <span class="token operator">-</span> len1<span class="token punctuation">;</span><span class="token comment">//\u6700\u5C0F\u7684+\u5DEE\u503C=\u6700\u5927\u7684</span>
    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>p <span class="token operator">=</span> len1 <span class="token operator">&gt;</span> len2 <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        num <span class="token operator">=</span> p<span class="token operator">-&gt;</span>val <span class="token operator">+</span> forward<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            num <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            forward <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">create_node</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> s<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>forward <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token function">create_node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u52A0\u4E00-66" tabindex="-1"><a class="header-anchor" href="#\u52A0\u4E00-66" aria-hidden="true">#</a> \u52A0\u4E00\uFF0866\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7B80\u5355\u8FDB\u4F4D</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> digits<span class="token punctuation">,</span> <span class="token keyword">int</span> digitsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> digitsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token operator">*</span>returnSize <span class="token operator">=</span> digitsSize<span class="token punctuation">;</span>
            <span class="token keyword">return</span> digits<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>returnSize <span class="token operator">=</span> digitsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>digitsSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5468\u8D5B" tabindex="-1"><a class="header-anchor" href="#\u5468\u8D5B" aria-hidden="true">#</a> \u5468\u8D5B</h2><h3 id="\u6781\u5927\u6781\u5C0F\u6E38\u620F-6090" tabindex="-1"><a class="header-anchor" href="#\u6781\u5927\u6781\u5C0F\u6E38\u620F-6090" aria-hidden="true">#</a> \u6781\u5927\u6781\u5C0F\u6E38\u620F\uFF086090\uFF09</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span>numsSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ans <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5212\u5206\u6570\u7EC4\u4F7F\u6700\u5927\u5DEE\u4E3Ak-6091" tabindex="-1"><a class="header-anchor" href="#\u5212\u5206\u6570\u7EC4\u4F7F\u6700\u5927\u5DEE\u4E3Ak-6091" aria-hidden="true">#</a> \u5212\u5206\u6570\u7EC4\u4F7F\u6700\u5927\u5DEE\u4E3AK\uFF086091\uFF09</h3><p>\u7531\u4E8E\u9009\u7684\u662F\u5B50\u5E8F\u5217\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6392\u5E8F\u540E\u5206\u7EC4\uFF0C\u6BCF\u7EC4\u5185\u7684\u5143\u7D20\u6700\u5927\u6700\u5C0F\u4E0D\u8D85\u8FC7 k<em>k</em>\u3002\u8FD9\u53EF\u4EE5\u901A\u8FC7\u904D\u5386\u4E00\u904D\u6570\u7EC4\u5F97\u5230\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmp_int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>e1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>e1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">partitionArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//int *ans = malloc(sizeof(int)*numsSize);</span>
    <span class="token comment">//memset(ans, 0, sizeof(int)*numsSize);</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp_int<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> minv <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxv <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
            minv <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            maxv <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxv<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxv <span class="token operator">-</span> minv <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>res<span class="token punctuation">;</span>
                minv <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                maxv <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5206\u89E3" tabindex="-1"><a class="header-anchor" href="#\u5206\u89E3" aria-hidden="true">#</a> \u5206\u89E3</h3><p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570\uFF0C\u95EE\u6700\u591A\u80FD\u5C06\u5176\u5206\u89E3\u6210\u591A\u5C11\u8D28\u6570\u7684\u548C\u3002\u5728\u7B2C\u4E00\u884C\u8F93\u51FA\u6700\u591A\u7684\u8D28\u6570\u6570\u91CFk,\u4E0B\u4E00\u884C\u8F93\u51FAk\u4E2A\u6574\u6570\uFF0C\u4E3A\u8FD9\u4E9B\u8D28\u6570\u3002\u4E2A\u5927\u4E8E1\u7684\u6570\u5982\u679C\u53EA\u80FD\u88AB1\u548C\u5B83\u81EA\u5DF1\u6574\u9664\uFF0C\u90A3\u5B83\u5C31\u662F\u4E00\u4E2A\u8D28\u6570\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    count <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u62BD\u5956" tabindex="-1"><a class="header-anchor" href="#\u62BD\u5956" aria-hidden="true">#</a> \u62BD\u5956</h3><p>\u5C0F\u7801\u54E5\u5728\u96C6\u5E02\u4E0A\u901B\u8857\uFF0C\u9047\u89C1\u4E86\u62BD\u5956\u6D3B\u52A8\uFF0C\u62BD\u4E00\u6B212\u5143\uFF0C\u4F46\u662F\u53EF\u80FD\u4F1A\u62BD\u51FA1,2,3,4\u56DB\u79CD\u60C5\u51B5\uFF0C\u4ED6\u4EEC\u662F\u7B49\u6982\u7387\u7684\uFF0C\u5C0F\u7801\u54E5\u8BA1\u5212\u62BD\u6B21\uFF0C\u95EE\u4E8F\u672C\u7684\u6982\u7387\u662F\u591A\u5C11\uFF08\u5373\u5F97\u5230\u7684\u5956\u91D1\u5C0F\u4E8E\u672C\u91D1\uFF09\uFF0C\u5C0F\u7801\u54E5\u8D5A\u4E86\u8D85\u8FC7\u4E00\u534A\u672C\u91D1\u7684\u6982\u7387\u662F\u591A\u5C11\uFF08\u8D5A\u5230\u7684\u94B1\u662F\u5956\u91D1-\u672C\u91D1\u540E\u7684\u90E8\u5206)</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u63D0\u4EA4\u4E0D\u8FC7\u7684\u539F\u56E0\u662F\u6709\u7EA6\u6570\uFF0C\u53EF\u4EE5\u7EA6\u5206</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span></span>
<span class="token keyword">int</span> money<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> kcount<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> zcount<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> level<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> now_capital<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>level<span class="token operator">==</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>now_capital<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            kcount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;=</span>now_capital<span class="token operator">-</span><span class="token punctuation">(</span>n<span class="token operator">-</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>sum<span class="token operator">+</span>money<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>now_capital<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> capital <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    kcount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    zcount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zcount<span class="token operator">=</span>kcount<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld/%lld\\n&quot;</span><span class="token punctuation">,</span>kcount<span class="token punctuation">,</span>capital<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld/%lld&quot;</span><span class="token punctuation">,</span>zcount<span class="token punctuation">,</span>capital<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u72B6\u6001\u5B9A\u4E49\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> i\u8868\u793A\u62BD\u5956\u7B2Ci\u6B21\uFF0Cj\u8868\u793A\u4E2D\u5956\u5F97j\u5143\uFF0C\u503C\u8868\u793A\u65B9\u6848\u6570
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u72B6\u6001\u8F6C\u79FB\u65B9\u7A0B\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span> \u5176\u4E2D<span class="token number">1</span><span class="token operator">&lt;=</span>k<span class="token operator">&lt;=</span><span class="token number">4</span> k<span class="token operator">&lt;=</span>j 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u8FB9\u754C\u6761\u4EF6\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token operator">*</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">3</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BA1\u7B97\u6982\u7387\uFF1A\uFF08\u5173\u952E\u662F\u7EA6\u5206\uFF09</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token operator">+=</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll x <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u91CD\u8981</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld/%lld\\n&quot;</span><span class="token punctuation">,</span>ans<span class="token operator">/</span>x<span class="token punctuation">,</span>sum<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld/%lld&quot;</span><span class="token punctuation">,</span>ans<span class="token operator">/</span>x<span class="token punctuation">,</span>sum<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++\u7248\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span> </span>

using namespace std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll dp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//\u91CD\u8981</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token operator">*</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">3</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token operator">+=</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll x <span class="token operator">=</span> <span class="token function">__gcd</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">/</span>x<span class="token operator">&lt;&lt;</span><span class="token string">&quot;/&quot;</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">/</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">/</span>x<span class="token operator">&lt;&lt;</span><span class="token string">&quot;/&quot;</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">/</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C\u8BED\u8A00\u7248\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//dp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll dp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//\u91CD\u8981</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token operator">*</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">3</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token operator">+=</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll x <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u91CD\u8981</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld/%lld\\n&quot;</span><span class="token punctuation">,</span>ans<span class="token operator">/</span>x<span class="token punctuation">,</span>sum<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld/%lld&quot;</span><span class="token punctuation">,</span>ans<span class="token operator">/</span>x<span class="token punctuation">,</span>sum<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u9152\u6876\u3001\u5957\u5A03\u3001\u4FE1\u5C01" tabindex="-1"><a class="header-anchor" href="#\u9152\u6876\u3001\u5957\u5A03\u3001\u4FE1\u5C01" aria-hidden="true">#</a> \u9152\u6876\u3001\u5957\u5A03\u3001\u4FE1\u5C01</h3><p>\u6709\u4E2A\u65E0\u76D6\u9152\u6876\uFF0C\u6BCF\u4E2A\u9152\u6876\u53EF\u4EE5\u8FD1\u4F3C\u770B\u505A\u662F\u4E00\u4E2A\u5706\u67F1\u4F53\u3002\u5B83\u4EEC\u7684\u5C3A\u5BF8\u4E0D\u4E00\u5B9A\u76F8\u540C\uFF0C\u6211\u4EEC\u53EF\u4EE5\u7528\u5B83\u4EEC\u7684\u534A\u5F84\u548C\u9AD8\u6765\u63CF\u8FF0\u6BCF\u4E2A\u6876\u7684\u5927\u5C0F\u3002\u5BF9\u4E8E\u4E24\u4E2A\u4E0D\u4E00\u6837\u7684\u9152\u6876A\u548C\u9152\u6876B,\u5982\u679C\u9152\u6876A\u7684\u534A\u5F84\u548C\u9AD8\u5EA6\u90FD\u5927\u4E8E\u9152\u6876B,\u6211\u4EEC\u8BA4\u4E3A\u9152\u6876A\u53EF\u4EE5\u5957\u5728\u9152\u6876B\u4E0A\u3002\u540C\u7406\uFF0C\u82E5\u9152\u6876C\u7684\u534A\u5F84\u548C\u9AD8\u5EA6\u90FD\u5927\u4E8E\u9152\u6876A,\u9152\u6876C\u5C31\u53EF\u4EE5\u5957\u5728\u9152\u6876A\u548C\u9152\u6876B\u7684\u7EC4\u5408\u4F53\u4E0A\u3002\u73B0\u5728\u8BF7\u4F60\u6C42\u51FA\u6700\u591A\u53EF\u4EE5\u5957\u591A\u5C11\u4E2A\u9152\u6876\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>aa <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>bb <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>aa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> bb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> aa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> aa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> bb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> size<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E58\u6CD5\u9006\u5143" tabindex="-1"><a class="header-anchor" href="#\u4E58\u6CD5\u9006\u5143" aria-hidden="true">#</a> \u4E58\u6CD5\u9006\u5143</h3><p>\u7ED9\u5B9A\u6574\u6570n,p\uFF0C\u6C42\u89E31~n\u4E2D\u6240\u6709\u6574\u6570\u5728\u6A21p\u4E0B\u7684\u4E58\u6CD5\u9006\u5143\u3002</p>`,121),za={class:"custom-container tip"},Sa=n("p",{class:"custom-container-title"},"\u95EE\u9898\u5F15\u5165",-1),_a=n("p",null,[s("\u4E58\u6CD5\u9006\u5143\uFF0C\u4E00\u822C\u7528\u4E8E\u6C42"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mi",null,"a"),n("mi",null,"b")]),n("mo",{stretchy:"false"},"("),n("mtext",null,"\u200A"),n("mo",{lspace:"0.22em",rspace:"0.22em"},[n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")])]),n("mtext",null,"\u200A"),n("mi",null,"p"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\frac{a}{b} ( \\bmod p)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.095em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6954em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"b")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"a")])])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mopen"},"("),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mclose"},")")])])]),s("\u7684\u503C\uFF08p \u901A\u5E38\u4E3A\u8D28\u6570\uFF09\uFF0C\u662F\u89E3\u51B3\u6A21\u610F\u4E49\u4E0B\u5206\u6570\u6570\u503C\u7684\u5FC5\u8981\u624B\u6BB5\u3002")],-1),ja=n("p",null,"\u5173\u4E8E\u6C42\u4F59\uFF0C\u6709\u4EE5\u4E0B\u4E09\u79CD\u89C4\u5219\uFF1A",-1),qa=n("p",null,"\u52A0\u6CD5\uFF1A(a+b)%m=(a%m+b%m)%m(a+b)%m=(a%m+b%m)%m",-1),Na=n("p",null,"\u51CF\u6CD5\uFF1A(a\u2212b)%m=(a%m\u2212b%m)%m(a\u2212b)%m=(a%m\u2212b%m)%m",-1),La=n("p",null,"\u4E58\u6CD5\uFF1A(a\u2217b)%m=(a%m\u2217b%m)%m(a\u2217b)%m=(a%m\u2217b%m)%m",-1),Ca=s("\u4F46\u662F\u8FD9\u4E2A\u89C4\u5219\u5728\u9664\u6CD5\u4E0D\u9002\u7528\uFF0C\u6240\u4EE5\u5C31\u8981\u7528\u5230\u4E58\u6CD5\u9006\u5143\u3002 \u5F15\u7528\u6765\u6E90\uFF1A"),Ua={href:"https://blog.csdn.net/weixin_48842132/article/details/108361527",target:"_blank",rel:"noopener noreferrer"},Ma=s("https://blog.csdn.net/weixin_48842132/article/details/108361527"),Ta=n("h4",{id:"\u9006\u5143\u5B9A\u4E49",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u9006\u5143\u5B9A\u4E49","aria-hidden":"true"},"#"),s(" \u9006\u5143\u5B9A\u4E49")],-1),Aa={class:"custom-container tip"},Ia=n("p",{class:"custom-container-title"},"\u5B9A\u4E49",-1),Ba=n("p",null,[s("\u82E5"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"a"),n("mo",null,"\u2217"),n("mi",null,"x"),n("mo",null,"\u2261"),n("mn",null,"1"),n("mo",{stretchy:"false"},"("),n("mtext",null,"\u200A"),n("mo",{lspace:"0.22em",rspace:"0.22em"},[n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")])]),n("mtext",null,"\u200A"),n("mi",null,"b"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"a\u2217x\u22611(\\bmod b)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4653em"}}),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2217"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4637em"}}),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"\u2261"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mopen"},"("),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mclose"},")")])])]),s("\uFF0C\u4E14"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"a")]),n("annotation",{encoding:"application/x-tex"},"a")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"a")])])]),s("\u4E0E"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"b")]),n("annotation",{encoding:"application/x-tex"},"b")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"b")])])]),s("\u4E92\u8D28\uFF0C\u90A3\u4E48\u6211\u4EEC\u5C31\u80FD\u5B9A\u4E49:")],-1),Da=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s("\u4E3A "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"a")]),n("annotation",{encoding:"application/x-tex"},"a")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"a")])])]),s(" \u7684\u9006\u5143\uFF0C\u8BB0\u4E3A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"a"),n("mrow",null,[n("mo",null,"\u2212"),n("mn",null,"1")])])]),n("annotation",{encoding:"application/x-tex"},"a^{\u22121}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"\u2212"),n("span",{class:"mord mtight"},"1")])])])])])])])])])])]),s("\uFF0C\u6240\u4EE5\u6211\u4EEC\u4E5F\u53EF\u4EE5\u79F0 $ x$ \u4E3A $ a $ \u5728 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"\u200A"),n("mo",{lspace:"0.22em",rspace:"0.22em"},[n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")])]),n("mtext",null,"\u200A"),n("mi",null,"b")]),n("annotation",{encoding:"application/x-tex"},"\\bmod b")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord mathnormal"},"b")])])]),s(" \u610F\u4E49\u4E0B\u7684\u5012\u6570\uFF0C")],-1),Fa=n("p",null,[s("\u6240\u4EE5\u5BF9\u4E8E "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mi",null,"a"),n("mi",null,"b")]),n("mo",{stretchy:"false"},"("),n("mtext",null,"\u200A"),n("mo",{lspace:"0.22em",rspace:"0.22em"},[n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")])]),n("mtext",null,"\u200A"),n("mi",null,"b"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\frac{a}{b} ( \\bmod b)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.095em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6954em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"b")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"a")])])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mopen"},"("),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mclose"},")")])])]),s(" \uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u6C42\u51FA $ b$ \u5728 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"\u200A"),n("mo",{lspace:"0.22em",rspace:"0.22em"},[n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")])]),n("mtext",null,"\u200A"),n("mi",null,"b")]),n("annotation",{encoding:"application/x-tex"},"\\bmod b")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord mathnormal"},"b")])])]),s(" \u4E0B\u7684\u9006\u5143\uFF0C\u7136\u540E\u4E58\u4E0A "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"a")]),n("annotation",{encoding:"application/x-tex"},"a")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"a")])])]),s(" \uFF0C\u518D "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"\u200A"),n("mo",{lspace:"0.22em",rspace:"0.22em"},[n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")])]),n("mtext",null,"\u200A"),n("mi",null,"b")]),n("annotation",{encoding:"application/x-tex"},"\\bmod b")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.0556em"}}),n("span",{class:"mord mathnormal"},"b")])])]),s("\uFF0C\u5C31\u662F\u8FD9\u4E2A\u5206\u6570\u7684\u503C\u4E86\u3002")],-1),Ra=s("\u5F15\u7528\u6765\u6E90\uFF1A"),Pa={href:"https://www.cnblogs.com/zjp-shadow/p/7773566.html",target:"_blank",rel:"noopener noreferrer"},Ha=s("https://www.cnblogs.com/zjp-shadow/p/7773566.html"),Oa=o(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">3000010</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> inv<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld%lld&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    inv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token operator">-</span>p<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>p<span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld\\n&quot;</span><span class="token punctuation">,</span>inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6C34\u4F4D\u7EBF" tabindex="-1"><a class="header-anchor" href="#\u6C34\u4F4D\u7EBF" aria-hidden="true">#</a> \u6C34\u4F4D\u7EBF</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token comment">//\u5BF9for\u5FAA\u73AF\u7684\u5B8F</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span></span>
<span class="token comment">//\u65B9\u4FBFdebug\u7684\u5B8F</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> #a <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot; = &quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1E6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ll k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> t<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> k <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> t <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>
    r <span class="token operator">-=</span> l<span class="token punctuation">,</span> k <span class="token operator">-=</span> l<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> y <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> k <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> k <span class="token operator">&gt;=</span> x <span class="token operator">?</span> <span class="token string">&quot;Yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//\u7528\u5F97\u591A</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> y <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> k <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        k <span class="token operator">-=</span> x<span class="token punctuation">;</span>
        
        ll cha <span class="token operator">=</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
        ll day <span class="token operator">=</span> k <span class="token operator">/</span> cha<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> day <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> t <span class="token operator">?</span> <span class="token string">&quot;Yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            ll day <span class="token operator">=</span> k <span class="token operator">/</span> x<span class="token punctuation">;</span>
            k <span class="token operator">-=</span> day <span class="token operator">*</span> x<span class="token punctuation">,</span> t <span class="token operator">-=</span> <span class="token function">min</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            
            k <span class="token operator">+=</span> y<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;No\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Yes\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1E6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>t<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld %lld %lld %lld %lld %lld&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u7B2C\u4E00\u5929\u559D\u6C34</span>
    r <span class="token operator">-=</span> l<span class="token punctuation">,</span> k <span class="token operator">-=</span> l<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> y <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> k <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> k <span class="token operator">&gt;=</span> x <span class="token operator">?</span> <span class="token string">&quot;Yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> y <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> k <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        k <span class="token operator">-=</span> x<span class="token punctuation">;</span>
        
        ll cha <span class="token operator">=</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
        ll day <span class="token operator">=</span> k <span class="token operator">/</span> cha<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> day <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> t <span class="token operator">?</span> <span class="token string">&quot;Yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            ll day <span class="token operator">=</span> k <span class="token operator">/</span> x<span class="token punctuation">;</span>
            k <span class="token operator">-=</span> day <span class="token operator">*</span> x<span class="token punctuation">;</span>
            t <span class="token operator">-=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            
            k <span class="token operator">+=</span> y<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> r<span class="token punctuation">)</span> 
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;No\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Yes\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u9006\u6CE2\u5170\u5F0F\u8BA1\u7B97" tabindex="-1"><a class="header-anchor" href="#\u9006\u6CE2\u5170\u5F0F\u8BA1\u7B97" aria-hidden="true">#</a> \u9006\u6CE2\u5170\u5F0F\u8BA1\u7B97</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

bool <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">strlen</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span> <span class="token operator">&lt;=</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">evalRPN</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> tokens<span class="token punctuation">,</span> <span class="token keyword">int</span> tokensSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> tokensSize<span class="token punctuation">;</span>
    ll stk<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token operator">*</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stk<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">atoll</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            ll num2 <span class="token operator">=</span> stk<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ll num1 <span class="token operator">=</span> stk<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span>
                    stk<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span>
                    stk<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span><span class="token operator">:</span>
                    stk<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stk<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> tokens<span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld\\n&quot;</span><span class="token punctuation">,</span><span class="token function">evalRPN</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5403\u5976\u916A" tabindex="-1"><a class="header-anchor" href="#\u5403\u5976\u916A" aria-hidden="true">#</a> \u5403\u5976\u916A</h3><p>\u623F\u95F4\u91CC\u653E\u7740\u5757\u5976\u916A\u3002\u4E00\u53EA\u5C0F\u8001\u9F20\u8981\u628A\u5B83\u4EEC\u90FD\u5403\u6389\uFF0C\u95EE\u81F3\u5C11\u8981\u8DD1\u591A\u5C11\u8DDD\u79BB\uFF1F\u8001\u6247\u9F20\u4E00\u5F00\u59CB\u5728(0,0)\u70B9\u5904\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">// #include&lt;cstdio&gt;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span></span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">double</span> f<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">cd</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u8D4B\u521D\u503C</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf %lf&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// cin&gt;&gt;x[i]&gt;&gt;y[i];</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">//\u679A\u4E3E\u72B6\u6001</span>
    	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">//\u679A\u4E3E\u8D77\u70B9</span>
    	<span class="token punctuation">{</span>
    		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">//\u5728\u8FD9\u4E2A\u72B6\u6001\u91CC\uFF0C\u6CA1\u6709\u8D70\u5230j\uFF0C\u9000\u51FA</span>
    		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//\u53EA\u8D70\u4E86\u81EA\u5DF1</span>
    		<span class="token punctuation">{</span>
    			f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//\u8D4B\u521D\u503C</span>
    			<span class="token keyword">continue</span><span class="token punctuation">;</span>
    		<span class="token punctuation">}</span>
    		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">//\u679A\u4E3E\u65AD\u70B9</span>
			    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//\u6709\u8D70\u5230k\uFF0C\u65AD\u70B9\u4E0D\u7B49\u4E8E\u8D77\u70B9</span>
				   f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fmin</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">cd</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>  
    ans<span class="token operator">=</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">cd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        ans<span class="token operator">=</span><span class="token function">fmin</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">cd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u56E0\u4E3A\u4ECE0,0,\u51FA\u53D1\uFF0C\u6700\u540E\u8981\u52A0\u4E0A</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf\\n&quot;</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7EBF\u6027\u5582\u732A" tabindex="-1"><a class="header-anchor" href="#\u7EBF\u6027\u5582\u732A" aria-hidden="true">#</a> \u7EBF\u6027\u5582\u732A</h3><p>\u6709\u53EA\u732A\u9700\u8981\u5582\u98DF\uFF0C\u6BCF\u53EA\u732A\u90FD\u6709\u4E00\u4E2A\u80A5\u80D6\u503C\uFF0C\u80A5\u80D6\u503C\u8D8A\u9AD8\u8FD9\u53EA\u732A\u5C31\u8D8A\u80D6\uFF0C\u80A5\u80D6\u503C\u8D8A\u4F4E\u8FD9\u53EA\u732A\u5C31\u8D8A\u7626\u3002\u5403\u996D\u65F6\u8FD9\u4E9B\u732A\u4F1A\u7AD9\u6210\u4E00\u6392\u5728\u732A\u69FD\u524D\u7B49\u5F85\u98DF\u7269\u3002\u8001\u516B\u6BCF\u6B21\u53EA\u7ED9\u7B2C\u53EA\u5230\u7B2C\u53EA\u732A\u4E2D\u7B2Ck\u7626\u7684\u732A\u5582\u98DF\u7269\u3002\u800C\u4E14\u4ED6\u5582\u7684\u6BCF\u4E2A\u533A\u95F4[,]\u4E0D\u5B58\u5728\u67D0\u4E2A\u533A\u95F4\u662F\u53E6\u4E00\u4E2A\u533A\u95F4\u7684\u5B50\u533A\u95F4\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    ll n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld %lld&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>k<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d %d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>left<span class="token punctuation">,</span><span class="token operator">&amp;</span>right<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>left<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>f<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">qsort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E2D\u6691\u7684\u7AF9\u9F20" tabindex="-1"><a class="header-anchor" href="#\u4E2D\u6691\u7684\u7AF9\u9F20" aria-hidden="true">#</a> \u4E2D\u6691\u7684\u7AF9\u9F20</h3><p>\u590F\u5929\u6765\u4E86\uFF0C\u7AF9\u9F20\u4EEC\u4E2D\u6691\u4E86\uFF0C\u5144\u5F1F\u4FE9\u8981\u6328\u4E2A\u201C\u7167\u987E\u8FD9\u4E9B\u7AF9\u9F20\uFF0C\u4F7F\u5B83\u4EEC\u6062\u590D\u5065\u5EB7\u3002\u5DF2\u77E5\u4E00\u5171\u6709N\u53EA\u7AF9\u9F20\u4E2D\u6691\uFF0C\u6BCF\u4E2A\u7AF9\u9F20\u9700\u8981\u7684\u7167\u987E\u65F6\u95F4\u662FT,\u8BF7\u95EE\u600E\u4E48\u6392\u5217\u8FD9N\u53EA\u7AF9\u6247\u9F20\u7684\u7167\u987E\u6B21\u5E8F\uFF0C\u53EF\u4EE5\u4F7FN\u53EA\u7AF9\u7684\u5E73\u5747\u7B49\u5F85\u65F6\u95F4\u6700\u77ED\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u5148\u6392\u5E8F\uFF0C\u518D\u6C42\u548C</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;%d\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span>a<span class="token punctuation">)</span></span></span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">greedy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> client<span class="token punctuation">,</span><span class="token keyword">int</span> clientSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span>clientSize<span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> clientSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>clientSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
        client<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> client<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>clientSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sum<span class="token operator">+=</span>client<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token operator">/</span>n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>num<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>client<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token function">greedy</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2f\\n&quot;</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u5927\u516C\u7EA6\u6570" tabindex="-1"><a class="header-anchor" href="#\u6700\u5927\u516C\u7EA6\u6570" aria-hidden="true">#</a> \u6700\u5927\u516C\u7EA6\u6570</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7BA1\u7406\u901A\u8BAF\u7C3F" tabindex="-1"><a class="header-anchor" href="#\u7BA1\u7406\u901A\u8BAF\u7C3F" aria-hidden="true">#</a> \u7BA1\u7406\u901A\u8BAF\u7C3F</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u6570\u636E\u57DF</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> brithday<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> postnumber<span class="token punctuation">;</span>
    <span class="token keyword">char</span> address<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> qq<span class="token punctuation">;</span>
    <span class="token keyword">char</span> tel<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//\u6307\u9488\u57DF</span>
    <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> STU<span class="token punctuation">;</span>
STU <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//\u6DFB\u52A0</span>
<span class="token keyword">void</span> <span class="token function">insert_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span><span class="token operator">*</span>p_head<span class="token punctuation">,</span> STU tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u6253\u5370</span>
<span class="token keyword">void</span> <span class="token function">print_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u67E5\u627E</span>
STU <span class="token operator">*</span><span class="token function">search_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5220\u9664</span>
<span class="token keyword">void</span> <span class="token function">delete_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span><span class="token operator">*</span>p_head<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">free_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span><span class="token operator">*</span>p_head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// printf(&quot;\u8BF7\u8F93\u5165\u5B66\u751F\u7684\u4E2A\u6570:&quot;);</span>
    <span class="token comment">//\u8F93\u5165\u5B66\u751F\u6570\u91CF</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// printf(&quot;\u8BF7\u8F93\u5165\u7B2C%d\u4E2A\u5B66\u5458\u7684\u4FE1\u606F:&quot;, i + 1);</span>
        STU tmp<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s %s %s %d %s %d %s&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>num<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>name<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>brithday<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>postnumber<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>address<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">.</span>qq<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        STU tmp1<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s %s %s %d %s %d %s&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp1<span class="token punctuation">.</span>num<span class="token punctuation">,</span>tmp1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>tmp1<span class="token punctuation">.</span>sex<span class="token punctuation">,</span>tmp1<span class="token punctuation">.</span>brithday<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp1<span class="token punctuation">.</span>postnumber<span class="token punctuation">,</span>tmp1<span class="token punctuation">.</span>address<span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp1<span class="token punctuation">.</span>qq<span class="token punctuation">,</span>tmp1<span class="token punctuation">.</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print_link</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delete_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print_link</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> numchazhao<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>numchazhao<span class="token punctuation">)</span><span class="token punctuation">;</span>
        STU <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token function">search_link</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> numchazhao<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s %s %s %d %s %d %s\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token operator">-&gt;</span>num<span class="token punctuation">,</span>ret<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>ret<span class="token operator">-&gt;</span>sex<span class="token punctuation">,</span>ret<span class="token operator">-&gt;</span>brithday<span class="token punctuation">,</span>ret<span class="token operator">-&gt;</span>postnumber<span class="token punctuation">,</span>ret<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span>ret<span class="token operator">-&gt;</span>qq<span class="token punctuation">,</span>ret<span class="token operator">-&gt;</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">print_link</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">free_link</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u5C3E\u63D2\u6CD5</span>
<span class="token keyword">void</span> <span class="token function">insert_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span><span class="token operator">*</span>p_head<span class="token punctuation">,</span> STU tmp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    STU <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token operator">*</span>p_head<span class="token punctuation">;</span>

    <span class="token comment">//\u4E3A\u63D2\u5165\u7684\u8282\u70B9\u7533\u8BF7\u7A7A\u95F4</span>
    STU <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token punctuation">(</span>STU <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>STU<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>pi <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    pi<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    pi<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token comment">//\u5224\u65AD\u94FE\u8868\u662F\u5426\u4E3A\u7A7A</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        head <span class="token operator">=</span> pi<span class="token punctuation">;</span>
        pi<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pi<span class="token punctuation">;</span>
        pi<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> pi<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        head<span class="token operator">-&gt;</span>pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pi<span class="token punctuation">;</span>
        pi<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        pi<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> head<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
        head<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> pi<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//\u66F4\u65B0\u5916\u90E8\u7684head</span>
    <span class="token operator">*</span>p_head <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u5224\u65AD\u94FE\u8868\u662F\u5426\u5B58\u5728</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// printf(&quot;link not exist\\n&quot;);</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        STU <span class="token operator">*</span>pn <span class="token operator">=</span> head<span class="token punctuation">;</span>
        STU <span class="token operator">*</span>pr <span class="token operator">=</span> head<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The records is:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pn <span class="token operator">==</span> pr<span class="token punctuation">)</span> <span class="token comment">//\u94FE\u8868\u8282\u70B9\u4E3A\u5947\u6570\u4E2A</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// &quot;%d %s %s %s %d %d %s&quot;, &amp;tmp.num,tmp.name,tmp.sex,tmp.brithday,&amp;tmp.postnumber,&amp;tmp.qq,tmp.tel</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s %s %s %d %s %d %s\\n&quot;</span><span class="token punctuation">,</span> pn<span class="token operator">-&gt;</span>num<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>sex<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>brithday<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>postnumber<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>qq<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>next <span class="token operator">==</span> pr<span class="token punctuation">)</span> <span class="token comment">////\u94FE\u8868\u8282\u70B9\u4E3A\u5076\u6570\u4E2A</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s %s %s %d %s %d %s\\n&quot;</span><span class="token punctuation">,</span> pr<span class="token operator">-&gt;</span>num<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>sex<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>brithday<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>postnumber<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>qq<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s %s %s %d %s %d %s\\n&quot;</span><span class="token punctuation">,</span> pn<span class="token operator">-&gt;</span>num<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>sex<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>brithday<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>postnumber<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>qq<span class="token punctuation">,</span>pn<span class="token operator">-&gt;</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// printf(&quot;%d %s %s %s %d %s %d %s\\n&quot;, pr-&gt;num,pr-&gt;name,pr-&gt;sex,pr-&gt;brithday,pr-&gt;postnumber,pr-&gt;address,pr-&gt;qq,pr-&gt;tel);</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// printf(&quot;%d %s %s %s %d %s %d %s\\n&quot;, pn-&gt;num,pn-&gt;name,pn-&gt;sex,pn-&gt;brithday,pn-&gt;postnumber,pn-&gt;address,pn-&gt;qq,pn-&gt;tel);</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s %s %s %d %s %d %s\\n&quot;</span><span class="token punctuation">,</span> pr<span class="token operator">-&gt;</span>num<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>sex<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>brithday<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>postnumber<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>qq<span class="token punctuation">,</span>pr<span class="token operator">-&gt;</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// pn = pn-&gt;next;</span>
                pr <span class="token operator">=</span> pr<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

STU <span class="token operator">*</span><span class="token function">search_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//\u5224\u65AD\u94FE\u8868\u662F\u5426\u5B58\u5728</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;link not exist\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// printf(&quot;The records is:\\n&quot;);</span>
        STU <span class="token operator">*</span>pn <span class="token operator">=</span> head<span class="token punctuation">;</span>
        STU <span class="token operator">*</span>pr <span class="token operator">=</span> head<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pr<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pn <span class="token operator">!=</span> pr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> pr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            pn <span class="token operator">=</span> pn<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            pr <span class="token operator">=</span> pr<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>num <span class="token operator">==</span> num<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> pn<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pr<span class="token operator">-&gt;</span>num <span class="token operator">==</span> num<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> pr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;not found\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span> </span></span>
<span class="token keyword">void</span> <span class="token function">delete_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span><span class="token operator">*</span>p_head<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    STU <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token operator">*</span>p_head<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// printf(&quot;link not exist\\n&quot;);</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        STU <span class="token operator">*</span>pn <span class="token operator">=</span> head<span class="token punctuation">;</span>
        STU <span class="token operator">*</span>pr <span class="token operator">=</span> head<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pr<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pn <span class="token operator">!=</span> pr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> pr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            pn <span class="token operator">=</span> pn<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            pr <span class="token operator">=</span> pr<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>num <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token comment">//\u5934\u90E8\u3001\u4E2D\u90E8\u8282\u70B9</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pn <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token comment">//\u5220\u9664\u5934\u8282\u70B9</span>
            <span class="token punctuation">{</span>
                head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> head<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
                head<span class="token operator">-&gt;</span>pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                <span class="token comment">//free(pn);</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token comment">//\u5220\u9664\u4E2D\u90E8\u8282\u70B9</span>
            <span class="token punctuation">{</span>
                pn<span class="token operator">-&gt;</span>pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pn<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                pn<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> pn<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
                <span class="token comment">//free(pn);</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// printf(&quot;\u6210\u529F\u5220\u9664\u8282\u70B9:%d %s\\n&quot;, pn-&gt;num, pn-&gt;name);</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pr<span class="token operator">-&gt;</span>num <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token comment">//\u5C3E\u90E8\u3001\u4E2D\u90E8</span>
        <span class="token punctuation">{</span>
            pr<span class="token operator">-&gt;</span>pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            pr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> pr<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
            <span class="token comment">// printf(&quot;\u6210\u529F\u5220\u9664\u8282\u70B9:%d %s\\n&quot;, pr-&gt;num, pr-&gt;name);</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// printf(&quot;\u6CA1\u6709\u627E\u5230\u76F8\u5173\u8282\u70B9\\n&quot;);</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">*</span>p_head <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token keyword">void</span> <span class="token function">delete_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span><span class="token operator">*</span>p_head<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    STU <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token operator">*</span>p_head<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;link not exist\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        STU <span class="token operator">*</span>pn <span class="token operator">=</span> head<span class="token punctuation">;</span>
        STU <span class="token operator">*</span>pr <span class="token operator">=</span> head<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pr<span class="token operator">-&gt;</span>num <span class="token operator">!=</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pn <span class="token operator">!=</span> pr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> pr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            pn <span class="token operator">=</span> pn<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            pr <span class="token operator">=</span> pr<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pn<span class="token operator">-&gt;</span>num <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token comment">//\u5934\u90E8\u3001\u4E2D\u90E8\u8282\u70B9</span>
        <span class="token punctuation">{</span>
            pn<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> pn<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
            pn<span class="token operator">-&gt;</span>pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pn<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pn <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token comment">//\u5220\u9664\u5934\u8282\u70B9</span>
            <span class="token punctuation">{</span>
                head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// printf(&quot;\u6210\u529F\u5220\u9664\u8282\u70B9:%d %s\\n&quot;, pn-&gt;num, pn-&gt;name);</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pr<span class="token operator">-&gt;</span>num <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token comment">//\u5C3E\u90E8\u3001\u4E2D\u90E8</span>
        <span class="token punctuation">{</span>
            pr<span class="token operator">-&gt;</span>pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            pr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>pre <span class="token operator">=</span> pr<span class="token operator">-&gt;</span>pre<span class="token punctuation">;</span>
            <span class="token comment">// printf(&quot;\u6210\u529F\u5220\u9664\u8282\u70B9:%d %s\\n&quot;, pr-&gt;num, pr-&gt;name);</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// printf(&quot;\u6CA1\u6709\u627E\u5230\u76F8\u5173\u8282\u70B9\\n&quot;);</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">*</span>p_head <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">void</span> <span class="token function">free_link</span><span class="token punctuation">(</span>STU <span class="token operator">*</span><span class="token operator">*</span>p_head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    STU <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token operator">*</span>p_head<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> head<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;link not exist\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        STU <span class="token operator">*</span>pn <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">do</span>
        <span class="token punctuation">{</span>
            head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pn <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pn <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p_head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">*</span>p_head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5E73\u5747\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5E73\u5747\u4E32" aria-hidden="true">#</a> \u5E73\u5747\u4E32</h3><div class="language-c\\ ext-c\\ line-numbers-mode"><pre class="language-c\\"><code>#include&lt;bits/stdc++.h&gt; 

using namespace std;
int num[200001];
int main( )
{
    int max=0;
    string s1,s2;
    cin&gt;&gt;s1&gt;&gt;s2;
    int len = s1.size();
    int index = len-1;
    num[0]=0;
    for(int i=0;i&lt;len;i++){
        int z = s1[index]+s2[index]-&#39;A&#39;-&#39;A&#39;;
        num[i+1] = (num[i]+z)/26;
        num[i] = (num[i]+z)%26;
        index--;
    }
    index=len-1;
    for(int i=0;i&lt;len;i++){
        int t = num[index+1]*26+num[index];
        num[index--]= t%2;
        s1[i] = t/2+&#39;A&#39;;
    }
    cout&lt;&lt;s1;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5206\u7403\u5668" tabindex="-1"><a class="header-anchor" href="#\u5206\u7403\u5668" aria-hidden="true">#</a> \u5206\u7403\u5668</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span> </span>

using namespace std<span class="token punctuation">;</span>
string <span class="token function">fenlei</span><span class="token punctuation">(</span><span class="token keyword">int</span> xiaoqiu<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//\u8F93\u51FA\u7684\u5C0F\u7403\u540C\u65F6\u5927\u4E8EB\u53E3\u548CC\u53E3\u6700\u4E0A\u9762\u7684\u5C0F\u7403</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    left<span class="token operator">=</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    right<span class="token operator">=</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//\u8F93\u51FA\u7684\u5C0F\u7403\u53EA\u5927\u4E8EB\u53E3\u6700\u4E0A\u9762\u7684\u5C0F\u7403</span>
                left<span class="token operator">=</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//\u8F93\u51FA\u7684\u5C0F\u7403\u540C\u65F6\u5927\u4E8EB\u53E3\u548CC\u53E3\u6700\u4E0A\u9762\u7684\u5C0F\u7403</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    left<span class="token operator">=</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    right<span class="token operator">=</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//\u8F93\u51FA\u7684\u5C0F\u7403\u53EA\u5927\u4E8EB\u53E3\u6700\u4E0A\u9762\u7684\u5C0F\u7403</span>
                right<span class="token operator">=</span>xiaoqiu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;NO&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;YES&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m<span class="token operator">=</span>n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> xiaoqiu<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    string result<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cin<span class="token operator">&gt;&gt;</span>xiaoqiu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        result<span class="token punctuation">[</span>m<span class="token operator">-</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fenlei</span><span class="token punctuation">(</span>xiaoqiu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        n<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">cmpfunc</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">container</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> cons<span class="token punctuation">;</span>
    <span class="token keyword">int</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Container<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>N<span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> isOk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Container A<span class="token punctuation">;</span>
        Container B<span class="token punctuation">;</span>
        A<span class="token punctuation">.</span>cons <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        B<span class="token punctuation">.</span>cons <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>q<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>q<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
            B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
        B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
        A<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        B<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        isOk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//\u68C0\u6D4B\u8FDE\u7EED3\u4E2A\u4EE5\u4E0A</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> lianxu<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            lianxu<span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">qsort</span><span class="token punctuation">(</span>lianxu<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>lianxu<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>lianxu<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>lianxu<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>lianxu<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NO\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    isOk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    k<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            k<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                
                <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NO\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    isOk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    left <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    left <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NO\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    isOk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    left <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    left <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NO\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    isOk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    A<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>A<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    B<span class="token punctuation">.</span>cons<span class="token punctuation">[</span><span class="token operator">++</span>B<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    left<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NO\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    isOk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;YES\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5408\u6CD5id" tabindex="-1"><a class="header-anchor" href="#\u5408\u6CD5id" aria-hidden="true">#</a> \u5408\u6CD5id</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
string  <span class="token function">isPrefixOfWord</span><span class="token punctuation">(</span>string  mainWord<span class="token punctuation">,</span>string searchWord<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mainWord<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span>searchWord<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>searchWord<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mainWord<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>searchWord<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token string">&quot;YES&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>mainWord<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mainWord<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>searchWord<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token string">&quot;YES&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token string">&quot;NO&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    string mm<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    string a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    string result<span class="token operator">=</span><span class="token string">&quot;YES&quot;</span><span class="token punctuation">;</span>
    string shuchu<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            shuchu<span class="token operator">=</span><span class="token function">isPrefixOfWord</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>shuchu<span class="token operator">==</span><span class="token string">&quot;NO&quot;</span><span class="token punctuation">)</span>result<span class="token operator">=</span>shuchu<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;YES&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span>result<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">is_begin_with</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> str2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len1 <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>len1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> len2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        p<span class="token operator">++</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> strs<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">gets</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>N <span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strcpy</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">strcpy</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> isbreak <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        isbreak <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>len1<span class="token operator">&gt;=</span>len2<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NO\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                isbreak <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>len1<span class="token operator">&lt;=</span>len2<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;NO\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                isbreak <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isbreak<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>   
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;YES\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u65B0\u4E16\u7EAA\u7EBF\u6BB5\u8986\u76D6" tabindex="-1"><a class="header-anchor" href="#\u65B0\u4E16\u7EAA\u7EBF\u6BB5\u8986\u76D6" aria-hidden="true">#</a> \u65B0\u4E16\u7EAA\u7EBF\u6BB5\u8986\u76D6</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u7B97\u5468\u671F</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>d<span class="token punctuation">,</span>m<span class="token punctuation">,</span>l<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld %lld %lld %lld&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//k\u4EE3\u8868\u7B2Ck\u4E2A\u7EBF\u6BB5</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//\u5982\u679C\u672C\u6B21\u8D28\u70B9\u8DF3\u8DC3\u540E\u8FBE\u4E0D\u5230\u7EBF\u6BB5\u5DE6\u8FB9\u7F18\u5219\u7ED3\u675F</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;=</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>m<span class="token operator">+</span>l<span class="token punctuation">)</span><span class="token comment">//\u8DF3\u7684\u4E0A\u7EBF\u6BB5\u5C31\u4E00\u76F4\u8DF3\uFF0C\u76F4\u5230\u8DF3\u51FA\u4E86\u7EBF\u6BB5\u53F3\u8FB9\u7F18</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>m<span class="token operator">+</span>l<span class="token punctuation">)</span><span class="token operator">/</span>d<span class="token punctuation">)</span><span class="token operator">*</span>d<span class="token operator">+</span>d<span class="token punctuation">;</span><span class="token comment">//*d/d\u662F\u4E3A\u4E86\u53D6\u6574</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld&quot;</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4FE1\u4EF0\u4E4B\u8DC3" tabindex="-1"><a class="header-anchor" href="#\u4FE1\u4EF0\u4E4B\u8DC3" aria-hidden="true">#</a> \u4FE1\u4EF0\u4E4B\u8DC3</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//\u6700\u7B80</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
    	<span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> group<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cin<span class="token operator">&gt;&gt;</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//0:h  1:d1  2:d2</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//V1</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u5DF2\u7ECF\u662F\u6700\u7B80</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot;/&quot;</span><span class="token operator">&lt;&lt;</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//V2</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u5DF2\u7ECF\u662F\u6700\u7B80</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot;/&quot;</span><span class="token operator">&lt;&lt;</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5206\u6570\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#\u5206\u6570\u4E2A\u6570" aria-hidden="true">#</a> \u5206\u6570\u4E2A\u6570</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
ll a<span class="token punctuation">[</span><span class="token number">1010000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ll d<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>ll l<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>r<span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>l<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
	        r<span class="token operator">=</span>i<span class="token operator">/</span><span class="token punctuation">(</span>i<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
	        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E92\u8D28" tabindex="-1"><a class="header-anchor" href="#\u4E92\u8D28" aria-hidden="true">#</a> \u4E92\u8D28</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>q<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//\u5185\u8054\u51FD\u6570\u4E0D\u80FD\u9012\u5F52\uFF0C\u56E0\u6B64\u6B64\u5904inlinew</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//\u8BA1\u7B97a,b\u7684\u6700\u5927\u516C\u56E0\u6570</span>
    <span class="token keyword">return</span> b<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>a<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u679A\u4E3E</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">//\u4F17\u6240\u5468\u77E5\uFF0C\u5F53\u4E24\u4E2A\u6570\u7684\u6700\u5927\u516C\u56E0\u6570\u4E3A1\u65F6\uFF0C\u6B64\u4E24\u6570\u4E92\u8D28\u3002</span>
            p<span class="token punctuation">[</span><span class="token operator">++</span>q<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>       <span class="token comment">//\u8BB0\u5F55\u7ED3\u679C</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>q<span class="token operator">*</span>n<span class="token operator">+</span>p<span class="token punctuation">[</span>k<span class="token operator">%</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u8F93\u51FAn\u4E92\u8D28\u7684\u7B2Ck\u4E2A\u6B63\u6574\u6570\u3002</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u5C0F\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u6700\u5C0F\u6570\u5B57" aria-hidden="true">#</a> \u6700\u5C0F\u6570\u5B57</h3><ol><li><p>\u5BF9\u8F93\u5165\u7684\u5B57\u7B26\u4E32\uFF0C \u4ECE0\u52309\uFF0C\u8BA1\u7B97\u5176\u4E2D\u7684\u6BCF\u4E00\u4E2A\u6570\u5B57\u5B57\u7B26\u7684\u51FA\u73B0\u6B21\u6570\uFF1B</p></li><li><p>\u5BFB\u627E\u76EE\u6807\u6570\u5B57\uFF1A</p></li></ol><p>\u4ECE0\u52309\uFF0C\u5BFB\u627E\u51FA\u73B0\u6B21\u6570\u6700\u5C11\u7684\u6570\u5B57\u5B57\u7B26\u3002\u5F53\u76EE\u6807\u6570\u5B57\u4E3A0\uFF0C\u9047\u5230\u51FA\u73B0\u6B21\u6570\u4E0E0\u7684\u51FA\u73B0\u6B21\u6570\u76F8\u540C\u6216\u8005\u5C11\u4E8E0\u7684\u51FA\u73B0\u6B21\u6570\u7684\u6570\u5B57\u5B57\u7B26\uFF0C\u90A3\u4E48\u76EE\u6807\u6570\u5B57\u53D8\u4E3A\u8FD9\u4E2A\u6570\u5B57\uFF1B\u5F53\u76EE\u6807\u6570\u5B57\u4E0D\u4E3A0\uFF0C\u53EA\u5F53\u9047\u5230\u51FA\u73B0\u6B21\u6570\u6BD4\u76EE\u6807\u6570\u5B57\u51FA\u73B0\u6B21\u6570\u5C11\u7684\u6570\u5B57\u5B57\u7B26\u65F6\uFF0C\u624D\u5C06\u76EE\u6807\u6570\u5B57\u6539\u53D8\u4E3A\u8FD9\u4E2A\u6570\u5B57\u3002</p><p>\u66F4\u76F4\u89C2\u5730\u8BB2\uFF0C\u7528target\u4EE3\u8868\u76EE\u6807\u6570\u5B57\uFF0Cindex\u4EE3\u8868\u4ECE1\u52309\u53D8\u5316\u7684\u4F4D\u7F6E,count\u662F\u4FDD\u5B58\u4E860-9\u6570\u5B57\u5B57\u7B26\u51FA\u73B0\u6B21\u6570\u7684\u6570\u7EC4\uFF0C\u90A3\u4E48\u5F53target=0\u65F6\uFF0C\u5982\u679Ccount[index]&lt;=count[target]\uFF0C\u5219target=index\uFF1Btarget&gt;0\u65F6\uFF0C\u53EA\u6709count[index]&lt;count[target]\u65F6\uFF0C\u624D\u6709target=index\u3002</p><ol start="3"><li>\u4F7F\u7528\u76EE\u6807\u6570\u5B57\u6784\u5EFA\u6700\u5C0F\u6570\u5B57\uFF1A</li></ol><p>\u5F53\u76EE\u6807\u6570\u5B57\u4E3A\u201D0\u201C\u65F6\uFF0C\u6700\u5C0F\u6570\u5B57\u662F\u7531\u4E00\u4E2A\u201C1\u201D\u5F00\u5934\u540E\u9762\u8DDF\u4E0A0\u7684\u51FA\u73B0\u6B21\u6570\u52A01\u4E2A\u201C0\u201D\u7EC4\u6210\u7684\u6570\u5B57\uFF0C\u6BD4\u5982\u9488\u5BF9\u4E0A\u4F8B\u4E2D\u51FA\u73B0\u7684\u8F93\u5165\u201C0112233445566778899\u201D\uFF0C\u76EE\u6807\u6570\u5B57\u662F0\uFF0C0\u51FA\u73B01\u6B21\uFF0C\u8F93\u51FA\u7ED3\u679C\u662F\u201D1\u201C\u52A0\u4E0A2\u4E2A\u201D0\u201C\uFF0C\u5373100\u3002</p><p>\u5F53\u76EE\u6807\u6570\u5B57\u4E0D\u4E3A0\u65F6\uFF0C\u6700\u5C0F\u6570\u5B57\u5373\u7531\u76EE\u6807\u6570\u5B57\u52A01\u4E2A\u76EE\u6807\u6570\u5B57\u7EC4\u6210\uFF0C\u6BD4\u5982\u201D011223344556778899\u201C\uFF0C\u76EE\u6807\u6570\u5B57\u4E3A6\uFF0C6\u51FA\u73B01\u6B21\uFF0C\u6700\u5C0F\u6570\u5B57\u5373\u75312\u4E2A\u201D6\u201C\u7EC4\u6210\uFF0C\u537366\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> digit<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>digit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>digit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>digit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span>min<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>digit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>digit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                min <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>digit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>digit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>digit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6C42\u89E3\u540C\u4F59\u65B9\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u6C42\u89E3\u540C\u4F59\u65B9\u7A0B" aria-hidden="true">#</a> \u6C42\u89E3\u540C\u4F59\u65B9\u7A0B</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> x <span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span> a <span class="token operator">%</span> b <span class="token punctuation">,</span> y <span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>y<span class="token punctuation">)</span> <span class="token operator">-=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> b <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//\u5750\u6807(k,k*k+k)</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>y<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token operator">&lt;=</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>y<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>k<span class="token operator">*</span>k<span class="token operator">+</span>k<span class="token operator">&lt;=</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> max_y <span class="token operator">=</span> x<span class="token operator">/</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> max_x <span class="token operator">=</span> k<span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>max_x<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> tmp <span class="token operator">=</span> x<span class="token operator">-</span><span class="token punctuation">(</span>k<span class="token operator">*</span>k<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                count<span class="token operator">+=</span>tmp<span class="token operator">/</span>k<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>max_y<span class="token operator">&gt;=</span>y<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> tmp <span class="token operator">=</span> y<span class="token operator">-</span>k<span class="token punctuation">;</span>
                count<span class="token operator">+=</span>tmp<span class="token operator">/</span>k<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        k<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%0.lf\\n&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47);function Ea(Xa,Wa){const p=c("RouterLink"),e=c("ExternalLinkIcon");return i(),u("div",null,[r,d,n("nav",m,[n("ul",null,[n("li",null,[a(p,{to:"#c\u8BED\u8A00\u5E93\u51FD\u6570"},{default:t(()=>[v]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#qsort"},{default:t(()=>[b]),_:1})]),n("li",null,[a(p,{to:"#\u5DE5\u5177\u51FD\u6570"},{default:t(()=>[y]),_:1})]),n("li",null,[a(p,{to:"#\u5DE5\u5177\u5B8F"},{default:t(()=>[w]),_:1})]),n("li",null,[a(p,{to:"#\u54C8\u5E0C\u51FD\u6570"},{default:t(()=>[f]),_:1})])])]),n("li",null,[a(p,{to:"#\u4E8C\u5206\u6CD5"},{default:t(()=>[h]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u6846\u67B6"},{default:t(()=>[g]),_:1})]),n("li",null,[a(p,{to:"#\u4E8C\u5206\u67E5\u627E-704"},{default:t(()=>[x]),_:1})]),n("li",null,[a(p,{to:"#\u627E\u7B2C\u4E00\u4E2A\u9519\u8BEF-278"},{default:t(()=>[z]),_:1})]),n("li",null,[a(p,{to:"#\u627E\u63D2\u5165\u4F4D\u7F6E-35"},{default:t(()=>[S]),_:1})]),n("li",null,[a(p,{to:"#\u4E24\u6570\u4E4B\u548C-\u6709\u5E8F-167"},{default:t(()=>[_]),_:1})]),n("li",null,[a(p,{to:"#\u5728\u6392\u5E8F\u6570\u7EC4\u4E2D\u67E5\u627E\u5143\u7D20\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E-34"},{default:t(()=>[j]),_:1})]),n("li",null,[a(p,{to:"#\u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4-33"},{default:t(()=>[q]),_:1})]),n("li",null,[a(p,{to:"#\u641C\u7D22\u4E8C\u7EF4\u77E9\u9635-74"},{default:t(()=>[N]),_:1})]),n("li",null,[a(p,{to:"#\u641C\u7D22\u4E8C\u7EF4\u77E9\u9635-ii-240"},{default:t(()=>[L]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C-153"},{default:t(()=>[C]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C-ii-154"},{default:t(()=>[U]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u5CF0\u503C-162"},{default:t(()=>[M]),_:1})]),n("li",null,[a(p,{to:"#\u641C\u7D22\u65CB\u8F6C\u6392\u5E8F\u6570\u7EC4-ii-81"},{default:t(()=>[T]),_:1})]),n("li",null,[a(p,{to:"#x-\u7684\u5E73\u65B9\u6839-69"},{default:t(()=>[A]),_:1})]),n("li",null,[a(p,{to:"#\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8282\u70B9\u4E2A\u6570-222"},{default:t(()=>[I]),_:1})]),n("li",null,[a(p,{to:"#h-\u6307\u6570-ii-275"},{default:t(()=>[B]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u91CD\u590D\u6570-287"},{default:t(()=>[D]),_:1})])])]),n("li",null,[a(p,{to:"#\u53CC\u6307\u9488\u3001\u6392\u5E8F"},{default:t(()=>[F]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u76F4\u63A5\u63D2\u5165\u6392\u5E8F"},{default:t(()=>[R]),_:1})]),n("li",null,[a(p,{to:"#\u5FEB\u901F\u6392\u5E8F"},{default:t(()=>[P]),_:1})]),n("li",null,[a(p,{to:"#\u8BA1\u6570\u6392\u5E8F-\u7279\u6B8A\u6876\u6392\u5E8F"},{default:t(()=>[H]),_:1})]),n("li",null,[a(p,{to:"#\u6709\u5E8F\u6570\u7EC4\u7684\u5E73\u65B9-977"},{default:t(()=>[O]),_:1})]),n("li",null,[a(p,{to:"#\u53CC\u6307\u9488\u6846\u67B6"},{default:t(()=>[E]),_:1})]),n("li",null,[a(p,{to:"#\u8F6E\u8F6C\u6570\u7EC4-189"},{default:t(()=>[X]),_:1})]),n("li",null,[a(p,{to:"#\u79FB\u52A8\u96F6-283"},{default:t(()=>[W]),_:1})]),n("li",null,[a(p,{to:"#\u4E24\u6570\u4E4B\u548C-\u6709\u5E8F-167-1"},{default:t(()=>[Y]),_:1})]),n("li",null,[a(p,{to:"#\u53CD\u8F6C\u5B57\u7B26\u4E32-344"},{default:t(()=>[$]),_:1})]),n("li",null,[a(p,{to:"#\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD-iii-557"},{default:t(()=>[K]),_:1})]),n("li",null,[a(p,{to:"#\u94FE\u8868\u4E2D\u95F4\u8282\u70B9-876"},{default:t(()=>[Q]),_:1})]),n("li",null,[a(p,{to:"#\u76F8\u4EA4\u94FE\u8868-160"},{default:t(()=>[V]),_:1})]),n("li",null,[a(p,{to:"#\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9-19"},{default:t(()=>[Z]),_:1})]),n("li",null,[a(p,{to:"#\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20-83"},{default:t(()=>[G]),_:1})]),n("li",null,[a(p,{to:"#\u5220\u9664\u6392\u5E8F\u94FE\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20-ii-82"},{default:t(()=>[J]),_:1})]),n("li",null,[a(p,{to:"#\u4E09\u6570\u4E4B\u548C-15"},{default:t(()=>[nn]),_:1})]),n("li",null,[a(p,{to:"#\u56DB\u6570\u4E4B\u548C-18"},{default:t(()=>[sn]),_:1})]),n("li",null,[a(p,{to:"#\u6BD4\u8F83\u542B\u9000\u683C\u7684\u5B57\u7B26\u4E32-844"},{default:t(()=>[an]),_:1})]),n("li",null,[a(p,{to:"#\u533A\u95F4\u5217\u8868\u7684\u4EA4\u96C6-986"},{default:t(()=>[pn]),_:1})]),n("li",null,[a(p,{to:"#\u76DB\u6700\u591A\u6C34\u7684\u5BB9\u5668-11"},{default:t(()=>[tn]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u957F\u56DE\u6587\u5B50\u4E32-5"},{default:t(()=>[on]),_:1})])])]),n("li",null,[a(p,{to:"#\u6ED1\u52A8\u7A97\u53E3"},{default:t(()=>[en]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u6846\u67B6-1"},{default:t(()=>[cn]),_:1})]),n("li",null,[a(p,{to:"#\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32-3"},{default:t(()=>[ln]),_:1})]),n("li",null,[a(p,{to:"#\u5B57\u7B26\u4E32\u7684\u6392\u5217-567"},{default:t(()=>[un]),_:1})]),n("li",null,[a(p,{to:"#\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD-438"},{default:t(()=>[kn]),_:1})]),n("li",null,[a(p,{to:"#\u4E58\u79EF\u5C0F\u4E8E-k-\u7684\u5B50\u6570\u7EC4-713"},{default:t(()=>[rn]),_:1})]),n("li",null,[a(p,{to:"#\u957F\u5EA6\u6700\u5C0F\u7684\u5B50\u6570\u7EC4-209"},{default:t(()=>[dn]),_:1})])])]),n("li",null,[a(p,{to:"#\u5E7F\u5EA6\u4F18\u5148\u641C\u7D22-\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22"},{default:t(()=>[mn]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u6846\u67B6-2"},{default:t(()=>[vn]),_:1})]),n("li",null,[a(p,{to:"#\u56FE\u50CF\u6E32\u67D3-733"},{default:t(()=>[bn]),_:1})]),n("li",null,[a(p,{to:"#\u5C9B\u5C7F\u7684\u6700\u5927\u9762\u79EF-695"},{default:t(()=>[yn]),_:1})]),n("li",null,[a(p,{to:"#\u5408\u5E76\u4E8C\u53C9\u6811-617"},{default:t(()=>[wn]),_:1})]),n("li",null,[a(p,{to:"#\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488-116"},{default:t(()=>[fn]),_:1})]),n("li",null,[a(p,{to:"#\u586B\u5145\u6BCF\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u53F3\u4FA7\u8282\u70B9\u6307\u9488-ii-117"},{default:t(()=>[hn]),_:1})]),n("li",null,[a(p,{to:"#\u76F8\u540C\u7684\u6811-100"},{default:t(()=>[gn]),_:1})]),n("li",null,[a(p,{to:"#\u53E6\u4E00\u68F5\u6811\u7684\u5B50\u6811-572"},{default:t(()=>[xn]),_:1})]),n("li",null,[a(p,{to:"#_01-\u77E9\u9635-542"},{default:t(()=>[zn]),_:1})]),n("li",null,[a(p,{to:"#\u8150\u70C2\u7684\u6A58\u5B50-994"},{default:t(()=>[Sn]),_:1})]),n("li",null,[a(p,{to:"#\u5C9B\u5C7F\u6570\u91CF-200"},{default:t(()=>[_n]),_:1})]),n("li",null,[a(p,{to:"#\u7701\u4EFD\u6570\u91CF-547"},{default:t(()=>[jn]),_:1})]),n("li",null,[a(p,{to:"#\u4E8C\u8FDB\u5236\u77E9\u9635\u4E2D\u7684\u6700\u77ED\u8DEF\u5F84-1091"},{default:t(()=>[qn]),_:1})]),n("li",null,[a(p,{to:"#\u88AB\u56F4\u7ED5\u7684\u533A\u57DF-130"},{default:t(()=>[Nn]),_:1})]),n("li",null,[a(p,{to:"#\u6240\u6709\u53EF\u80FD\u7684\u8DEF\u5F84-797"},{default:t(()=>[Ln]),_:1})]),n("li",null,[a(p,{to:"#\u8DEF\u5F84\u603B\u548C-112"},{default:t(()=>[Cn]),_:1})]),n("li",null,[a(p,{to:"#\u8DEF\u5F84\u603B\u548C-ii-113"},{default:t(()=>[Un]),_:1})])])]),n("li",null,[a(p,{to:"#\u5E76\u67E5\u96C6"},{default:t(()=>[Mn]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u7701\u4EFD\u6570\u91CF-547-1"},{default:t(()=>[Tn]),_:1})]),n("li",null,[a(p,{to:"#\u88AB\u56F4\u7ED5\u7684\u533A\u57DF-130-1"},{default:t(()=>[An]),_:1})])])]),n("li",null,[a(p,{to:"#\u9012\u5F52\u3001\u56DE\u6EAF"},{default:t(()=>[In]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u6846\u67B6-3"},{default:t(()=>[Bn]),_:1})]),n("li",null,[a(p,{to:"#\u5168\u6392\u5217-46"},{default:t(()=>[Dn]),_:1})]),n("li",null,[a(p,{to:"#\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868-21"},{default:t(()=>[Fn]),_:1})]),n("li",null,[a(p,{to:"#\u53CD\u8F6C\u94FE\u8868-206"},{default:t(()=>[Rn]),_:1})]),n("li",null,[a(p,{to:"#\u7EC4\u5408-77"},{default:t(()=>[Pn]),_:1})]),n("li",null,[a(p,{to:"#\u5B57\u6BCD\u5927\u5C0F\u5199\u5168\u6392\u5217-784"},{default:t(()=>[Hn]),_:1})]),n("li",null,[a(p,{to:"#\u5B50\u96C6-78"},{default:t(()=>[On]),_:1})]),n("li",null,[a(p,{to:"#\u5B50\u96C6-ii-90"},{default:t(()=>[En]),_:1})]),n("li",null,[a(p,{to:"#\u5168\u6392\u5217-ii-47"},{default:t(()=>[Xn]),_:1})]),n("li",null,[a(p,{to:"#\u7EC4\u5408\u603B\u548C-39"},{default:t(()=>[Wn]),_:1})]),n("li",null,[a(p,{to:"#\u7EC4\u5408\u603B\u548C-ii-40"},{default:t(()=>[Yn]),_:1})]),n("li",null,[a(p,{to:"#\u7535\u8BDD\u53F7\u7801\u7684\u5B57\u6BCD\u7EC4\u5408-17"},{default:t(()=>[$n]),_:1})]),n("li",null,[a(p,{to:"#\u62EC\u53F7\u751F\u6210-22"},{default:t(()=>[Kn]),_:1})]),n("li",null,[a(p,{to:"#\u5355\u8BCD\u641C\u7D22-79"},{default:t(()=>[Qn]),_:1})])])]),n("li",null,[a(p,{to:"#\u52A8\u6001\u89C4\u5212"},{default:t(()=>[Vn]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u6846\u67B6-4"},{default:t(()=>[Zn]),_:1})]),n("li",null,[a(p,{to:"#\u722C\u697C\u68AF-70"},{default:t(()=>[Gn]),_:1})]),n("li",null,[a(p,{to:"#\u6253\u5BB6\u52AB\u820D-198"},{default:t(()=>[Jn]),_:1})]),n("li",null,[a(p,{to:"#\u4E09\u89D2\u5F62\u6700\u5C0F\u8DEF\u5F84\u548C-120"},{default:t(()=>[ns]),_:1})]),n("li",null,[a(p,{to:"#\u6253\u5BB6\u52AB\u820D-ii-213"},{default:t(()=>[ss]),_:1})]),n("li",null,[a(p,{to:"#\u8DF3\u8DC3\u6E38\u620F-55"},{default:t(()=>[as]),_:1})]),n("li",null,[a(p,{to:"#\u8DF3\u8DC3\u6E38\u620F-ii-45"},{default:t(()=>[ps]),_:1})]),n("li",null,[a(p,{to:"#\u4E0D\u540C\u8DEF\u5F84-62"},{default:t(()=>[ts]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u957F\u56DE\u6587\u5B50\u4E32-5-1"},{default:t(()=>[os]),_:1})]),n("li",null,[a(p,{to:"#\u7B49\u5DEE\u6570\u5217\u5212\u5206-413"},{default:t(()=>[es]),_:1})]),n("li",null,[a(p,{to:"#\u89E3\u7801\u65B9\u6CD5-91"},{default:t(()=>[cs]),_:1})]),n("li",null,[a(p,{to:"#\u5355\u8BCD\u62C6\u5206-139"},{default:t(()=>[ls]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217-300"},{default:t(()=>[is]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570-673"},{default:t(()=>[us]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u957F\u516C\u5171\u5B50\u5E8F\u5217-1143"},{default:t(()=>[ks]),_:1})]),n("li",null,[a(p,{to:"#\u4E24\u4E2A\u5B57\u7B26\u4E32\u7684\u5220\u9664\u64CD\u4F5C-583"},{default:t(()=>[rs]),_:1})]),n("li",null,[a(p,{to:"#\u96F6\u94B1\u5151\u6362-322"},{default:t(()=>[ds]),_:1})]),n("li",null,[a(p,{to:"#\u6574\u6570\u62C6\u5206-343"},{default:t(()=>[ms]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u5927\u5B50\u6570\u7EC4\u548C-53"},{default:t(()=>[vs]),_:1})])])]),n("li",null,[a(p,{to:"#\u4F4D\u8FD0\u7B97"},{default:t(()=>[bs]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u57FA\u672C\u64CD\u4F5C"},{default:t(()=>[ys]),_:1})]),n("li",null,[a(p,{to:"#_2-\u7684\u5E42-231"},{default:t(()=>[ws]),_:1})]),n("li",null,[a(p,{to:"#\u4F4D1\u7684\u4E2A\u6570-191"},{default:t(()=>[fs]),_:1})]),n("li",null,[a(p,{to:"#\u98A0\u5012\u4E8C\u8FDB\u5236\u4F4D-190"},{default:t(()=>[hs]),_:1})]),n("li",null,[a(p,{to:"#\u53EA\u51FA\u73B0\u4E00\u6B21\u7684\u6570\u5B57-136"},{default:t(()=>[gs]),_:1})]),n("li",null,[a(p,{to:"#\u4E22\u5931\u7684\u6570\u5B57-268"},{default:t(()=>[xs]),_:1})]),n("li",null,[a(p,{to:"#\u4E24\u6570\u76F8\u9664-29"},{default:t(()=>[zs]),_:1})]),n("li",null,[a(p,{to:"#\u6570\u5B57\u8303\u56F4\u6309\u4F4D\u4E0E-201"},{default:t(()=>[Ss]),_:1})])])]),n("li",null,[a(p,{to:"#\u5176\u4ED6"},{default:t(()=>[_s]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u6D17\u724C\u7B97\u6CD5\u6846\u67B6"},{default:t(()=>[js]),_:1})]),n("li",null,[a(p,{to:"#\u6253\u4E71\u6570\u7EC4-384"},{default:t(()=>[qs]),_:1})]),n("li",null,[a(p,{to:"#\u5FEB\u4E50\u6570-202"},{default:t(()=>[Ns]),_:1})]),n("li",null,[a(p,{to:"#\u76F4\u7EBF\u4E0A\u6700\u591A\u7684\u70B9\u6570-149"},{default:t(()=>[Ls]),_:1})]),n("li",null,[a(p,{to:"#\u5BFB\u627E\u591A\u6570\u5143\u7D20-\u4E3B\u5143\u7D20"},{default:t(()=>[Cs]),_:1})])])]),n("li",null,[a(p,{to:"#\u5355\u5237"},{default:t(()=>[Us]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u5BFB\u627E\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570-4"},{default:t(()=>[Ms]),_:1})]),n("li",null,[a(p,{to:"#\u4E24\u6570\u4E4B\u548C-\u65E0\u5E8F-1"},{default:t(()=>[Ts]),_:1})]),n("li",null,[a(p,{to:"#\u94FE\u8868\u52A0\u6CD5-2"},{default:t(()=>[As]),_:1})]),n("li",null,[a(p,{to:"#\u52A0\u4E00-66"},{default:t(()=>[Is]),_:1})])])]),n("li",null,[a(p,{to:"#\u5468\u8D5B"},{default:t(()=>[Bs]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u6781\u5927\u6781\u5C0F\u6E38\u620F-6090"},{default:t(()=>[Ds]),_:1})]),n("li",null,[a(p,{to:"#\u5212\u5206\u6570\u7EC4\u4F7F\u6700\u5927\u5DEE\u4E3Ak-6091"},{default:t(()=>[Fs]),_:1})]),n("li",null,[a(p,{to:"#\u5206\u89E3"},{default:t(()=>[Rs]),_:1})]),n("li",null,[a(p,{to:"#\u62BD\u5956"},{default:t(()=>[Ps]),_:1})]),n("li",null,[a(p,{to:"#\u9152\u6876\u3001\u5957\u5A03\u3001\u4FE1\u5C01"},{default:t(()=>[Hs]),_:1})]),n("li",null,[a(p,{to:"#\u4E58\u6CD5\u9006\u5143"},{default:t(()=>[Os]),_:1})]),n("li",null,[a(p,{to:"#\u6C34\u4F4D\u7EBF"},{default:t(()=>[Es]),_:1})]),n("li",null,[a(p,{to:"#\u9006\u6CE2\u5170\u5F0F\u8BA1\u7B97"},{default:t(()=>[Xs]),_:1})]),n("li",null,[a(p,{to:"#\u5403\u5976\u916A"},{default:t(()=>[Ws]),_:1})]),n("li",null,[a(p,{to:"#\u7EBF\u6027\u5582\u732A"},{default:t(()=>[Ys]),_:1})]),n("li",null,[a(p,{to:"#\u4E2D\u6691\u7684\u7AF9\u9F20"},{default:t(()=>[$s]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u5927\u516C\u7EA6\u6570"},{default:t(()=>[Ks]),_:1})]),n("li",null,[a(p,{to:"#\u7BA1\u7406\u901A\u8BAF\u7C3F"},{default:t(()=>[Qs]),_:1})]),n("li",null,[a(p,{to:"#\u5E73\u5747\u4E32"},{default:t(()=>[Vs]),_:1})]),n("li",null,[a(p,{to:"#\u5206\u7403\u5668"},{default:t(()=>[Zs]),_:1})]),n("li",null,[a(p,{to:"#\u5408\u6CD5id"},{default:t(()=>[Gs]),_:1})]),n("li",null,[a(p,{to:"#\u65B0\u4E16\u7EAA\u7EBF\u6BB5\u8986\u76D6"},{default:t(()=>[Js]),_:1})]),n("li",null,[a(p,{to:"#\u4FE1\u4EF0\u4E4B\u8DC3"},{default:t(()=>[na]),_:1})]),n("li",null,[a(p,{to:"#\u5206\u6570\u4E2A\u6570"},{default:t(()=>[sa]),_:1})]),n("li",null,[a(p,{to:"#\u4E92\u8D28"},{default:t(()=>[aa]),_:1})]),n("li",null,[a(p,{to:"#\u6700\u5C0F\u6570\u5B57"},{default:t(()=>[pa]),_:1})]),n("li",null,[a(p,{to:"#\u6C42\u89E3\u540C\u4F59\u65B9\u7A0B"},{default:t(()=>[ta]),_:1})])])]),n("li",null,[a(p,{to:"#"})])])]),n("p",null,[oa,n("a",ea,[ca,a(e)])]),n("p",null,[la,n("a",ia,[ua,a(e)])]),n("p",null,[ka,n("a",ra,[da,a(e)])]),ma,va,ba,ya,wa,fa,ha,ga,xa,n("div",za,[Sa,_a,ja,qa,Na,La,n("p",null,[Ca,n("a",Ua,[Ma,a(e)])])]),Ta,n("div",Aa,[Ia,Ba,Da,Fa,n("p",null,[Ra,n("a",Pa,[Ha,a(e)])])]),Oa])}var $a=l(k,[["render",Ea],["__file","page16.html.vue"]]);export{$a as default};
